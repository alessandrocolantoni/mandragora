/* ====================================================================
 *		      GNU GENERAL PUBLIC LICENSE
 *		         Version 2, June 1991
 *
 *    Copyright (C) 1989, 1991 Free Software Foundation, Inc.
 *                        51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *    Everyone is permitted to copy and distribute verbatim copies
 *  of this license document, but changing it is not allowed.
 *
 *  			    Preamble
 *
 *    The licenses for most software are designed to take away your
 *  freedom to share and change it.  By contrast, the GNU General Public
 *  License is intended to guarantee your freedom to share and change free
 *  software--to make sure the software is free for all its users.  This
 *  General Public License applies to most of the Free Software
 *  Foundation's software and to any other program whose authors commit to
 *  using it.  (Some other Free Software Foundation software is covered by
 *  the GNU Library General Public License instead.)  You can apply it to
 *  your programs, too.
 *
 *    When we speak of free software, we are referring to freedom, not
 *  price.  Our General Public Licenses are designed to make sure that you
 *  have the freedom to distribute copies of free software (and charge for
 *  this service if you wish), that you receive source code or can get it
 *  if you want it, that you can change the software or use pieces of it
 *  in new free programs; and that you know you can do these things.
 *
 *     To protect your rights, we need to make restrictions that forbid
 *  anyone to deny you these rights or to ask you to surrender the rights.
 *  These restrictions translate to certain responsibilities for you if you
 *  distribute copies of the software, or if you modify it.
 *
 *     For example, if you distribute copies of such a program, whether
 *  gratis or for a fee, you must give the recipients all the rights that
 *  you have.  You must make sure that they, too, receive or can get the
 *  source code.  And you must show them these terms so they know their
 *  rights.
 *
 *     We protect your rights with two steps: (1) copyright the software, and
 *  (2) offer you this license which gives you legal permission to copy,
 *  distribute and/or modify the software.
 *
 *     Also, for each author's protection and ours, we want to make certain
 *  that everyone understands that there is no warranty for this free
 *  software.  If the software is modified by someone else and passed on, we
 *  want its recipients to know that what they have is not the original, so
 *  that any problems introduced by others will not reflect on the original
 *  authors' reputations.
 *
 *     Finally, any free program is threatened constantly by software
 *  patents.  We wish to avoid the danger that redistributors of a free
 *  program will individually obtain patent licenses, in effect making the
 *  program proprietary.  To prevent this, we have made it clear that any
 *  patent must be licensed for everyone's free use or not licensed at all.
 *
 *     The precise terms and conditions for copying, distribution and
 *  modification follow.
 *  
 *	                	    GNU GENERAL PUBLIC LICENSE
 *       TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *     0. This License applies to any program or other work which contains
 *  a notice placed by the copyright holder saying it may be distributed
 *  under the terms of this General Public License.  The "Program", below,
 *  refers to any such program or work, and a "work based on the Program"
 *  means either the Program or any derivative work under copyright law:
 *  that is to say, a work containing the Program or a portion of it,
 *  either verbatim or with modifications and/or translated into another
 *  language.  (Hereinafter, translation is included without limitation in
 *  the term "modification".)  Each licensee is addressed as "you".
 *
 *     Activities other than copying, distribution and modification are not
 *  covered by this License; they are outside its scope.  The act of
 *  running the Program is not restricted, and the output from the Program
 *  is covered only if its contents constitute a work based on the
 *  Program (independent of having been made by running the Program).
 *  Whether that is true depends on what the Program does.
 *
 *     1. You may copy and distribute verbatim copies of the Program's
 *  source code as you receive it, in any medium, provided that you
 *  conspicuously and appropriately publish on each copy an appropriate
 *  copyright notice and disclaimer of warranty; keep intact all the
 *  notices that refer to this License and to the absence of any warranty;
 *  and give any other recipients of the Program a copy of this License
 *  along with the Program.
 *
 *  You may charge a fee for the physical act of transferring a copy, and
 *  you may at your option offer warranty protection in exchange for a fee.
 *
 *     2. You may modify your copy or copies of the Program or any portion
 *  of it, thus forming a work based on the Program, and copy and
 *  distribute such modifications or work under the terms of Section 1
 *  above, provided that you also meet all of these conditions:
 *
 *        a) You must cause the modified files to carry prominent notices
 *     stating that you changed the files and the date of any change.
 *
 *        b) You must cause any work that you distribute or publish, that in
 *     whole or in part contains or is derived from the Program or any
 *     part thereof, to be licensed as a whole at no charge to all third
 *     parties under the terms of this License.
 *
 *        c) If the modified program normally reads commands interactively
 *     when run, you must cause it, when started running for such
 *     interactive use in the most ordinary way, to print or display an
 *     announcement including an appropriate copyright notice and a
 *     notice that there is no warranty (or else, saying that you provide
 *     a warranty) and that users may redistribute the program under
 *     these conditions, and telling the user how to view a copy of this
 *     License.  (Exception: if the Program itself is interactive but
 *     does not normally print such an announcement, your work based on
 *     the Program is not required to print an announcement.)
 *     
 *     These requirements apply to the modified work as a whole.  If
 *  identifiable sections of that work are not derived from the Program,
 *  and can be reasonably considered independent and separate works in
 *  themselves, then this License, and its terms, do not apply to those
 *  sections when you distribute them as separate works.  But when you
 *  distribute the same sections as part of a whole which is a work based
 *  on the Program, the distribution of the whole must be on the terms of
 *  this License, whose permissions for other licensees extend to the
 *  entire whole, and thus to each and every part regardless of who wrote it.
 *
 *     Thus, it is not the intent of this section to claim rights or contest
 *  your rights to work written entirely by you; rather, the intent is to
 *  exercise the right to control the distribution of derivative or
 *  collective works based on the Program.
 *
 *     In addition, mere aggregation of another work not based on the Program
 *  with the Program (or with a work based on the Program) on a volume of
 *  a storage or distribution medium does not bring the other work under
 *  the scope of this License.
 *
 *      3. You may copy and distribute the Program (or a work based on it,
 *  under Section 2) in object code or executable form under the terms of
 *  Sections 1 and 2 above provided that you also do one of the following:
 *
 *        a) Accompany it with the complete corresponding machine-readable
 *     source code, which must be distributed under the terms of Sections
 *     1 and 2 above on a medium customarily used for software interchange; or,
 *
 *        b) Accompany it with a written offer, valid for at least three
 *     years, to give any third party, for a charge no more than your
 *     cost of physically performing source distribution, a complete
 *     machine-readable copy of the corresponding source code, to be
 *     distributed under the terms of Sections 1 and 2 above on a medium
 *     customarily used for software interchange; or,
 *
 *        c) Accompany it with the information you received as to the offer
 *     to distribute corresponding source code.  (This alternative is
 *     allowed only for noncommercial distribution and only if you
 *     received the program in object code or executable form with such
 *     an offer, in accord with Subsection b above.)
 *
 *  The source code for a work means the preferred form of the work for
 *  making modifications to it.  For an executable work, complete source
 *  code means all the source code for all modules it contains, plus any
 *  associated interface definition files, plus the scripts used to
 *  control compilation and installation of the executable.  However, as a
 *  special exception, the source code distributed need not include
 *  anything that is normally distributed (in either source or binary
 *  form) with the major components (compiler, kernel, and so on) of the
 *  operating system on which the executable runs, unless that component
 *  itself accompanies the executable.
 *
 *  If distribution of executable or object code is made by offering
 *  access to copy from a designated place, then offering equivalent
 *  access to copy the source code from the same place counts as
 *  distribution of the source code, even though third parties are not
 *  compelled to copy the source along with the object code.
 *  
 *     4. You may not copy, modify, sublicense, or distribute the Program
 *  except as expressly provided under this License.  Any attempt
 *  otherwise to copy, modify, sublicense or distribute the Program is
 *  void, and will automatically terminate your rights under this License.
 *  However, parties who have received copies, or rights, from you under
 *  this License will not have their licenses terminated so long as such
 *  parties remain in full compliance.
 *
 *    5. You are not required to accept this License, since you have not
 *  signed it.  However, nothing else grants you permission to modify or
 *  distribute the Program or its derivative works.  These actions are
 *  prohibited by law if you do not accept this License.  Therefore, by
 *  modifying or distributing the Program (or any work based on the
 *  Program), you indicate your acceptance of this License to do so, and
 *  all its terms and conditions for copying, distributing or modifying
 *  the Program or works based on it.
 *
 *    6. Each time you redistribute the Program (or any work based on the
 *  Program), the recipient automatically receives a license from the
 *  original licensor to copy, distribute or modify the Program subject to
 *  these terms and conditions.  You may not impose any further
 *  restrictions on the recipients' exercise of the rights granted herein.
 *  You are not responsible for enforcing compliance by third parties to
 *  this License.
 *
 *    7. If, as a consequence of a court judgment or allegation of patent
 *  infringement or for any other reason (not limited to patent issues),
 *  conditions are imposed on you (whether by court order, agreement or
 *  otherwise) that contradict the conditions of this License, they do not
 *  excuse you from the conditions of this License.  If you cannot
 *  distribute so as to satisfy simultaneously your obligations under this
 *  License and any other pertinent obligations, then as a consequence you
 *  may not distribute the Program at all.  For example, if a patent
 *  license would not permit royalty-free redistribution of the Program by
 *  all those who receive copies directly or indirectly through you, then
 *  the only way you could satisfy both it and this License would be to
 *  refrain entirely from distribution of the Program.

 *  If any portion of this section is held invalid or unenforceable under
 *  any particular circumstance, the balance of the section is intended to
 *  apply and the section as a whole is intended to apply in other
 *  circumstances.

 *  It is not the purpose of this section to induce you to infringe any
 *  patents or other property right claims or to contest validity of any
 *  such claims; this section has the sole purpose of protecting the
 *  integrity of the free software distribution system, which is
 *  implemented by public license practices.  Many people have made
 *  generous contributions to the wide range of software distributed
 *  through that system in reliance on consistent application of that
 *  system; it is up to the author/donor to decide if he or she is willing
 *  to distribute software through any other system and a licensee cannot
 *  impose that choice.

 *  This section is intended to make thoroughly clear what is believed to
 *  be a consequence of the rest of this License.
 *  
 *    8. If the distribution and/or use of the Program is restricted in
 *  certain countries either by patents or by copyrighted interfaces, the
 *  original copyright holder who places the Program under this License
 *  may add an explicit geographical distribution limitation excluding
 *  those countries, so that distribution is permitted only in or among
 *  countries not thus excluded.  In such case, this License incorporates
 *  the limitation as if written in the body of this License.
 *
 *    9. The Free Software Foundation may publish revised and/or new versions
 *  of the General Public License from time to time.  Such new versions will
 *  be similar in spirit to the present version, but may differ in detail to
 *  address new problems or concerns.
 *
 *  Each version is given a distinguishing version number.  If the Program
 *  specifies a version number of this License which applies to it and "any
 *  later version", you have the option of following the terms and conditions
 *  either of that version or of any later version published by the Free
 *  Software Foundation.  If the Program does not specify a version number of
 *  this License, you may choose any version ever published by the Free Software
 *  Foundation.

 *    10. If you wish to incorporate parts of the Program into other free
 *  programs whose distribution conditions are different, write to the author
 *  to ask for permission.  For software which is copyrighted by the Free
 *  Software Foundation, write to the Free Software Foundation; we sometimes
 *  make exceptions for this.  Our decision will be guided by the two goals
 *  vof preserving the free status of all derivatives of our free software and
 *  of promoting the sharing and reuse of software generally.
 *
 *  			    NO WARRANTY
 *
 *    11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
 *  FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
 *  OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
 *  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
 *  OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
 *  TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
 *  PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
 *  REPAIR OR CORRECTION.
 *
 *    12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
 *  WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
 *  REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
 *  INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
 *  OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
 *  TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
 *  YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
 *  PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGES.
 *
 *  		     END OF TERMS AND CONDITIONS
 *  
 *  	    How to Apply These Terms to Your New Programs
 *    If you develop a new program, and you want it to be of the greatest
 *  possible use to the public, the best way to achieve this is to make it
 *  free software which everyone can redistribute and change under these terms.
 *
 *    To do so, attach the following notices to the program.  It is safest
 *  to attach them to the start of each source file to most effectively
 *  convey the exclusion of warranty; and each file should have at least
 *  the "copyright" line and a pointer to where the full notice is found.
 *
 *      <one line to give the program's name and a brief idea of what it does.>
 *      Copyright (C) <year>  <name of author>
 *
 *      This program is free software; you can redistribute it and/or modify
 *      it under the terms of the GNU General Public License as published by
 *      the Free Software Foundation; either version 2 of the License, or
 *      (at your option) any later version.
 *
 *      This program is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *      GNU General Public License for more details.
 *
 *      You should have received a copy of the GNU General Public License
 *      along with this program; if not, write to the Free Software
 *      Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *
 *  Also add information on how to contact you by electronic and paper mail.
 *
 *  If the program is interactive, make it output a short notice like this
 *  when it starts in an interactive mode:
 *
 *      Gnomovision version 69, Copyright (C) year name of author
 *      Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
 *      This is free software, and you are welcome to redistribute it
 *      under certain conditions; type `show c' for details.
 *
 *  The hypothetical commands `show w' and `show c' should show the appropriate
 *  parts of the General Public License.  Of course, the commands you use may
 *  be called something other than `show w' and `show c'; they could even be
 *  mouse-clicks or menu items--whatever suits your program.
 *
 *  You should also get your employer (if you work as a programmer) or your
 *  school, if any, to sign a "copyright disclaimer" for the program, if
 *  necessary.  Here is a sample; alter the names:
 *
 *    Yoyodyne, Inc., hereby disclaims all copyright interest in the program
 *    `Gnomovision' (which makes passes at compilers) written by James Hacker.
 *
 *    <signature of Ty Coon>, 1 April 1989
 *    Ty Coon, President of Vice

 *  This General Public License does not permit incorporating your program into
 *  proprietary programs.  If your program is a subroutine library, you may
 *  consider it more useful to permit linking proprietary applications with the
 *  library.  If this is what you want to do, use the GNU Library General
 *  Public License instead of this License.

*/
package it.aco.mandragora.bd;

import static junit.framework.Assert.assertNull;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import it.aco.mandragora.query.LogicCondition;
import it.aco.mandragora.query.LogicSqlCondition;
import it.aco.mandragora.vo.CategoryVO;
import it.aco.mandragora.vo.ClerkVO;
import it.aco.mandragora.vo.CompanyGroupVO;
import it.aco.mandragora.vo.CompanyVO;
import it.aco.mandragora.vo.CopyNode111VO;
import it.aco.mandragora.vo.CopyNode11VO;
import it.aco.mandragora.vo.CopyNode121VO;
import it.aco.mandragora.vo.CopyNode122VO;
import it.aco.mandragora.vo.CopyNode12VO;
import it.aco.mandragora.vo.CopyNode1VO;
import it.aco.mandragora.vo.CopyNode211VO;
import it.aco.mandragora.vo.CopyNode21VO;
import it.aco.mandragora.vo.CopyNode2VO;
import it.aco.mandragora.vo.CopyNode3111VO;
import it.aco.mandragora.vo.CopyNode311VO;
import it.aco.mandragora.vo.CopyNode31VO;
import it.aco.mandragora.vo.CopyNode32VO;
import it.aco.mandragora.vo.CopyNode3VO;
import it.aco.mandragora.vo.CopyRootVO;
import it.aco.mandragora.vo.DirectorClerkVO;
import it.aco.mandragora.vo.DirectorVO;
import it.aco.mandragora.vo.MainVO;
import it.aco.mandragora.vo.Node111VO;
import it.aco.mandragora.vo.Node11VO;
import it.aco.mandragora.vo.Node121VO;
import it.aco.mandragora.vo.Node122VO;
import it.aco.mandragora.vo.Node12VO;
import it.aco.mandragora.vo.Node1VO;
import it.aco.mandragora.vo.Node211VO;
import it.aco.mandragora.vo.Node21VO;
import it.aco.mandragora.vo.Node221VO;
import it.aco.mandragora.vo.Node22VO;
import it.aco.mandragora.vo.Node2VO;
import it.aco.mandragora.vo.Node3111VO;
import it.aco.mandragora.vo.Node3112VO;
import it.aco.mandragora.vo.Node311VO;
import it.aco.mandragora.vo.Node31VO;
import it.aco.mandragora.vo.Node321VO;
import it.aco.mandragora.vo.Node322VO;
import it.aco.mandragora.vo.Node32VO;
import it.aco.mandragora.vo.Node33VO;
import it.aco.mandragora.vo.Node3VO;
import it.aco.mandragora.vo.OrderVO;
import it.aco.mandragora.vo.Path0VO;
import it.aco.mandragora.vo.Path10VO;
import it.aco.mandragora.vo.Path11VO;
import it.aco.mandragora.vo.Path1VO;
import it.aco.mandragora.vo.Path2VO;
import it.aco.mandragora.vo.Path3VO;
import it.aco.mandragora.vo.Path4VO;
import it.aco.mandragora.vo.Path5VO;
import it.aco.mandragora.vo.Path6VO;
import it.aco.mandragora.vo.Path7VO;
import it.aco.mandragora.vo.Path8VO;
import it.aco.mandragora.vo.Path9VO;
import it.aco.mandragora.vo.PersonProjectVO;
import it.aco.mandragora.vo.PersonRoleVO;
import it.aco.mandragora.vo.PersonVO;
import it.aco.mandragora.vo.ProductVO;
import it.aco.mandragora.vo.ProjectVO;
import it.aco.mandragora.vo.Reference4VO;
import it.aco.mandragora.vo.RoleVO;
import it.aco.mandragora.vo.RootVO;
import it.aco.mandragora.vo.SalesAssistantVO;
import it.aco.mandragora.vo.SalesDivisionVO;
import it.aco.mandragora.vo.SalesManagerVO;
import it.aco.mandragora.vo.StoreVO;
import it.aco.mandragora.vo.SubCategoryVO;
import it.aco.mandragora.vo.SubTaskVO;
import it.aco.mandragora.vo.TaskVO;
import it.aco.mandragora.vo.UserVO;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;

import org.junit.Assert;
import org.junit.Test;


public abstract class BDTest  {

    protected abstract BD getBD() throws Exception;

    protected abstract String getThisClassName() ;

    protected abstract org.apache.log4j.Category getLog() ;

    private org.apache.log4j.Category log = getLog();



    @Test public void testFindByPrimaryKeyWithRealClassAndPkValues(){
        log.info("Entering "+getThisClassName()+".testFindByPrimaryKeyWithRealClassAndPkValues");
        try{

            BD bd = getBD();
            CompanyGroupVO companyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new Object[]{new Integer(1)});
            log.info("companyGroupVO.idCompanyGroup ="+companyGroupVO.getIdCompanyGroup().intValue() );
            log.info("companyGroupVO.name ="+companyGroupVO.getName() );

            assertEquals("expected companyGroupVO.idCompanyGroup == 1",new Integer(1),companyGroupVO.getIdCompanyGroup());
            assertEquals("expected companyGroupVO.name  == FIATGROUP","FIATGROUP",companyGroupVO.getName());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindByPrimaryKeyWithRealClassAndPkValues() :"+e.toString(),false);
        }
        log.info("Done with "+getThisClassName()+".testFindByPrimaryKeyWithRealClassAndPkValues()");
    }
    

    @Test public void testFindByPrimaryKeyWithRealClassPkFieldNamesAndPkValues(){
        log.info("Entering "+getThisClassName()+".testFindByPrimaryKeyWithRealClassPkFieldNamesAndPkValues");
        try{

            BD bd = getBD();
            CompanyGroupVO companyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new String[]{"idCompanyGroup"},new Object[]{new Integer(1)});
            log.info("companyGroupVO.idCompanyGroup ="+companyGroupVO.getIdCompanyGroup().intValue() );
            log.info("companyGroupVO.name ="+companyGroupVO.getName() );
            assertEquals("expected companyGroupVO.idCompanyGroup == 1",new Integer(1),companyGroupVO.getIdCompanyGroup());
            assertEquals("expected companyGroupVO.name  == FIATGROUP","FIATGROUP",companyGroupVO.getName());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindByPrimaryKeyWithRealClassPkFieldNamesAndPkValues() :"+e.toString(),false);
        }
        log.info("Done with "+getThisClassName()+".testFindByPrimaryKeyWithRealClassPkFieldNamesAndPkValues()");
    }



    @Test public void testFindByPrimaryKeyWithRealClassAndPkValue(){
        log.info("Entering "+getThisClassName()+".testFindByPrimaryKeyWithRealClassAndPkValue");
        try{
            /*
            Method method = PojoManagerBD.class.getMethod("findByPrimaryKey",Class.class,Object.class);
            Field field = PojoManagerBD.class.getDeclaredField("__PARANAMER_DATA");
            String __PARANAMER_DATA_value = (String) field.get(null);
            String __PARANAMER_DATA = "v1.0 \n"
            + "<init> \n"
            + "findByPrimaryKey java.lang.Class,java.lang.Object realClass,pkValue\n";
            assertEquals(__PARANAMER_DATA_value,__PARANAMER_DATA_value,__PARANAMER_DATA);

            Paranamer paranamer = new DefaultParanamer();
            String[] parameters= paranamer.lookupParameterNames(method);
            assertEquals("parameters[0] != realClass",parameters[0],"realClass");
            assertEquals("parameters[1] != pkValue",parameters[1],"pkValue");
            */


            BD bd =  getBD();
            CompanyGroupVO companyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new Integer(1));
            testIsCompanyGroupFiat(companyGroupVO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindByPrimaryKeyWithRealClassAndPkValue() :"+e.toString(),false);
        }
        log.info("Done with "+getThisClassName()+".testFindByPrimaryKeyWithRealClassAndPkValue()");
    }

    @Test
    public void testRetrieveReference(){
        try{

            BD bd = getBD();
            CompanyGroupVO companyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new Integer(1));

            bd.retrieveReference(companyGroupVO,"companyVOs");
            Collection companyVOs =  companyGroupVO.getCompanyVOs();
            Iterator iterator=  companyVOs.iterator();

            CompanyVO companyVO = (CompanyVO) iterator.next();
            testIsCompanyFiat(companyVO);
            companyVO = (CompanyVO) iterator.next();
            testIsCompanyLancia(companyVO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetrieveReference() :"+e.toString(),false);
        }
    }

    private void testIsCompanyGroupFiat(CompanyGroupVO companyGroupVO) throws Exception{
        try{
            log.info("companyGroupVO.idCompanyGroup ="+companyGroupVO.getIdCompanyGroup().intValue() );
            log.info("companyGroupVO.name ="+companyGroupVO.getName() );
            assertEquals("expected companyGroupVO.idCompanyGroup == 1",new Integer(1),companyGroupVO.getIdCompanyGroup());
            assertEquals("expected companyGroupVO.name  == FIATGROUP","FIATGROUP",companyGroupVO.getName());

        } catch (Exception e){
            throw e;
        }
    }

    private void testIsCompanyGroupRenault(CompanyGroupVO companyGroupVO) throws Exception{
        try{
            log.info("companyGroupVO.idCompanyGroup ="+companyGroupVO.getIdCompanyGroup().intValue() );
            log.info("companyGroupVO.name ="+companyGroupVO.getName() );
            assertEquals("expected companyGroupVO.idCompanyGroup == 2",new Integer(2),companyGroupVO.getIdCompanyGroup());
            assertEquals("expected companyGroupVO.name  == RENAULTGROUP","RENAULTGROUP",companyGroupVO.getName());

        } catch (Exception e){
            throw e;
        }
    }


    protected void testIsCompanyFiat(CompanyVO companyVO) throws Exception{
        try{
            log.info("companyVO.idCompanyGroup ="+companyVO.getIdCompanyGroup().intValue() );
            log.info("companyVO.idCompany  ="+companyVO.getIdCompany().intValue() );
            log.info("companyVO.name ="+companyVO.getName() );
            assertEquals("expected companyVO.idCompanyGroup == 1", new Integer(1),companyVO.getIdCompanyGroup());
            assertEquals("expected companyVO.idCompany == 1", new Integer(1),companyVO.getIdCompany());
            assertEquals("expected companyVO.name  == FIAT","FIAT",companyVO.getName());

        } catch (Exception e){
            throw new Exception("Exception thrown in testIsCompanyFiat:  "+e.toString(),e);
        }
    }

    protected void testIsCompanyLancia(CompanyVO companyVO) throws Exception{
        try{
            log.info("companyVO.idCompanyGroup ="+companyVO.getIdCompanyGroup().intValue() );
            log.info("companyVO.idCompany  ="+companyVO.getIdCompany().intValue() );
            log.info("companyVO.name ="+companyVO.getName() );
            assertEquals("expected companyVO.idCompanyGroup == 1", new Integer(1),companyVO.getIdCompanyGroup());
            assertEquals("expected companyVO.idCompany == 2", new Integer(2),companyVO.getIdCompany());
            assertEquals("expected companyVO.name  == LANCIA","LANCIA",companyVO.getName());
        } catch (Exception e){
            throw e;
        }
    }

    private void testIsCompanyRenault(CompanyVO companyVO) throws Exception{
        try{
            log.info("companyVO.idCompanyGroup ="+companyVO.getIdCompanyGroup().intValue() );
            log.info("companyVO.idCompany  ="+companyVO.getIdCompany().intValue() );
            log.info("companyVO.name ="+companyVO.getName() );
            assertEquals("expected companyVO.idCompanyGroup == 2", new Integer(2),companyVO.getIdCompanyGroup());
            assertEquals("expected companyVO.idCompany == 1", new Integer(1),companyVO.getIdCompany());
            assertEquals("expected companyVO.name  == RENAULT","RENAULT",companyVO.getName());
        } catch (Exception e){
            throw e;
        }
    }

    protected void testIsCompanyDacia(CompanyVO companyVO) throws Exception{
        try{
            log.info("companyVO.idCompanyGroup ="+companyVO.getIdCompanyGroup().intValue() );
            log.info("companyVO.idCompany  ="+companyVO.getIdCompany().intValue() );
            log.info("companyVO.name ="+companyVO.getName() );
            assertEquals("expected companyVO.idCompanyGroup == 2", new Integer(2),companyVO.getIdCompanyGroup());
            assertEquals("expected companyVO.idCompany == 2", new Integer(2),companyVO.getIdCompany());
            assertEquals("expected companyVO.name  == DACIA","DACIA",companyVO.getName());
        } catch (Exception e){
            throw e;
        }
    }

    private void testIsCompanySamsung(CompanyVO companyVO) throws Exception{
        try{
            log.info("companyVO.idCompanyGroup ="+companyVO.getIdCompanyGroup().intValue() );
            log.info("companyVO.idCompany  ="+companyVO.getIdCompany().intValue() );
            log.info("companyVO.name ="+companyVO.getName() );
            assertEquals("expected companyVO.idCompanyGroup == 2", new Integer(2),companyVO.getIdCompanyGroup());
            assertEquals("expected companyVO.idCompany == 3", new Integer(3),companyVO.getIdCompany());
            assertEquals("expected companyVO.name  == SAMSUNG","SAMSUNG",companyVO.getName());

        } catch (Exception e){
            throw e;
        }
    }

    //retrieveReferenceInCollection(Collection valueObjectsCollection, String pAttributeName)

    
    @Test public void testRetrieveReferenceInCollection(){
        try{

            BD bd = getBD();
            CompanyGroupVO  fiatCompanyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new Integer(1));
            CompanyGroupVO  renaultCompanyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new Integer(2));
            Vector companyGroupVOs = new Vector();
            companyGroupVOs.add(fiatCompanyGroupVO);
            companyGroupVOs.add(renaultCompanyGroupVO);
            bd.retrieveReferenceInCollection(companyGroupVOs,"companyVOs");

            CompanyVO companyVO;
            Collection fiatCompanyGroupCompanyVOs = fiatCompanyGroupVO.getCompanyVOs();
            Iterator iterator=fiatCompanyGroupCompanyVOs.iterator();

            companyVO = (CompanyVO) iterator.next();
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next();
            testIsCompanyLancia(companyVO);

            Collection renaultCompanyGroupCompanyVOs = renaultCompanyGroupVO.getCompanyVOs();
            iterator=renaultCompanyGroupCompanyVOs.iterator();

            companyVO = (CompanyVO) iterator.next();
            testIsCompanyRenault(companyVO);

            companyVO = (CompanyVO) iterator.next();
            testIsCompanyDacia(companyVO);


            companyVO = (CompanyVO) iterator.next();
            testIsCompanySamsung(companyVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetrieveReferenceInCollection() :"+e.toString(),false);
        }
    }

    @Test public void testRetrieveAllReferences(){
        try{

            BD bd = getBD();
            CompanyGroupVO companyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new Integer(1));

            bd.retrieveAllReferences(companyGroupVO);
            Collection companyVOs =  companyGroupVO.getCompanyVOs();
            Iterator iterator=  companyVOs.iterator();

            CompanyVO companyVO = (CompanyVO) iterator.next();
            testIsCompanyFiat(companyVO);
            companyVO = (CompanyVO) iterator.next();
            testIsCompanyLancia(companyVO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetrieveAllReferences() :"+e.toString(),false);
        }
    }

    @Test public void testRetrieveAllReferencesInCollection(){
        try{

            BD bd = getBD();
            CompanyGroupVO  fiatCompanyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new Integer(1));
            CompanyGroupVO  renaultCompanyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new Integer(2));
            Vector companyGroupVOs = new Vector();
            companyGroupVOs.add(fiatCompanyGroupVO);
            companyGroupVOs.add(renaultCompanyGroupVO);
            bd.retrieveAllReferencesInCollection(companyGroupVOs);

            CompanyVO companyVO;
            Collection fiatCompanyGroupCompanyVOs = fiatCompanyGroupVO.getCompanyVOs();
            Iterator iterator=fiatCompanyGroupCompanyVOs.iterator();

            companyVO = (CompanyVO) iterator.next();
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next();
            testIsCompanyLancia(companyVO);

            Collection renaultCompanyGroupCompanyVOs = renaultCompanyGroupVO.getCompanyVOs();
            iterator=renaultCompanyGroupCompanyVOs.iterator();

            companyVO = (CompanyVO) iterator.next();
            testIsCompanyRenault(companyVO);

            companyVO = (CompanyVO) iterator.next();
            testIsCompanyDacia(companyVO);


            companyVO = (CompanyVO) iterator.next();
            testIsCompanySamsung(companyVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetrieveAllReferencesInCollection() :"+e.toString(),false);
        }
    }

    @Test public void testRetrieveNullReference(){
        try{

            BD bd = getBD();
            CompanyGroupVO companyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new  Integer(1));

            bd.retrieveNullReference(companyGroupVO,"companyVOs");
            Collection companyVOs =  companyGroupVO.getCompanyVOs();
            Iterator iterator=  companyVOs.iterator();

            CompanyVO companyVO = (CompanyVO) iterator.next();
            testIsCompanyFiat(companyVO);
            companyVO = (CompanyVO) iterator.next();
            testIsCompanyLancia(companyVO);

            companyGroupVO.setCompanyVOs(new Vector());
            bd.retrieveNullReference(companyGroupVO,"companyVOs");
            companyVOs =  companyGroupVO.getCompanyVOs();
            log.info("companyVOs.size = "+ companyVOs.size());
            assertEquals("companyVOs.size expected = 0", new Integer(0),new Integer(companyVOs.size()));
            /*
            iterator=  companyVOs.iterator();
            companyVO = (CompanyVO) iterator.next();
            testIsCompanyLancia(companyVO);
            */

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetrieveNullReference() :"+e.toString(),false);
        }
    }


    @Test public void testRetrieveAllNullReferences(){
        try{

            BD bd = getBD();
            CompanyGroupVO companyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class,new Integer(1));
            companyGroupVO.setCompanyVOs(null);
            bd.retrieveAllNullReferences(companyGroupVO);
            Collection companyVOs =  companyGroupVO.getCompanyVOs();
            log.info("companyVOs.size = "+ companyVOs.size());
            Iterator iterator=  companyVOs.iterator();
            log.info("A2");
            CompanyVO companyVO = (CompanyVO) iterator.next();
            log.info("A3");
            testIsCompanyFiat(companyVO);
            companyVO = (CompanyVO) iterator.next();
            testIsCompanyLancia(companyVO);

            companyGroupVO.setCompanyVOs(new Vector());
            bd.retrieveAllNullReferences(companyGroupVO);
            companyVOs =  companyGroupVO.getCompanyVOs();
            log.info("companyVOs.size = "+ companyVOs.size());
            assertEquals("companyVOs.size expected = 0", new Integer(0),new Integer(companyVOs.size()));
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetrieveAllNullReferences() :"+e.toString(),false);
        }
    }

    protected void verifyTestRetrievePathReference(ProjectVO projectVO){
    	try{

            Iterator iterator;
            Collection personProjectVOs = projectVO.getPersonProjectVOs();
            iterator =personProjectVOs.iterator();

            PersonProjectVO personProjectVO1 = (PersonProjectVO)   iterator.next();
            PersonProjectVO personProjectVO2 = (PersonProjectVO)   iterator.next();
            PersonProjectVO personProjectVO5 = (PersonProjectVO)   iterator.next();


            log.info("personProjectVO1.personVO.idPerson= "+personProjectVO1.getPersonVO().getIdPerson());
            log.info("personProjectVO1.personVO.firstName= "+personProjectVO1.getPersonVO().getFirstName());
            assertEquals("personProjectVO1.personVO.idPerson expected is 1",new Integer(1),personProjectVO1.getPersonVO().getIdPerson());
            assertEquals("personProjectVO1.personVO.firstName expected is John","John",personProjectVO1.getPersonVO().getFirstName());

            log.info("personProjectVO2.personVO.idPerson= "+personProjectVO2.getPersonVO().getIdPerson());
            log.info("personProjectVO2.personVO.firstName= "+personProjectVO2.getPersonVO().getFirstName());
            assertEquals("personProjectVO2.personVO.idPerson expected is 2",new Integer(2),personProjectVO2.getPersonVO().getIdPerson());
            assertEquals("personProjectVO2.personVO.firstName expected is Andrea","Andrea",personProjectVO2.getPersonVO().getFirstName());

            log.info("personProjectVO5.personVO.idPerson= "+personProjectVO5.getPersonVO().getIdPerson());
            log.info("personProjectVO5.personVO.firstName= "+personProjectVO5.getPersonVO().getFirstName());
            assertEquals("personProjectVO5.personVO.idPerson expected is 5",new Integer(5),personProjectVO5.getPersonVO().getIdPerson());
            assertEquals("personProjectVO5.personVO.firstName expected is Jesus","Jesus",personProjectVO5.getPersonVO().getFirstName());




            iterator = personProjectVO1.getPersonVO().getPersonRoleVOs().iterator();
            PersonRoleVO personRoleVO1_1 =(PersonRoleVO) iterator.next();
            PersonRoleVO personRoleVO1_3 =(PersonRoleVO) iterator.next();

            log.info("personRoleVO1_1.roleVO.idRole= "+personRoleVO1_1.getRoleVO().getIdRole());
            log.info("personRoleVO1_1.roleVO.roleName= "+personRoleVO1_1.getRoleVO().getRoleName());
            assertEquals("personRoleVO1_1.roleVO.idRole expected is 1",new Integer(1),personRoleVO1_1.getRoleVO().getIdRole());
            assertEquals("personRoleVO1_1.roleVO.roleName expected is junior programmer","junior programmer",personRoleVO1_1.getRoleVO().getRoleName());

            log.info("personRoleVO1_3.roleVO.idRole= "+personRoleVO1_3.getRoleVO().getIdRole());
            log.info("personRoleVO1_3.roleVO.roleName= "+personRoleVO1_3.getRoleVO().getRoleName());
            assertEquals("personRoleVO1_3.roleVO.idRole expected is 3",new Integer(3),personRoleVO1_3.getRoleVO().getIdRole());
            assertEquals("personRoleVO1_3.roleVO.roleName expected is analist programmer","analist programmer",personRoleVO1_3.getRoleVO().getRoleName());

            iterator = personProjectVO2.getPersonVO().getPersonRoleVOs().iterator();
            PersonRoleVO personRoleVO2_1 =(PersonRoleVO) iterator.next();
            PersonRoleVO personRoleVO2_2 =(PersonRoleVO) iterator.next();

            log.info("personRoleVO2_1.roleVO.idRole= "+personRoleVO2_1.getRoleVO().getIdRole());
            log.info("personRoleVO2_1.roleVO.roleName= "+personRoleVO2_1.getRoleVO().getRoleName());
            assertEquals("personRoleVO2_1.roleVO.idRole expected is 1",new Integer(1),personRoleVO2_1.getRoleVO().getIdRole());
            assertEquals("personRoleVO2_1.roleVO.roleName expected is junior programmer","junior programmer",personRoleVO2_1.getRoleVO().getRoleName());

            log.info("personRoleVO2_2.roleVO.idRole= "+personRoleVO2_2.getRoleVO().getIdRole());
            log.info("personRoleVO2_2.roleVO.roleName= "+personRoleVO2_2.getRoleVO().getRoleName());
            assertEquals("personRoleVO2_2.roleVO.idRole expected is 2",new Integer(2),personRoleVO2_2.getRoleVO().getIdRole());
            assertEquals("personRoleVO2_2.roleVO.roleName expected is senior programmer","senior programmer",personRoleVO2_2.getRoleVO().getRoleName());


            iterator = personProjectVO5.getPersonVO().getPersonRoleVOs().iterator();
            PersonRoleVO personRoleVO5_5 =(PersonRoleVO) iterator.next();
            PersonRoleVO personRoleVO5_6 =(PersonRoleVO) iterator.next();

            log.info("personRoleVO5_5.roleVO.idRole= "+personRoleVO5_5.getRoleVO().getIdRole());
            log.info("personRoleVO5_5.roleVO.roleName= "+personRoleVO5_5.getRoleVO().getRoleName());
            assertEquals("personRoleVO5_5.roleVO.idRole expected is 5",new Integer(5),personRoleVO5_5.getRoleVO().getIdRole());
            assertEquals("personRoleVO5_5.roleVO.roleName expected is architect","architect",personRoleVO5_5.getRoleVO().getRoleName());

            log.info("personRoleVO5_6.roleVO.idRole= "+personRoleVO5_6.getRoleVO().getIdRole());
            log.info("personRoleVO5_6.roleVO.roleName= "+personRoleVO5_6.getRoleVO().getRoleName());
            assertEquals("personRoleVO5_6.roleVO.idRole expected is 6",new Integer(6),personRoleVO5_6.getRoleVO().getIdRole());
            assertEquals("personRoleVO5_6.roleVO.roleName expected is project manager","project manager",personRoleVO5_6.getRoleVO().getRoleName());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".verifyTestRetrievePathReference() :"+e.toString(),false);
        }
    }
    
    
    @Test public void testRetrievePathReference(){
        try{

            BD bd = getBD();
            ProjectVO projectVO = (ProjectVO) bd.findByPrimaryKey(ProjectVO.class,new Integer(1));
            bd.retrievePathReference(projectVO,"personProjectVOs.personVO.personRoleVOs.roleVO");
            verifyTestRetrievePathReference(projectVO);
//            Iterator iterator;
//            Collection personProjectVOs = projectVO.getPersonProjectVOs();
//            iterator =personProjectVOs.iterator();
//
//            PersonProjectVO personProjectVO1 = (PersonProjectVO)   iterator.next();
//            PersonProjectVO personProjectVO2 = (PersonProjectVO)   iterator.next();
//            PersonProjectVO personProjectVO5 = (PersonProjectVO)   iterator.next();
//
//
//            log.info("personProjectVO1.personVO.idPerson= "+personProjectVO1.getPersonVO().getIdPerson());
//            log.info("personProjectVO1.personVO.firstName= "+personProjectVO1.getPersonVO().getFirstName());
//            assertEquals("personProjectVO1.personVO.idPerson expected is 1",new Integer(1),personProjectVO1.getPersonVO().getIdPerson());
//            assertEquals("personProjectVO1.personVO.firstName expected is John","John",personProjectVO1.getPersonVO().getFirstName());
//
//            log.info("personProjectVO2.personVO.idPerson= "+personProjectVO2.getPersonVO().getIdPerson());
//            log.info("personProjectVO2.personVO.firstName= "+personProjectVO2.getPersonVO().getFirstName());
//            assertEquals("personProjectVO2.personVO.idPerson expected is 2",new Integer(2),personProjectVO2.getPersonVO().getIdPerson());
//            assertEquals("personProjectVO2.personVO.firstName expected is Andrea","Andrea",personProjectVO2.getPersonVO().getFirstName());
//
//            log.info("personProjectVO5.personVO.idPerson= "+personProjectVO5.getPersonVO().getIdPerson());
//            log.info("personProjectVO5.personVO.firstName= "+personProjectVO5.getPersonVO().getFirstName());
//            assertEquals("personProjectVO5.personVO.idPerson expected is 5",new Integer(5),personProjectVO5.getPersonVO().getIdPerson());
//            assertEquals("personProjectVO5.personVO.firstName expected is Jesus","Jesus",personProjectVO5.getPersonVO().getFirstName());
//
//
//
//
//            iterator = personProjectVO1.getPersonVO().getPersonRoleVOs().iterator();
//            PersonRoleVO personRoleVO1_1 =(PersonRoleVO) iterator.next();
//            PersonRoleVO personRoleVO1_3 =(PersonRoleVO) iterator.next();
//
//            log.info("personRoleVO1_1.roleVO.idRole= "+personRoleVO1_1.getRoleVO().getIdRole());
//            log.info("personRoleVO1_1.roleVO.roleName= "+personRoleVO1_1.getRoleVO().getRoleName());
//            assertEquals("personRoleVO1_1.roleVO.idRole expected is 1",new Integer(1),personRoleVO1_1.getRoleVO().getIdRole());
//            assertEquals("personRoleVO1_1.roleVO.roleName expected is junior programmer","junior programmer",personRoleVO1_1.getRoleVO().getRoleName());
//
//            log.info("personRoleVO1_3.roleVO.idRole= "+personRoleVO1_3.getRoleVO().getIdRole());
//            log.info("personRoleVO1_3.roleVO.roleName= "+personRoleVO1_3.getRoleVO().getRoleName());
//            assertEquals("personRoleVO1_3.roleVO.idRole expected is 3",new Integer(3),personRoleVO1_3.getRoleVO().getIdRole());
//            assertEquals("personRoleVO1_3.roleVO.roleName expected is analist programmer","analist programmer",personRoleVO1_3.getRoleVO().getRoleName());
//
//            iterator = personProjectVO2.getPersonVO().getPersonRoleVOs().iterator();
//            PersonRoleVO personRoleVO2_1 =(PersonRoleVO) iterator.next();
//            PersonRoleVO personRoleVO2_2 =(PersonRoleVO) iterator.next();
//
//            log.info("personRoleVO2_1.roleVO.idRole= "+personRoleVO2_1.getRoleVO().getIdRole());
//            log.info("personRoleVO2_1.roleVO.roleName= "+personRoleVO2_1.getRoleVO().getRoleName());
//            assertEquals("personRoleVO2_1.roleVO.idRole expected is 1",new Integer(1),personRoleVO2_1.getRoleVO().getIdRole());
//            assertEquals("personRoleVO2_1.roleVO.roleName expected is junior programmer","junior programmer",personRoleVO2_1.getRoleVO().getRoleName());
//
//            log.info("personRoleVO2_2.roleVO.idRole= "+personRoleVO2_2.getRoleVO().getIdRole());
//            log.info("personRoleVO2_2.roleVO.roleName= "+personRoleVO2_2.getRoleVO().getRoleName());
//            assertEquals("personRoleVO2_2.roleVO.idRole expected is 2",new Integer(2),personRoleVO2_2.getRoleVO().getIdRole());
//            assertEquals("personRoleVO2_2.roleVO.roleName expected is senior programmer","senior programmer",personRoleVO2_2.getRoleVO().getRoleName());
//
//
//            iterator = personProjectVO5.getPersonVO().getPersonRoleVOs().iterator();
//            PersonRoleVO personRoleVO5_5 =(PersonRoleVO) iterator.next();
//            PersonRoleVO personRoleVO5_6 =(PersonRoleVO) iterator.next();
//
//            log.info("personRoleVO5_5.roleVO.idRole= "+personRoleVO5_5.getRoleVO().getIdRole());
//            log.info("personRoleVO5_5.roleVO.roleName= "+personRoleVO5_5.getRoleVO().getRoleName());
//            assertEquals("personRoleVO5_5.roleVO.idRole expected is 5",new Integer(5),personRoleVO5_5.getRoleVO().getIdRole());
//            assertEquals("personRoleVO5_5.roleVO.roleName expected is architect","architect",personRoleVO5_5.getRoleVO().getRoleName());
//
//            log.info("personRoleVO5_6.roleVO.idRole= "+personRoleVO5_6.getRoleVO().getIdRole());
//            log.info("personRoleVO5_6.roleVO.roleName= "+personRoleVO5_6.getRoleVO().getRoleName());
//            assertEquals("personRoleVO5_6.roleVO.idRole expected is 6",new Integer(6),personRoleVO5_6.getRoleVO().getIdRole());
//            assertEquals("personRoleVO5_6.roleVO.roleName expected is project manager","project manager",personRoleVO5_6.getRoleVO().getRoleName());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetrievePathReference() :"+e.toString(),false);
        }
    }

    protected void verifyTestRetrieveNullPathReference(ProjectVO projectVO){
        try{
//            BD bd = getBD();
//            ProjectVO projectVO = (ProjectVO) bd.findByPrimaryKey(ProjectVO.class,new Integer(1));
//            PersonProjectVO personProjectVO1 = (PersonProjectVO)bd.findByPrimaryKey(PersonProjectVO.class,new Object[]{new Integer(1),new Integer(1)});
//            bd.retrievePathReference(projectVO,"personProjectVOs");
//            projectVO.getPersonProjectVOs().clear();
//            projectVO.getPersonProjectVOs().add(personProjectVO1);
//
//            bd.retrieveNullPathReference(projectVO,"personProjectVOs.personVO.personRoleVOs.roleVO");
            Iterator iterator;
            Collection personProjectVOs = projectVO.getPersonProjectVOs();
            log.info("personProjectVOs.size = "+personProjectVOs.size());
            assertEquals("personProjectVOs.size  expected is 1",new Integer(1),new Integer(personProjectVOs.size()));
            iterator =personProjectVOs.iterator();

            PersonProjectVO personProjectVO1 = (PersonProjectVO)   iterator.next();


            log.info("personProjectVO1.personVO.idPerson= "+personProjectVO1.getPersonVO().getIdPerson());
            log.info("personProjectVO1.personVO.firstName= "+personProjectVO1.getPersonVO().getFirstName());
            assertEquals("personProjectVO1.personVO.idPerson expected is 1",new Integer(1),personProjectVO1.getPersonVO().getIdPerson());
            assertEquals("personProjectVO1.personVO.firstName expected is John","John",personProjectVO1.getPersonVO().getFirstName());


            iterator = personProjectVO1.getPersonVO().getPersonRoleVOs().iterator();
            PersonRoleVO personRoleVO1_1 =(PersonRoleVO) iterator.next();
            PersonRoleVO personRoleVO1_3 =(PersonRoleVO) iterator.next();

            log.info("personRoleVO1_1.roleVO.idRole= "+personRoleVO1_1.getRoleVO().getIdRole());
            log.info("personRoleVO1_1.roleVO.roleName= "+personRoleVO1_1.getRoleVO().getRoleName());
            assertEquals("personRoleVO1_1.roleVO.idRole expected is 1",new Integer(1),personRoleVO1_1.getRoleVO().getIdRole());
            assertEquals("personRoleVO1_1.roleVO.roleName expected is junior programmer","junior programmer",personRoleVO1_1.getRoleVO().getRoleName());

            log.info("personRoleVO1_3.roleVO.idRole= "+personRoleVO1_3.getRoleVO().getIdRole());
            log.info("personRoleVO1_3.roleVO.roleName= "+personRoleVO1_3.getRoleVO().getRoleName());
            assertEquals("personRoleVO1_3.roleVO.idRole expected is 3",new Integer(3),personRoleVO1_3.getRoleVO().getIdRole());
            assertEquals("personRoleVO1_3.roleVO.roleName expected is analist programmer","analist programmer",personRoleVO1_3.getRoleVO().getRoleName());


        }catch (Exception e){
        	//assert false;
            assertTrue("Exception in "+getThisClassName()+".verifyTestRetrieveNullPathReference() :"+e.toString(),false);
        }
    }
    
    @Test public void testRetrieveNullPathReference(){
        log.info("************Entering the "+getThisClassName()+".testRetrieveNullPathReference() ***************");
        try{
            BD bd = getBD();
            ProjectVO projectVO = (ProjectVO) bd.findByPrimaryKey(ProjectVO.class,new Integer(1));
            PersonProjectVO personProjectVO1 = (PersonProjectVO)bd.findByPrimaryKey(PersonProjectVO.class,new Object[]{new Integer(1),new Integer(1)});
            bd.retrievePathReference(projectVO,"personProjectVOs");
            projectVO.getPersonProjectVOs().clear();
            projectVO.getPersonProjectVOs().add(personProjectVO1);

            bd.retrieveNullPathReference(projectVO,"personProjectVOs.personVO.personRoleVOs.roleVO");
            verifyTestRetrieveNullPathReference( projectVO);
//            Iterator iterator;
//            Collection personProjectVOs = projectVO.getPersonProjectVOs();
//            log.info("personProjectVOs.size = "+personProjectVOs.size());
//            assertEquals("personProjectVOs.size  expected is 1",new Integer(1),new Integer(personProjectVOs.size()));
//            iterator =personProjectVOs.iterator();
//
//            personProjectVO1 = (PersonProjectVO)   iterator.next();
//
//
//            log.info("personProjectVO1.personVO.idPerson= "+personProjectVO1.getPersonVO().getIdPerson());
//            log.info("personProjectVO1.personVO.firstName= "+personProjectVO1.getPersonVO().getFirstName());
//            assertEquals("personProjectVO1.personVO.idPerson expected is 1",new Integer(1),personProjectVO1.getPersonVO().getIdPerson());
//            assertEquals("personProjectVO1.personVO.firstName expected is John","John",personProjectVO1.getPersonVO().getFirstName());
//
//
//            iterator = personProjectVO1.getPersonVO().getPersonRoleVOs().iterator();
//            PersonRoleVO personRoleVO1_1 =(PersonRoleVO) iterator.next();
//            PersonRoleVO personRoleVO1_3 =(PersonRoleVO) iterator.next();
//
//            log.info("personRoleVO1_1.roleVO.idRole= "+personRoleVO1_1.getRoleVO().getIdRole());
//            log.info("personRoleVO1_1.roleVO.roleName= "+personRoleVO1_1.getRoleVO().getRoleName());
//            assertEquals("personRoleVO1_1.roleVO.idRole expected is 1",new Integer(1),personRoleVO1_1.getRoleVO().getIdRole());
//            assertEquals("personRoleVO1_1.roleVO.roleName expected is junior programmer","junior programmer",personRoleVO1_1.getRoleVO().getRoleName());
//
//            log.info("personRoleVO1_3.roleVO.idRole= "+personRoleVO1_3.getRoleVO().getIdRole());
//            log.info("personRoleVO1_3.roleVO.roleName= "+personRoleVO1_3.getRoleVO().getRoleName());
//            assertEquals("personRoleVO1_3.roleVO.idRole expected is 3",new Integer(3),personRoleVO1_3.getRoleVO().getIdRole());
//            assertEquals("personRoleVO1_3.roleVO.roleName expected is analist programmer","analist programmer",personRoleVO1_3.getRoleVO().getRoleName());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetrieveNullPathReference() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetrieveNullPathReference() **************");
    }

    @Test public void testFindObjectByTemplate(){
        try{

            BD bd = getBD();
            CompanyVO companyVO = (CompanyVO) bd.findObjectByTemplate(new CompanyVO());

            testIsCompanyFiat(companyVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindObjectByTemplate() :"+e.toString(),false);
        }

    }

    @Test public void testFindCollectionByTemplate(){
        try{

            BD bd = getBD();
            Collection companyVOs = bd.findCollectionByTemplate(new CompanyVO());

            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyLancia(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyRenault(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyDacia(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanySamsung(companyVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByTemplate() :"+e.toString(),false);
        }

    }

    @Test public void testFindCollectionByTemplateWithTenplateVOOrderingFieldAndAsc(){
        try{

            BD bd = getBD();
            Collection companyVOs = bd.findCollectionByTemplate(new CompanyVO(), "name",false);

            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanySamsung(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyRenault(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyLancia(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyDacia(companyVO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByTemplateWithTenplateVOOrderingFieldAndAsc() :"+e.toString(),false);
        }

    }

    @Test public void testFindCollectionByNullFields(){
        log.info("************Entering the "+getThisClassName()+".testFindCollectionByNullFields() ***************");

        try{

            BD bd = getBD();
            Collection projectVOs = bd.findCollectionByNullFields(ProjectVO.class,new String[]{"title"});
            log.info("projectVOs.size "+projectVOs.size());
            assertEquals("projectVOs.size expetcetd is 1", new Integer(1), new Integer(projectVOs.size()));

            Iterator iterator = projectVOs.iterator();

            ProjectVO projectVO =(ProjectVO) iterator.next();
            log.info("projectVO.idProject "+projectVO.getIdProject().intValue());
            assertEquals("projectVO.idProject expetcetd is 3", new Integer(3), projectVO.getIdProject());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByNullFields() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testFindCollectionByNullFields() **************");
    }

    @Test public void testFindCollectionByLogicCondition(){
        try{

            BD bd = getBD();
            LogicCondition logicCondition = new LogicSqlCondition("companyVOs.name","==","DACIA");
            Collection companyGroupVOs = bd.findCollectionByLogicCondition(CompanyGroupVO.class,logicCondition);

            log.info("companyGroupVOs.size "+companyGroupVOs.size());
            assertEquals("companyGroupVOs.size expetcetd is 1", new Integer(1), new Integer(companyGroupVOs.size()));

            testIsCompanyGroupRenault((CompanyGroupVO) companyGroupVOs.iterator().next());
       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByLogicCondition() :"+e.toString(),false);
        }
    }

    @Test public void testFindCollectionByLogicConditionWithOrderingFieldAndAsc(){
        try{

            BD bd = getBD();
            LogicCondition logicCondition = new LogicSqlCondition("name","LIKE","IA");
            Collection companyVOs = bd.findCollectionByLogicCondition(CompanyVO.class,logicCondition,"name",false,null,null);

            log.info("companyVOs.size "+companyVOs.size());
            assertEquals("companyVOs.size expetcetd is 3", new Integer(3), new Integer(companyVOs.size()));

            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyLancia(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyDacia(companyVO);
       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByLogicConditionWithOrderingFieldAndAsc() :"+e.toString(),false);
        }
    }

    @Test public void testFindCollectionByLogicConditionWithOrderingFieldAscAndStartAtIndex(){
        try{

            BD bd = getBD();
            LogicCondition logicCondition = new LogicSqlCondition("name","LIKE","IA");
            Collection companyVOs = bd.findCollectionByLogicCondition(CompanyVO.class,logicCondition,"name",false,new Integer(2),null);

            log.info("companyVOs.size "+companyVOs.size());
            assertEquals("companyVOs.size expetcetd is 2", new Integer(2), new Integer(companyVOs.size()));

            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;
            /*
            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyLancia(companyVO);
            */
            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyDacia(companyVO);
       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByLogicConditionWithOrderingFieldAscAndStartAtIndex() :"+e.toString(),false);
        }
    }

    @Test public void testFindCollectionByLogicConditionWithOrderingFieldAscAndEndAtIndex(){
        try{

            BD bd = getBD();
            LogicCondition logicCondition = new LogicSqlCondition("name","LIKE","IA");
            Collection companyVOs = bd.findCollectionByLogicCondition(CompanyVO.class,logicCondition,"name",false,null,new Integer(2));

            log.info("companyVOs.size "+companyVOs.size());
            assertEquals("companyVOs.size expetcetd is 2", new Integer(2), new Integer(companyVOs.size()));

            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyLancia(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);
            /*
            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyDacia(companyVO);
            */
       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByLogicConditionWithOrderingFieldAscAndEndAtIndex() :"+e.toString(),false);
        }
    }

    @Test public void testFindCollectionByLogicConditionWithOrderingFieldAscStartAtIndexAndEndAtIndex(){
        try{

            BD bd = getBD();
            LogicCondition logicCondition = new LogicSqlCondition("name","LIKE","IA");
            Collection companyVOs = bd.findCollectionByLogicCondition(CompanyVO.class,logicCondition,"name",false,new Integer(2),new Integer(2));

            log.info("companyVOs.size "+companyVOs.size());
            assertEquals("companyVOs.size expetcetd is 1", new Integer(1), new Integer(companyVOs.size()));

            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;
            /*
            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyLancia(companyVO);
            */
            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);
            /*
            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyDacia(companyVO);
            */
       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByLogicConditionWithOrderingFieldAscStartAtIndexAndEndAtIndex() :"+e.toString(),false);
        }
    }

    @Test public void testFindCollectionByOrValues(){
        try{

            BD bd = getBD();
            Vector orCollection = new Vector();
            orCollection.add("FIAT");
            orCollection.add("RENAULT");
            orCollection.add("SAMSUNG");
            Collection companyVOs = bd.findCollectionByOrValues(CompanyVO.class,"name",orCollection);

            log.info("companyVOs.size "+companyVOs.size());
            assertEquals("companyVOs.size expetcetd is 3", new Integer(3), new Integer(companyVOs.size()));

            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyRenault(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanySamsung(companyVO);

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByOrValues() :"+e.toString(),false);
       }
    }

    @Test public void testFindCollectionByFieldsNotEqualsToValues(){
        try{

            BD bd = getBD();

            Collection companyVOs = bd.findCollectionByFieldsNotEqualsToValues(CompanyVO.class,new String[]{"idCompany","name"},new Object[]{new Integer(1),"FIAT"});

            
            verifyTestFindCollectionByFieldsNotEqualsToValues(companyVOs);

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByFieldsNotEqualsToValues() :"+e.toString(),false);
       }
    }

    
    protected void verifyTestFindCollectionByFieldsNotEqualsToValues(Collection companyVOs){
    	try {
    		Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyLancia(companyVO);



            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyDacia(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanySamsung(companyVO);
		} catch (Exception e) {
			assertTrue("Exception in "+getThisClassName()+".verifyTestFindCollectionByFieldsNotEqualsToValues(Collection companyVOs) :"+e.toString(),false);
			
		}
    }	

    @Test public void testFindCollectionByAndFieldsOperatorValues(){
        try{

            BD bd = getBD();

            Collection companyVOs = bd.findCollectionByAndFieldsOperatorValues(CompanyVO.class,new String[]{"idCompanyGroup","idCompany"},new String[]{"==",">="}, new Object[]{new Integer(2),new Integer(2)});

            //log.info("companyVOs.size "+companyVOs.size());
            //assertEquals("companyVOs.size expetcetd is 3", new Integer(3), new Integer(companyVOs.size()));
            verifyTestFindCollectionByAndFieldsOperatorValues(companyVOs);
//            Iterator iterator = companyVOs.iterator();
//            CompanyVO companyVO;
//
//            companyVO = (CompanyVO) iterator.next()  ;
//            testIsCompanyDacia(companyVO);
//
//            companyVO = (CompanyVO) iterator.next()  ;
//            testIsCompanySamsung(companyVO);

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByAndFieldsOperatorValues() :"+e.toString(),false);
       }
    }
    
    protected void verifyTestFindCollectionByAndFieldsOperatorValues(Collection companyVOs){
    	try {
			Iterator iterator = companyVOs.iterator();
			CompanyVO companyVO;

			companyVO = (CompanyVO) iterator.next()  ;
			testIsCompanyDacia(companyVO);

			companyVO = (CompanyVO) iterator.next()  ;
			testIsCompanySamsung(companyVO);
		} catch (Exception e) {
			assertTrue("Exception in "+getThisClassName()+".verifyTestFindCollectionByAndFieldsOperatorValues(Collection companyVOs) :"+e.toString(),false);
            
		}
    	
    }

    protected String[] getTestFindCollectionByArrayOfFieldsOperatorsMatrixAndOrValuesPAttributeNames(){
    	return new String[]{"idCompanyGroup","idCompany","name"};
    }
    
    @Test public void testFindCollectionByArrayOfFieldsOperatorsMatrixAndOrValues(){
        try{

            BD bd = getBD();
            Object[][] valuesMatrix = new Object[2][3];
            valuesMatrix[0][0] = new Integer(1);
            valuesMatrix[0][1] = new Integer(1);
            valuesMatrix[0][2] = "FIAT";

            valuesMatrix[1][0] = new Integer(2);
            valuesMatrix[1][1] = new Integer(2);
            valuesMatrix[1][2] = "DACIA";

            String[] operators = new String[]{"==",">=","=="};
            //String[] pAttributeNames = new String[]{"idCompanyGroup","idCompany","name"};
            String[] pAttributeNames = getTestFindCollectionByArrayOfFieldsOperatorsMatrixAndOrValuesPAttributeNames();

            Collection companyVOs = bd.findCollectionByArrayOfFieldsOperatorsMatrixAndOrValues(CompanyVO.class,pAttributeNames,operators,valuesMatrix);


            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyDacia(companyVO);

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByArrayOfFieldsOperatorsMatrixAndOrValues() :"+e.toString(),false);
       }
    }


    @Test public void testSearchValueInFields(){
        try{

            BD bd = getBD();

            Collection companyVOs = bd.searchValueInFields(CompanyVO.class,new String[]{"description"},"car");


            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyLancia(companyVO);

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testSearchValueInFields() :"+e.toString(),false);
       }
    }

    @Test public void testFindCollectionByFieldInCollection(){
        try{

            BD bd = getBD();
            Vector orCollection = new Vector();
            orCollection.add("FIAT");
            orCollection.add("RENAULT");
            orCollection.add("SAMSUNG");
            Collection companyVOs = bd.findCollectionByFieldInCollection(CompanyVO.class,"name",orCollection);

            log.info("companyVOs.size "+companyVOs.size());
            assertEquals("companyVOs.size expetcetd is 3", new Integer(3), new Integer(companyVOs.size()));

            Iterator iterator = companyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyFiat(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyRenault(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanySamsung(companyVO);

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testFindCollectionByFieldInCollection() :"+e.toString(),false);
       }
    }

    @Test public void testGetCollectionOfStoredItemsNotInBean(){
        try{

            BD bd = getBD();
            CompanyGroupVO companyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class, new Integer(2));
            bd.retrieveReference(companyGroupVO,"companyVOs");
            Iterator companyVOsIterator =  companyGroupVO.getCompanyVOs().iterator();
            companyVOsIterator.next();
            companyVOsIterator.remove();

            Collection storedItemsNotInBeanCompanyVOs = bd.getCollectionOfStoredItemsNotInBean(companyGroupVO,"companyVOs");

            log.info("storedItemsNotInBeanCompanyVOs.size "+storedItemsNotInBeanCompanyVOs.size());
            assertEquals("storedItemsNotInBeanCompanyVOs.size expetcetd is 1", new Integer(1), new Integer(storedItemsNotInBeanCompanyVOs.size()));

            Iterator iterator = storedItemsNotInBeanCompanyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyRenault(companyVO);

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testGetCollectionOfStoredItemsNotInBean() :"+e.toString(),false);
       }
    }


    @Test public void testGetStoredCollection(){
        try{

            BD bd = getBD();
            CompanyGroupVO companyGroupVO = (CompanyGroupVO) bd.findByPrimaryKey(CompanyGroupVO.class, new Integer(2));

            Collection storedCollectionCompanyVOs = bd.getStoredCollection(companyGroupVO,"companyVOs");


            Iterator iterator = storedCollectionCompanyVOs.iterator();
            CompanyVO companyVO;

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyRenault(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanyDacia(companyVO);

            companyVO = (CompanyVO) iterator.next()  ;
            testIsCompanySamsung(companyVO);

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testGetStoredCollection() :"+e.toString(),false);
       }
    }

    protected void verifyTestGetReportQueryIterator(Iterator iterator){
    	try{

    		Object[] row1 = (Object[])iterator.next();
            Object[] row2 = (Object[])iterator.next();

            log.info("row1[0] = "+row1[0]);
            assertEquals("row1[0] expected is 1",new Integer(1),row1[0]);
            log.info("row1[1] = "+row1[1]);
            assertEquals("row1[1] expected is FIATGROUP","FIATGROUP",row1[1]);
            log.info("row1[2] = "+row1[2]);

            log.info("row1[3] = "+row1[3]);
            assertEquals("row1[3] expected is 1",new Integer(1),row1[3]);
            log.info("row1[4] = "+row1[4]);
            assertEquals("row1[4] expected is FIAT","FIAT",row1[4]);
            log.info("row1[5] = "+row1[5]);



            log.info("row2[0] = "+row2[0]);
            assertEquals("row2[0] expected is 2",new Integer(2),row2[0]);
            log.info("row2[1] = "+row2[1]);
            assertEquals("row2[1] expected is RENAULTGROUP","RENAULTGROUP",row2[1]);
            log.info("row2[2] = "+row2[2]);

            log.info("row2[3] = "+row2[3]);
            assertEquals("row2[3] expected is 1",new Integer(1),row2[3]);
            log.info("row2[4] = "+row2[4]);
            assertEquals("row2[4] expected is RENAULT","RENAULT",row2[4]);
            log.info("row2[5] = "+row2[5]);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".verifyTestGetReportQueryIterator() :"+e.toString(),false);
        }
    }
    @Test public void testGetReportQueryIterator(){
        try{

            BD bd = getBD();

            String[] pAttributeNames = new String[]{"idCompanyGroup","name","description","companyVOs.idCompany","companyVOs.name","companyVOs.description"};
            LogicCondition logicCondition = new LogicSqlCondition("companyVOs.idCompany","==", new Integer(1));

            Iterator iterator = bd.getReportQueryIterator(CompanyGroupVO.class,logicCondition,pAttributeNames,null);
            verifyTestGetReportQueryIterator(iterator);
//            Object[] row1 = (Object[])iterator.next();
//            Object[] row2 = (Object[])iterator.next();
//
//            log.info("row1[0] = "+row1[0]);
//            assertEquals("row1[0] expected is 1",new Integer(1),row1[0]);
//            log.info("row1[1] = "+row1[1]);
//            assertEquals("row1[1] expected is FIATGROUP","FIATGROUP",row1[1]);
//            log.info("row1[2] = "+row1[2]);
//
//            log.info("row1[3] = "+row1[3]);
//            assertEquals("row1[3] expected is 1",new Integer(1),row1[3]);
//            log.info("row1[4] = "+row1[4]);
//            assertEquals("row1[4] expected is FIAT","FIAT",row1[4]);
//            log.info("row1[5] = "+row1[5]);
//
//
//
//            log.info("row2[0] = "+row2[0]);
//            assertEquals("row2[0] expected is 2",new Integer(2),row2[0]);
//            log.info("row2[1] = "+row2[1]);
//            assertEquals("row2[1] expected is RENAULTGROUP","RENAULTGROUP",row2[1]);
//            log.info("row2[2] = "+row2[2]);
//
//            log.info("row2[3] = "+row2[3]);
//            assertEquals("row2[3] expected is 1",new Integer(1),row2[3]);
//            log.info("row2[4] = "+row2[4]);
//            assertEquals("row2[4] expected is RENAULT","RENAULT",row2[4]);
//            log.info("row2[5] = "+row2[5]);

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testGetReportQueryIterator() :"+e.toString(),false);
       }
    }

    
    protected void verifyTestGetReportQueryIteratorWithGroupBy(Iterator iterator){
    	try{

    		Object[] row1 = (Object[])iterator.next();
            Object[] row2 = (Object[])iterator.next();

            log.info("row1[0] = "+row1[0]);
            assertEquals("row1[0] expected is 1",new Integer(1),row1[0]);
            log.info("row1[1] = "+row1[1]);
            assertEquals("row1[1] expected is 2",new Integer(2),row1[1]);

            log.info("row2[0] = "+row2[0]);
            assertEquals("row2[0] expected is 2",new Integer(2),row2[0]);
            log.info("row2[1] = "+row2[1]);
            assertEquals("row2[1] expected is 3",new Integer(3),row2[1]);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".verifyTestGetReportQueryIteratorWithGroupBy() :"+e.toString(),false);
        }
    }
    
    @Test public void testGetReportQueryIteratorWithGroupBy(){
        try{

            BD bd = getBD();

            String[] pAttributeNames = new String[]{"idCompanyGroup","count(*)"};
            LogicCondition logicCondition = new LogicSqlCondition("companyVOs.idCompany",">=", new Integer(1));
            String[] groupBy = new String[]{"idCompanyGroup"};

            Iterator iterator = bd.getReportQueryIterator(CompanyGroupVO.class,logicCondition,pAttributeNames,groupBy);

            verifyTestGetReportQueryIteratorWithGroupBy( iterator);
            
//            Object[] row1 = (Object[])iterator.next();
//            Object[] row2 = (Object[])iterator.next();
//
//            log.info("row1[0] = "+row1[0]);
//            assertEquals("row1[0] expected is 1",new Integer(1),row1[0]);
//            log.info("row1[1] = "+row1[1]);
//            assertEquals("row1[1] expected is 2",new Integer(2),row1[1]);
//
//            log.info("row2[0] = "+row2[0]);
//            assertEquals("row2[0] expected is 2",new Integer(2),row2[0]);
//            log.info("row2[1] = "+row2[1]);
//            assertEquals("row2[1] expected is 3",new Integer(3),row2[1]);




       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testGetReportQueryIteratorWithGroupBy() :"+e.toString(),false);
       }
    }

    @Test public void testInsert(){
        try{

            BD bd = getBD();

            PersonVO toInsertPersonVO = new PersonVO();
            toInsertPersonVO.setIdPerson(new Integer(1000));
            toInsertPersonVO.setFirstName("Gino");
            toInsertPersonVO.setLastName("Ginetti");

            bd.delete(toInsertPersonVO); // added by Alessandro on 15-dec-2008
            bd.insert(toInsertPersonVO);

            PersonVO insertedPersonVO =(PersonVO) bd.findByPrimaryKey(PersonVO.class,new Integer(1000));



            log.info("insertedPersonVO.idPerson = "+insertedPersonVO.getIdPerson());
            assertEquals("insertedPersonVO.idPerson expected is 1000",new Integer(1000),insertedPersonVO.getIdPerson());

            log.info("insertedPersonVO.firstName = "+insertedPersonVO.getFirstName());
            assertEquals("insertedPersonVO.idPerson expected is Gino","Gino",insertedPersonVO.getFirstName());

            log.info("insertedPersonVO.lastName = "+insertedPersonVO.getLastName());
            assertEquals("insertedPersonVO.lastName expected is Ginetti","Ginetti",insertedPersonVO.getLastName());

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testInsert() :"+e.toString(),false);
       }
    }

    @Test public void testUpdate(){
        log.info("************Entering the "+getThisClassName()+".testUpdate() ***************");
        try{

            BD bd = getBD();

            PersonVO toInsertPersonVO = new PersonVO();
            toInsertPersonVO.setIdPerson(new Integer(1001));
            toInsertPersonVO.setFirstName("Gino");
            toInsertPersonVO.setLastName("Ginetti");

            bd.delete(toInsertPersonVO); // added by Alessandro on 15-dec-2008
            bd.insert(toInsertPersonVO);
            toInsertPersonVO.setLastName("Ginucci");
            bd.update(toInsertPersonVO);
            PersonVO insertedPersonVO =(PersonVO) bd.findByPrimaryKey(PersonVO.class,new Integer(1001));



            log.info("insertedPersonVO.idPerson = "+insertedPersonVO.getIdPerson());
            assertEquals("insertedPersonVO.idPerson expected is 1001",new Integer(1001),insertedPersonVO.getIdPerson());

            log.info("insertedPersonVO.firstName = "+insertedPersonVO.getFirstName());
            assertEquals("insertedPersonVO.firstName expected is Gino","Gino",insertedPersonVO.getFirstName());

            log.info("insertedPersonVO.lastName = "+insertedPersonVO.getLastName());
            assertEquals("insertedPersonVO.lastName expected is Ginucci","Ginucci",insertedPersonVO.getLastName());

       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testUpdate() :"+e.toString(),false);
       }
       log.info("************Done with the  "+getThisClassName()+".testUpdate() **************");
    }

    @Test public void testUpdateCollection(){
        log.info("entering "+getThisClassName()+".testUpdateCollection()");
        try{

            BD bd = getBD();

            PersonVO pizzulPersonVO = new PersonVO();
            pizzulPersonVO.setIdPerson(new Integer(1002));
            pizzulPersonVO.setFirstName("Bruno");
            pizzulPersonVO.setLastName("Pizl");

            bd.delete(pizzulPersonVO); // added by Alessandro on 15-dec-2008
            bd.insert(pizzulPersonVO);

            pizzulPersonVO.setLastName("Pizzul");

            PersonVO martelliniPersonVO = new PersonVO();
            martelliniPersonVO.setIdPerson(new Integer(1003));
            martelliniPersonVO.setFirstName("Nando");
            martelliniPersonVO.setLastName("Martellini");

            ArrayList updateCollection = new ArrayList();
            updateCollection.add(pizzulPersonVO);
            updateCollection.add(martelliniPersonVO);
            bd.updateCollection(updateCollection);

            PersonVO personVO1002 =(PersonVO) bd.findByPrimaryKey(PersonVO.class,new Integer(1002));
            PersonVO personVO1003 =(PersonVO) bd.findByPrimaryKey(PersonVO.class,new Integer(1003));



            log.info("personVO1002.idPerson = "+personVO1002.getIdPerson());
            assertEquals("personVO1002.idPerson expected is 1002",new Integer(1002),personVO1002.getIdPerson());

            log.info("personVO1002.firstName = "+personVO1002.getFirstName());
            assertEquals("personVO1002..firstName expected is Bruno","Bruno",personVO1002.getFirstName());

            log.info("personVO1002.lastName = "+personVO1002.getLastName());
            assertEquals("personVO1002.lastName expected is Pizzul","Pizzul",personVO1002.getLastName());


            log.info("personVO1003.idPerson = "+personVO1003.getIdPerson());
            assertEquals("personVO1003.idPerson expected is 1003",new Integer(1003),personVO1003.getIdPerson());

            log.info("personVO1003.firstName = "+personVO1003.getFirstName());
            assertEquals("personVO1003.firstName expected is Nando","Nando",personVO1003.getFirstName());

            log.info("personVO1003.lastName = "+personVO1003.getLastName());
            assertEquals("personVO1003.lastName expected is Martellini","Martellini",personVO1003.getLastName());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testUpdateCollection () :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testUpdateCollection()");

    }

    @Test public void testDelete(){
        log.info("entering "+getThisClassName()+".testDelete()");
        try{

            BD bd = getBD();

            PersonVO giordanoPersonVO = new PersonVO();
            giordanoPersonVO.setIdPerson(new Integer(1004));
            giordanoPersonVO.setFirstName("Bruno");
            giordanoPersonVO.setLastName("Giordano");
            bd.insert(giordanoPersonVO);



            PersonVO personVO1004 =(PersonVO) bd.findByPrimaryKey(PersonVO.class,new Integer(1004));



            log.info("personVO1004.idPerson = "+personVO1004.getIdPerson());
            assertEquals("personVO1004.idPerson expected is 1004",new Integer(1004),personVO1004.getIdPerson());

            log.info("personVO1004.firstName = "+personVO1004.getFirstName());
            assertEquals("personVO1004.firstName expected is Bruno","Bruno",personVO1004.getFirstName());

            log.info("personVO1004.lastName = "+personVO1004.getLastName());
            assertEquals("personVO1004.lastName expected is Giordano","Giordano",personVO1004.getLastName());

            bd.delete(giordanoPersonVO);
            personVO1004 =(PersonVO) bd.findByPrimaryKey(PersonVO.class,new Integer(1004));
            assertTrue("personVO1004 has not been deleted ",personVO1004==null);

            PersonVO personVO6 =(PersonVO) bd.findByPrimaryKey(PersonVO.class,new Integer(6));
            bd.delete(personVO6);
            PersonVO deletedPersonVO6 =(PersonVO) bd.findByPrimaryKey(PersonVO.class,new Integer(6));
            assertTrue("deletedPersonVO1 has not been deleted ",deletedPersonVO6==null);
            bd.insert(personVO6);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDelete() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDelete()");
    }

    @Test public void testDeleteCollection(){
        log.info("entering "+getThisClassName()+".testDeleteCollection()");
        try{

            BD bd = getBD();

            UserVO paoloUserVO = new UserVO();
            paoloUserVO.setIdUser("paolo");

            UserVO marcoUserVO = new UserVO();
            marcoUserVO.setIdUser("marco");

            UserVO aldoUserVO = new UserVO();
            aldoUserVO.setIdUser("aldo");

            Collection<UserVO> userVOs = new ArrayList<UserVO>();

            userVOs.add(paoloUserVO);
            userVOs.add(marcoUserVO);
            userVOs.add(aldoUserVO);

            bd.updateCollection(userVOs);

            UserVO  testpaoloUserVO = (UserVO) bd.findByPrimaryKey(UserVO.class,"paolo");
            log.info("testpaoloUserVO.getIdUser() = "+testpaoloUserVO.getIdUser());
            assertEquals("estpaoloUserVO.getIdUser() expected is paolo","paolo",testpaoloUserVO.getIdUser());

            UserVO  testmarcoUserVO = (UserVO) bd.findByPrimaryKey(UserVO.class,"marco");
            log.info("testmarcoUserVO.getIdUser() = "+testmarcoUserVO.getIdUser());
            assertEquals("testmarcoUserVO.getIdUser() expected is marco","marco",testmarcoUserVO.getIdUser());

            UserVO  testaldoUserVO = (UserVO) bd.findByPrimaryKey(UserVO.class,"aldo");
            log.info("testaldoUserVO.getIdUser() = "+testaldoUserVO.getIdUser());
            assertEquals("testaldoUserVO.getIdUser() expected is aldo","aldo",testaldoUserVO.getIdUser());

            Collection<UserVO> toDeletedUserVOs = new ArrayList<UserVO>();
            toDeletedUserVOs.add(paoloUserVO);
            toDeletedUserVOs.add(marcoUserVO);
            toDeletedUserVOs.add(testaldoUserVO);

            bd.deleteCollection(toDeletedUserVOs);

            UserVO  deletedpaoloUserVO = (UserVO) bd.findByPrimaryKey(UserVO.class,"paolo");
            assertNull("deletedpaoloUserVO is expected to be null",deletedpaoloUserVO);

            UserVO  deletedmarcoUserVO = (UserVO) bd.findByPrimaryKey(UserVO.class,"marco");
            assertNull("deletedmarcoUserVO is expected to be null",deletedmarcoUserVO);

            UserVO  deletedaldoUserVO = (UserVO) bd.findByPrimaryKey(UserVO.class,"aldo");
            assertNull("deletedaldoUserVO is expected to be null",deletedaldoUserVO);



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDeleteCollection() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDeleteCollection()");
    }



    @Test public void testDeleteMToNRelationshipCollection(){
        log.info("entering "+getThisClassName()+".testDeleteMToNRelationshipCollection()");
        try{

            BD bd = getBD();

            MainVO mainVO = new MainVO();
            mainVO.setIdMain("testDeleteMToNR");

            Reference4VO  testDeleteMToNR1Reference4VO= new  Reference4VO();
            testDeleteMToNR1Reference4VO.setIdReference4("testDeleteMToNR1");

            Reference4VO  testDeleteMToNR2Reference4VO= new  Reference4VO();
            testDeleteMToNR2Reference4VO.setIdReference4("testDeleteMToNR2");

            Collection<Reference4VO>  reference4VOs = new ArrayList<Reference4VO>();
            reference4VOs.add(testDeleteMToNR1Reference4VO);
            reference4VOs.add(testDeleteMToNR2Reference4VO);

            mainVO.setReference4VOs(reference4VOs);

            bd.storePathCascade(mainVO,"reference4VOs");

            MainVO testMainvO = (MainVO) bd.findByPrimaryKey(MainVO.class, "testDeleteMToNR");
            bd.retrieveReference(testMainvO,"reference4VOs");

            Collection<Reference4VO>  testreference4VOs = testMainvO.getReference4VOs();
            log.info("testreference4VOs.size() = "+testreference4VOs.size());
            assertEquals("testreference4VOs.size() = is expected to be 2",2,testreference4VOs.size());

            bd.deleteMToNRelationshipCollection(mainVO,"reference4VOs",reference4VOs);
            bd.retrieveReference(testMainvO,"reference4VOs");
            Collection<Reference4VO>  deletedreference4VOs = testMainvO.getReference4VOs();

            if(deletedreference4VOs!=null){
                log.info("deletedreference4VOs.size() = "+deletedreference4VOs.size());
                assertEquals("deletedreference4VOs.size() = is expected to be 0",0,deletedreference4VOs.size());
            }

            testDeleteMToNR1Reference4VO = (Reference4VO) bd.findByPrimaryKey(Reference4VO.class, "testDeleteMToNR1");
            assertNotNull("testDeleteMToNR1Reference4VO is expected to be not null",testDeleteMToNR1Reference4VO);


            testDeleteMToNR2Reference4VO = (Reference4VO) bd.findByPrimaryKey(Reference4VO.class, "testDeleteMToNR2");
            assertNotNull("testDeleteMToNR2Reference4VO is expected to be not null",testDeleteMToNR2Reference4VO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDeleteMToNRelationshipCollection() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDeleteMToNRelationshipCollection()");
    }


    protected void storeAndCheckrstPath2Withpath3VOspath4VOspath5VO(){
        log.info("entering "+getThisClassName()+".storeAndCheckrstPath2Withpath3VOspath4VOspath5VO()");
        try{

            BD bd = getBD();

            Path1VO rstPath1VO = new Path1VO();
            rstPath1VO.setIdPath1("rstPath1");


            Path2VO rstPath2VO = new Path2VO();
            rstPath2VO.setIdPath2("rstPath2");
            Collection<Path2VO> path2VOs = new ArrayList<Path2VO>(); 
            path2VOs.add(rstPath2VO);
            rstPath1VO.setPath2VOs(path2VOs);

            Path3VO rstPath3VO = new Path3VO();
            rstPath3VO.setIdPath3("rstPath3");
            Collection<Path3VO> path3VOs = new ArrayList<Path3VO>();
            path3VOs.add(rstPath3VO);
            rstPath2VO.setPath3VOs(path3VOs);

            Path4VO rstPath4VO = new Path4VO();
            rstPath4VO.setIdPath4("rstPath4");
            Collection<Path4VO> path4VOs = new ArrayList<Path4VO>();
            path4VOs.add(rstPath4VO);
            rstPath3VO.setPath4VOs(path4VOs);

            Path5VO rstPath5VO = new Path5VO();
            rstPath5VO.setIdPath5("rstPath5");
            rstPath4VO.setPath5VO(rstPath5VO);

            bd.storePathCascade(rstPath1VO,"path2VOs.path3VOs.path4VOs.path5VO");

            Path2VO testrstPath2VO = (Path2VO)bd.findByPrimaryKey(Path2VO.class, "rstPath2");
            assertNotNull("testrstPath2VO is expected to be not null",testrstPath2VO);

            bd.retrievePathReference(rstPath2VO,"path3VOs.path4VOs.path5VO");

            Collection<Path3VO> testpath3VOs = testrstPath2VO.getPath3VOs();
            log.info("testpath3VOs.size() = "+testpath3VOs.size());
            assertEquals("testpath3VOs.size() = is expected to be 1",1,testpath3VOs.size());

            Path3VO testrstPath3VO = testpath3VOs.iterator().next();
            log.info("testrstPath3VO.getIdPath3() = "+testrstPath3VO.getIdPath3());
            assertEquals("testrstPath3VO.getIdPath3() = is expected to be rstPath3","rstPath3",testrstPath3VO.getIdPath3());

            Collection<Path4VO> testpath4VOs = testrstPath3VO.getPath4VOs();
            log.info("testpath4VOs.size() = "+testpath4VOs.size());
            assertEquals("testpath4VOs.size() = is expected to be 1",1,testpath4VOs.size());

            Path4VO testrstPath4VO = testpath4VOs.iterator().next();
            log.info("testrstPath4VO.getIdPath4() = "+testrstPath4VO.getIdPath4());
            assertEquals("testrstPath4VO.getIdPath4() = is expected to be rstPath4","rstPath4",testrstPath4VO.getIdPath4());

            Path5VO testrstPath5VO = testrstPath4VO.getPath5VO();
            assertNotNull("testrstPath5VO is expected to be not null",testrstPath5VO);
            log.info("testrstPath5VO.getIdPath5() = "+testrstPath5VO.getIdPath5());
            assertEquals("testrstPath5VO.getIdPath5() = is expected to be rstPath5","rstPath5",testrstPath5VO.getIdPath5());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".storeAndCheckrstPath2Withpath3VOspath4VOspath5VO() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".storeAndCheckrstPath2Withpath3VOspath4VOspath5VO()");

    }




    @Test public void testDeleteItemsNotInCollectionsInPath(){
        log.info("entering "+getThisClassName()+".testDeleteItemsNotInCollectionsInPath()");
        try{
            BD bd = getBD();
            storeAndCheckrstPath2Withpath3VOspath4VOspath5VO();



            Path2VO testrstPath2VO = new Path2VO();
            testrstPath2VO.setIdPath2("rstPath2");

            testrstPath2VO.setPath3VOs(null);
            
            bd.deleteItemsNotInCollectionsInPath(testrstPath2VO,"path3VOs.path4VOs.path5VO",Boolean.TRUE,Boolean.FALSE,Boolean.TRUE);

            Path3VO testrstPath3VO = (Path3VO)bd.findByPrimaryKey(Path3VO.class, "rstPath3");
            assertNull("testrstPath3VO is expected to be null",testrstPath3VO);

            Path4VO testrstPath4VO = (Path4VO)bd.findByPrimaryKey(Path4VO.class, "rstPath4");
            assertNull("testrstPath4VO is expected to be null",testrstPath4VO);

            Path5VO testrstPath5VO = (Path5VO)bd.findByPrimaryKey(Path5VO.class, "rstPath5");
            assertNull("testrstPath5VO is expected to be null",testrstPath5VO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDeleteItemsNotInCollectionsInPath() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDeleteItemsNotInCollectionsInPath()");
    }


    @Test public void testDeleteItemsNotInCollectionsInPathApplyDeletePathCascadeFalse(){
        log.info("entering "+getThisClassName()+".testDeleteItemsNotInCollectionsInPathApplyDeletePathCascadeFalse()");
        try{

            BD bd = getBD();
            storeAndCheckrstPath2Withpath3VOspath4VOspath5VO();
            Path2VO testrstPath2VO = new Path2VO();
            testrstPath2VO.setIdPath2("rstPath2");



            testrstPath2VO.setPath3VOs(null);
            bd.deleteItemsNotInCollectionsInPath(testrstPath2VO,"path3VOs.path4VOs.path5VO",Boolean.FALSE,Boolean.FALSE,Boolean.TRUE);

            Path3VO testrstPath3VO = (Path3VO)bd.findByPrimaryKey(Path3VO.class, "rstPath3");
            assertNull("testrstPath3VO is expected to be null",testrstPath3VO);

            Path4VO testrstPath4VO = (Path4VO)bd.findByPrimaryKey(Path4VO.class, "rstPath4");
            assertNotNull("testrstPath4VO is expected to be not null",testrstPath4VO);

            Path5VO testrstPath5VO = (Path5VO)bd.findByPrimaryKey(Path5VO.class, "rstPath5");
            assertNotNull("testrstPath5VO is expected to be not null",testrstPath5VO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDeleteItemsNotInCollectionsInPathApplyDeletePathCascadeFalse() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDeleteItemsNotInCollectionsInPathApplyDeletePathCascadeFalse()");
    }

    @Test public void testDeleteItemsNotInCollectionsInPathNoApplyDeletePathCascade(){
        log.info("entering "+getThisClassName()+".testDeleteItemsNotInCollectionsInPathNoApplyDeletePathCascade()");
        try{
            BD bd = getBD();
            storeAndCheckrstPath2Withpath3VOspath4VOspath5VO();


            Path2VO testrstPath2VO = new Path2VO();
            testrstPath2VO.setIdPath2("rstPath2");

            testrstPath2VO.setPath3VOs(null);
            bd.deleteItemsNotInCollectionsInPath(testrstPath2VO,"path3VOs.path4VOs.path5VO",Boolean.FALSE,Boolean.TRUE);

            Path3VO testrstPath3VO = (Path3VO)bd.findByPrimaryKey(Path3VO.class, "rstPath3");
            assertNull("testrstPath3VO is expected to be null",testrstPath3VO);

            Path4VO testrstPath4VO = (Path4VO)bd.findByPrimaryKey(Path4VO.class, "rstPath4");
            assertNull("testrstPath4VO is expected to be null",testrstPath4VO);

            Path5VO testrstPath5VO = (Path5VO)bd.findByPrimaryKey(Path5VO.class, "rstPath5");
            assertNull("testrstPath5VO is expected to be null",testrstPath5VO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDeleteItemsNotInCollectionsInPathNoApplyDeletePathCascade() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDeleteItemsNotInCollectionsInPathNoApplyDeletePathCascade()");
    }

    @Test public void testDeleteItemsNotInCollectionsInPathNoFlags(){
        log.info("entering "+getThisClassName()+".testDeleteItemsNotInCollectionsInPathNoFlags()");
        try{

            BD bd = getBD();
            storeAndCheckrstPath2Withpath3VOspath4VOspath5VO();
            Path2VO testrstPath2VO = new Path2VO();
            testrstPath2VO.setIdPath2("rstPath2");



            testrstPath2VO.setPath3VOs(null);
            bd.deleteItemsNotInCollectionsInPath(testrstPath2VO,"path3VOs.path4VOs.path5VO");


            testrstPath2VO = (Path2VO)bd.findByPrimaryKey(Path2VO.class, "rstPath2");
            assertNotNull("testrstPath2VO is expected to be not null",testrstPath2VO);
            bd.retrieveReference(testrstPath2VO,"path3VOs");
            Collection<Path3VO> path3VOs = testrstPath2VO.getPath3VOs();
            if(path3VOs!=null){
                log.info("path3VOs.size() = "+path3VOs.size());
                assertEquals("path3VOs.size() is expected to be 0",0,path3VOs.size());
            }

            Path3VO testrstPath3VO = (Path3VO)bd.findByPrimaryKey(Path3VO.class, "rstPath3");
            assertNotNull("testrstPath3VO is expected to be not null",testrstPath3VO);

            Path4VO testrstPath4VO = (Path4VO)bd.findByPrimaryKey(Path4VO.class, "rstPath4");
            assertNotNull("testrstPath4VO is expected to be not null",testrstPath4VO);

            Path5VO testrstPath5VO = (Path5VO)bd.findByPrimaryKey(Path5VO.class, "rstPath5");
            assertNotNull("testrstPath5VO is expected to be not null",testrstPath5VO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDeleteItemsNotInCollectionsInPathNoFlags() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDeleteItemsNotInCollectionsInPathNoFlags()");
    }


    @Test public void testDeleteItemsNotInCollectionsInPaths(){
        log.info("entering "+getThisClassName()+".testDeleteItemsNotInCollectionsInPaths()");
        try{
            BD bd = getBD();
            storeAndCheckrstPath2Withpath3VOspath4VOspath5VO();



            Path2VO testrstPath2VO = new Path2VO();
            testrstPath2VO.setIdPath2("rstPath2");


            testrstPath2VO.setPath3VOs(null);

            Collection<String> paths = new ArrayList<String>();
            paths.add("path3VOs.path4VOs.path5VO");

            bd.deleteItemsNotInCollectionsInPaths(testrstPath2VO,paths,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE);

            Path3VO testrstPath3VO = (Path3VO)bd.findByPrimaryKey(Path3VO.class, "rstPath3");
            assertNull("testrstPath3VO is expected to be null",testrstPath3VO);

            Path4VO testrstPath4VO = (Path4VO)bd.findByPrimaryKey(Path4VO.class, "rstPath4");
            assertNull("testrstPath4VO is expected to be null",testrstPath4VO);

            Path5VO testrstPath5VO = (Path5VO)bd.findByPrimaryKey(Path5VO.class, "rstPath5");
            assertNull("testrstPath5VO is expected to be null",testrstPath5VO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDeleteItemsNotInCollectionsInPaths() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDeleteItemsNotInCollectionsInPaths()");
    }

    @Test public void testDeletePathCascade(){
        log.info("entering "+getThisClassName()+".testDeletePathCascade()");
        try{
            BD bd = getBD();
            storeAndCheckrstPath2Withpath3VOspath4VOspath5VO();



            Path2VO testrstPath2VO = new Path2VO();
            testrstPath2VO.setIdPath2("rstPath2");



            bd.deletePathCascade(testrstPath2VO,"path3VOs.path4VOs.path5VO",Boolean.FALSE,Boolean.TRUE);

            testrstPath2VO = (Path2VO)bd.findByPrimaryKey(Path2VO.class, "rstPath2");
            assertNull("testrstPath2VO is expected to be null",testrstPath2VO);

            Path3VO testrstPath3VO = (Path3VO)bd.findByPrimaryKey(Path3VO.class, "rstPath3");
            assertNull("testrstPath3VO is expected to be null",testrstPath3VO);

            Path4VO testrstPath4VO = (Path4VO)bd.findByPrimaryKey(Path4VO.class, "rstPath4");
            assertNull("testrstPath4VO is expected to be null",testrstPath4VO);

            Path5VO testrstPath5VO = (Path5VO)bd.findByPrimaryKey(Path5VO.class, "rstPath5");
            assertNull("testrstPath5VO is expected to be null",testrstPath5VO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDeletePathCascade() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDeletePathCascade()");
    }

    @Test public void testDeletePathsCascade(){
        log.info("entering "+getThisClassName()+".testDeletePathsCascade()");
        try{
            BD bd = getBD();
            storeAndCheckrstPath2Withpath3VOspath4VOspath5VO();



            Path2VO testrstPath2VO = new Path2VO();
            testrstPath2VO.setIdPath2("rstPath2");

            Collection<String> paths = new ArrayList<String>();
            paths.add("path3VOs.path4VOs.path5VO");

            bd.deletePathsCascade(testrstPath2VO,paths,Boolean.FALSE,Boolean.TRUE);

            testrstPath2VO = (Path2VO)bd.findByPrimaryKey(Path2VO.class, "rstPath2");
            assertNull("testrstPath2VO is expected to be null",testrstPath2VO);

            Path3VO testrstPath3VO = (Path3VO)bd.findByPrimaryKey(Path3VO.class, "rstPath3");
            assertNull("testrstPath3VO is expected to be null",testrstPath3VO);

            Path4VO testrstPath4VO = (Path4VO)bd.findByPrimaryKey(Path4VO.class, "rstPath4");
            assertNull("testrstPath4VO is expected to be null",testrstPath4VO);

            Path5VO testrstPath5VO = (Path5VO)bd.findByPrimaryKey(Path5VO.class, "rstPath5");
            assertNull("testrstPath5VO is expected to be null",testrstPath5VO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testDeletePathsCascade() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testDeletePathsCascade()");
    }



    
    protected void verifyTestUpdateCollectionReference1ToN(){
    	try {
    		BD bd = getBD();
    		
    		SubTaskVO deletedSubTaskVO = (SubTaskVO) bd.findByPrimaryKey(SubTaskVO.class, new Object[]{new Integer(1), new Integer(1)});

            if(deletedSubTaskVO!=null) log.info("deletedSubTaskVO!=null  "+deletedSubTaskVO.getIdTask()+" "+deletedSubTaskVO.getIdSubTask());
            assertTrue("deletedSubTaskVO (1,1) has not been deleted", deletedSubTaskVO==null);


            SubTaskVO insertedSubTaskVO = (SubTaskVO) bd.findByPrimaryKey(SubTaskVO.class, new Object[]{new Integer(1), new Integer(4)});

            log.info("insertedSubTaskVO.idTask = "+insertedSubTaskVO.getIdTask());
            assertEquals("insertedSubTaskVO.idTask expected is 1",new Integer(1),insertedSubTaskVO.getIdTask());

            log.info("insertedSubTaskVO.idSubTask = "+insertedSubTaskVO.getIdSubTask());
            assertEquals("insertedSubTaskVO.idSubTask expected is 4",new Integer(4),insertedSubTaskVO.getIdSubTask());

            log.info("insertedSubTaskVO.subTaskName = "+insertedSubTaskVO.getSubTaskName());
            assertEquals("insertedSubTaskVO.subTaskName expected is task1 subTask4","task1 subTask4",insertedSubTaskVO.getSubTaskName());
		} catch (Exception e) {
			assertTrue("Exception in "+getThisClassName()+".verifyTestUpdateCollectionReference1ToN() :"+e.toString(),false);
			
		}
    }	
    
    @Test
    public void testUpdateCollectionReference1ToN(){
        log.info("************Entering the "+getThisClassName()+".testUpdateCollectionReference1ToN()***************\n\n");
        try{

            BD bd = getBD();

            TaskVO taskVO = (TaskVO) bd.findByPrimaryKey(TaskVO.class,new Integer(1));
            bd.retrieveReference(taskVO,"subTaskVOs");
            Iterator iterator = taskVO.getSubTaskVOs().iterator();
            SubTaskVO toRestoreSubTaskVO = (SubTaskVO) iterator.next();

            iterator.remove();
            SubTaskVO subTaskVO = new SubTaskVO();
            subTaskVO.setIdTask(new Integer(1));
            subTaskVO.setIdSubTask(new Integer(4));
            subTaskVO.setSubTaskName("task1 subTask4");
            taskVO.getSubTaskVOs().add(subTaskVO) ;

            bd.updateCollectionReference(taskVO,"subTaskVOs");
            verifyTestUpdateCollectionReference1ToN();
//
//            SubTaskVO deletedSubTaskVO = (SubTaskVO) bd.findByPrimaryKey(SubTaskVO.class, new Object[]{new Integer(1), new Integer(1)});
//
//            if(deletedSubTaskVO!=null) log.info("deletedSubTaskVO!=null  "+deletedSubTaskVO.getIdTask()+" "+deletedSubTaskVO.getIdSubTask());
//            assertTrue("deletedSubTaskVO (1,1) has not been deleted", deletedSubTaskVO==null);
//
//
//            SubTaskVO insertedSubTaskVO = (SubTaskVO) bd.findByPrimaryKey(SubTaskVO.class, new Object[]{new Integer(1), new Integer(4)});
//
//            log.info("insertedSubTaskVO.idTask = "+insertedSubTaskVO.getIdTask());
//            assertEquals("insertedSubTaskVO.idTask expected is 1",new Integer(1),insertedSubTaskVO.getIdTask());
//
//            log.info("insertedSubTaskVO.idSubTask = "+insertedSubTaskVO.getIdSubTask());
//            assertEquals("insertedSubTaskVO.idSubTask expected is 4",new Integer(4),insertedSubTaskVO.getIdSubTask());
//
//            log.info("insertedSubTaskVO.subTaskName = "+insertedSubTaskVO.getSubTaskName());
//            assertEquals("insertedSubTaskVO.subTaskName expected is task1 subTask4","task1 subTask4",insertedSubTaskVO.getSubTaskName());

            bd.insert(toRestoreSubTaskVO) ;



       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testUpdateCollectionReference1ToN() :"+e.toString(),false);
       }
       log.info("************Done with the "+getThisClassName()+".testUpdateCollectionReference1ToN()***************\n");
    }

    @Test public void testUpdateCollectionReferenceWithTwoInverseForeignKeys(){
        try{

            BD bd = getBD();

            PersonProjectVO personProjectVO1_1 = (PersonProjectVO) bd.findByPrimaryKey(PersonProjectVO.class,new Object[]{new Integer(1),new Integer(1)});
            bd.retrieveReference(personProjectVO1_1,"taskVOs");
            Iterator iterator = personProjectVO1_1.getTaskVOs().iterator();
            TaskVO toRestoreTaskVO = (TaskVO) iterator.next();
            iterator.remove();


            TaskVO taskVO = new TaskVO();
            taskVO.setIdTask(new Integer(1000));
            taskVO.setIdPerson(new Integer(1));
            taskVO.setIdProject(new Integer(1));
            taskVO.setTaskName("task1000 person1 project1");
            personProjectVO1_1.getTaskVOs().add(taskVO) ;

            bd.updateCollectionReference(personProjectVO1_1,"taskVOs");

            TaskVO deletedTaskVO = (TaskVO) bd.findByPrimaryKey(TaskVO.class, new Integer(0));
            assertTrue("deletedTaskVO (0) has not been deleted", deletedTaskVO==null);

            TaskVO insertedTaskVO = (TaskVO) bd.findByPrimaryKey(TaskVO.class, new Integer(1000));

            log.info("insertedTaskVO.idTask = "+insertedTaskVO.getIdTask());
            assertEquals("insertedSubTaskVO.idTask expected is 1000",new Integer(1000),insertedTaskVO.getIdTask());

            log.info("insertedTaskVO.idPerson = "+insertedTaskVO.getIdPerson());
            assertEquals("insertedTaskVO.idPerson expected is 1",new Integer(1),insertedTaskVO.getIdPerson());

            log.info("insertedTaskVO.idProject = "+insertedTaskVO.getIdProject());
            assertEquals("insertedTaskVO.idProject expected is 1",new Integer(1),insertedTaskVO.getIdProject());

            bd.insert(toRestoreTaskVO);



       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testUpdateCollectionReferenceWithTwoInverseForeignKeys() :"+e.toString(),false);
       }
    }



    @Test public void testUpdateCollectionReferences(){
        try{

            BD bd = getBD();

            PersonProjectVO personProjectVO2_1 = (PersonProjectVO) bd.findByPrimaryKey(PersonProjectVO.class,new Object[]{new Integer(2),new Integer(1)});
            bd.retrieveReference(personProjectVO2_1,"taskVOs");
            Iterator iterator = personProjectVO2_1.getTaskVOs().iterator();
            TaskVO toRestoreTaskVO = (TaskVO) iterator.next();
            iterator.remove();


            TaskVO taskVO = new TaskVO();
            taskVO.setIdTask(new Integer(2000));
            taskVO.setIdPerson(new Integer(2));
            taskVO.setIdProject(new Integer(1));
            taskVO.setTaskName("task2000 person2 project1");
            personProjectVO2_1.getTaskVOs().add(taskVO) ;

            bd.updateCollectionReferences(personProjectVO2_1);

            //TaskVO deletedTaskVO = (TaskVO) bd.findByPrimaryKey(TaskVO.class, new Integer(3));
            TaskVO deletedTaskVO = (TaskVO) bd.findByPrimaryKey(TaskVO.class, toRestoreTaskVO.getIdTask());
            assertTrue("toRestoreTaskVO has not been deleted", deletedTaskVO==null);

            TaskVO insertedTaskVO = (TaskVO) bd.findByPrimaryKey(TaskVO.class, new Integer(2000));

            log.info("insertedTaskVO.idTask = "+insertedTaskVO.getIdTask());
            assertEquals("insertedSubTaskVO.idTask expected is 2000",new Integer(2000),insertedTaskVO.getIdTask());

            log.info("insertedTaskVO.idPerson = "+insertedTaskVO.getIdPerson());
            assertEquals("insertedTaskVO.idPerson expected is 2",new Integer(2),insertedTaskVO.getIdPerson());

            log.info("insertedTaskVO.idProject = "+insertedTaskVO.getIdProject());
            assertEquals("insertedTaskVO.idProject expected is 1",new Integer(1),insertedTaskVO.getIdProject());

            bd.insert(toRestoreTaskVO);



       }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testUpdateCollectionReferences() :"+e.toString(),false);
       }
    }

    @Test public void testStorePathCascade(){
        log.info("entering "+getThisClassName()+".testStorePathCascade()");
        try{

            storeAndCheckrstPath2Withpath3VOspath4VOspath5VO();


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testStorePathCascade() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testStorePathCascade()");
    }


    @Test public void testStorePathsCascade(){
        log.info("entering "+getThisClassName()+".testStorePathsCascade()");
        try{

            BD bd = getBD();

            Path1VO rstPath1VO = new Path1VO();
            rstPath1VO.setIdPath1("rstPath1");


            Path2VO rstPath2VO = new Path2VO();
            rstPath2VO.setIdPath2("rstPath2");
            Collection<Path2VO> path2VOs = new ArrayList<Path2VO>();
            path2VOs.add(rstPath2VO);
            rstPath1VO.setPath2VOs(path2VOs);

            Path3VO rstPath3VO = new Path3VO();
            rstPath3VO.setIdPath3("rstPath3");
            Collection<Path3VO> path3VOs = new ArrayList<Path3VO>();
            path3VOs.add(rstPath3VO);
            rstPath2VO.setPath3VOs(path3VOs);

            Path4VO rstPath4VO = new Path4VO();
            rstPath4VO.setIdPath4("rstPath4");
            Collection<Path4VO> path4VOs = new ArrayList<Path4VO>();
            path4VOs.add(rstPath4VO);
            rstPath3VO.setPath4VOs(path4VOs);

            Path5VO rstPath5VO = new Path5VO();
            rstPath5VO.setIdPath5("rstPath5");
            rstPath4VO.setPath5VO(rstPath5VO);

            Collection<String> paths = new ArrayList<String>();
            paths.add("path2VOs.path3VOs.path4VOs.path5VO");
            bd.storePathsCascade(rstPath1VO,paths,Boolean.FALSE,Boolean.TRUE);

            Path2VO testrstPath2VO = (Path2VO)bd.findByPrimaryKey(Path2VO.class, "rstPath2");
            assertNotNull("testrstPath2VO is expected to be not null",testrstPath2VO);

            bd.retrievePathReference(rstPath2VO,"path3VOs.path4VOs.path5VO");

            Collection<Path3VO> testpath3VOs = testrstPath2VO.getPath3VOs();
            log.info("testpath3VOs.size() = "+testpath3VOs.size());
            assertEquals("testpath3VOs.size() = is expected to be 1",1,testpath3VOs.size());

            Path3VO testrstPath3VO = testpath3VOs.iterator().next();
            log.info("testrstPath3VO.getIdPath3() = "+testrstPath3VO.getIdPath3());
            assertEquals("testrstPath3VO.getIdPath3() = is expected to be rstPath3","rstPath3",testrstPath3VO.getIdPath3());

            Collection<Path4VO> testpath4VOs = testrstPath3VO.getPath4VOs();
            log.info("testpath4VOs.size() = "+testpath4VOs.size());
            assertEquals("testpath4VOs.size() = is expected to be 1",1,testpath4VOs.size());

            Path4VO testrstPath4VO = testpath4VOs.iterator().next();
            log.info("testrstPath4VO.getIdPath4() = "+testrstPath4VO.getIdPath4());
            assertEquals("testrstPath4VO.getIdPath4() = is expected to be rstPath4","rstPath4",testrstPath4VO.getIdPath4());

            Path5VO testrstPath5VO = testrstPath4VO.getPath5VO();
            assertNotNull("testrstPath5VO is expected to be not null",testrstPath5VO);
            log.info("testrstPath5VO.getIdPath5() = "+testrstPath5VO.getIdPath5());
            assertEquals("testrstPath5VO.getIdPath5() = is expected to be rstPath5","rstPath5",testrstPath5VO.getIdPath5());

            
            

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testStorePathsCascade() :"+e.toString(),false);
        }
        log.info("done with "+getThisClassName()+".testStorePathsCascade()");

    }

    @Test
    public void testUpdateCreateTrees(){
        log.info("************Entering the "+getThisClassName()+".testUpdateCreateTrees() ***************");

        try{

            BD bd = getBD();
            RootVO hjkRootVO = new RootVO();
            hjkRootVO.setIdRoot("root-hjk");

            Node3VO  hjkNode3VO = new Node3VO();
            hjkNode3VO.setIdNode3("node3-hjk");

            hjkRootVO.setNode3VO(hjkNode3VO);

            Node33VO  hjkNode33VO = new Node33VO();
            hjkNode33VO.setIdNode33("node33-hjk");

            hjkNode3VO.setNode33VO(hjkNode33VO);


            Node2VO hjk1Node2VO = new Node2VO();
            hjk1Node2VO.setIdNode2("node2-hjk1");

            Node2VO hjk2Node2VO = new Node2VO();
            hjk2Node2VO.setIdNode2("node2-hjk2");


            Collection<Node2VO>  node2VOs = new ArrayList<Node2VO>();
            node2VOs.add(hjk1Node2VO);
            node2VOs.add(hjk2Node2VO);

            hjkRootVO.setNode2VOs(node2VOs);


            String path1 = "node1VOs.node11VO.node111VOs";
            String path2 = "node1VOs.node12VOs.node121VO";
            String path3 = "node1VOs.node12VOs.node122VOs";
            String path4 = "node2VOs.node21VO.node211VOs";
            String path5 = "node2VOs.node22VOs.node221VOs";
            String path6 = "node3VO.node31VOs.node311VOs.node3111VOs";
            String path7 = "node3VO.node31VOs.node311VOs.node3112VOs";
            String path8 = "node3VO.node32VOs.node321VO";
            String path9 = "node3VO.node32VOs.node322VOs";
            String path10 = "node3VO.node33VO";

            ArrayList<String> paths = new ArrayList<String>();

            paths.add(path1);
            paths.add(path2);
            paths.add(path3);
            paths.add(path4);
            paths.add(path5);
            paths.add(path6);
            paths.add(path7);
            paths.add(path8);
            paths.add(path9);
            paths.add(path10);


            bd.storePathsCascade(hjkRootVO, paths, Boolean.TRUE, Boolean.TRUE);

            hjkRootVO.setNode3VO(null);
            node2VOs.clear();
            node2VOs.add(hjk1Node2VO);


            bd.updateCreateTrees(hjkRootVO,paths, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE);

            RootVO testhjkRootVO = (RootVO)bd.findByPrimaryKey(RootVO.class,"root-hjk") ;
            log.info("testhjkRootVO.getIdRoot() = "+testhjkRootVO.getIdRoot());
            assertEquals("testhjkRootVO.getIdRoot() is expected to be root-hjk", "root-hjk",testhjkRootVO.getIdRoot());

            Collection<Node2VO>  testnode2VOs = testhjkRootVO.getNode2VOs();
            log.info("testnode2VOs.size() = "+testnode2VOs.size());
            assertEquals("testnode2VOs.size() is expected to be 1", 1,testnode2VOs.size());

            Node2VO testhjk1Node2VO =  testnode2VOs.iterator().next();
            log.info("testhjk1Node2VO.getIdNode2() = "+testhjk1Node2VO.getIdNode2());
            assertEquals("testhjk1Node2VO.getIdNode2() is expected to be node2-hjk1", "node2-hjk1",testhjk1Node2VO.getIdNode2());

            Node2VO testhjk2Node2VO  = (Node2VO) bd.findByPrimaryKey(Node2VO.class,"node2-hjk2") ;
            assertNull("testhjk2Node2VO is expected to be null", testhjk2Node2VO);


            Node3VO testhjkNode3VO = (Node3VO) bd.findByPrimaryKey(Node3VO.class,"node3-hjk") ;
            assertNull("testhjkNode3VO is expected to be null", testhjkNode3VO);

            Node33VO testhjkNode33VO = (Node33VO) bd.findByPrimaryKey(Node33VO.class,"node33-hjk") ;
            assertNull("testhjkNode33VO is expected to be null", testhjkNode33VO);



        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testUpdateCreateTrees() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testUpdateCreateTrees() **************");
    }

    @Test
    public void testUpdateCreateTreesApplyDeletePathCascadeFalse(){
        log.info("************Entering the "+getThisClassName()+".testUpdateCreateTreesApplyDeletePathCascadeFalse() ***************");

        try{

            BD bd = getBD();
            RootVO hjkRootVO = new RootVO();
            hjkRootVO.setIdRoot("root-hjk");

            Node3VO  hjkNode3VO = new Node3VO();
            hjkNode3VO.setIdNode3("node3-hjk");

            hjkRootVO.setNode3VO(hjkNode3VO);

            Node33VO  hjkNode33VO = new Node33VO();
            hjkNode33VO.setIdNode33("node33-hjk");

            hjkNode3VO.setNode33VO(hjkNode33VO);


            Node2VO hjk1Node2VO = new Node2VO();
            hjk1Node2VO.setIdNode2("node2-hjk1");

            Node2VO hjk2Node2VO = new Node2VO();
            hjk2Node2VO.setIdNode2("node2-hjk2");


            Collection<Node2VO>  node2VOs = new ArrayList<Node2VO>();
            node2VOs.add(hjk1Node2VO);
            node2VOs.add(hjk2Node2VO);

            hjkRootVO.setNode2VOs(node2VOs);


            String path1 = "node1VOs.node11VO.node111VOs";
            String path2 = "node1VOs.node12VOs.node121VO";
            String path3 = "node1VOs.node12VOs.node122VOs";
            String path4 = "node2VOs.node21VO.node211VOs";
            String path5 = "node2VOs.node22VOs.node221VOs";
            String path6 = "node3VO.node31VOs.node311VOs.node3111VOs";
            String path7 = "node3VO.node31VOs.node311VOs.node3112VOs";
            String path8 = "node3VO.node32VOs.node321VO";
            String path9 = "node3VO.node32VOs.node322VOs";
            String path10 = "node3VO.node33VO";

            ArrayList<String> paths = new ArrayList<String>();

            paths.add(path1);
            paths.add(path2);
            paths.add(path3);
            paths.add(path4);
            paths.add(path5);
            paths.add(path6);
            paths.add(path7);
            paths.add(path8);
            paths.add(path9);
            paths.add(path10);


            bd.storePathsCascade(hjkRootVO, paths, Boolean.TRUE, Boolean.TRUE);

            hjkRootVO.setNode3VO(null);
            node2VOs.clear();
            node2VOs.add(hjk1Node2VO);


            bd.updateCreateTrees(hjkRootVO,paths, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE);

            RootVO testhjkRootVO = (RootVO)bd.findByPrimaryKey(RootVO.class,"root-hjk") ;
            log.info("testhjkRootVO.getIdRoot() = "+testhjkRootVO.getIdRoot());
            assertEquals("testhjkRootVO.getIdRoot() is expected to be root-hjk", "root-hjk",testhjkRootVO.getIdRoot());

            Collection<Node2VO>  testnode2VOs = testhjkRootVO.getNode2VOs();
            log.info("testnode2VOs.size() = "+testnode2VOs.size());
            assertEquals("testnode2VOs.size() is expected to be 1", 1,testnode2VOs.size());

            Node2VO testhjk1Node2VO =  testnode2VOs.iterator().next();
            log.info("testhjk1Node2VO.getIdNode2() = "+testhjk1Node2VO.getIdNode2());
            assertEquals("testhjk1Node2VO.getIdNode2() is expected to be node2-hjk1", "node2-hjk1",testhjk1Node2VO.getIdNode2());

            Node2VO testhjk2Node2VO  = (Node2VO) bd.findByPrimaryKey(Node2VO.class,"node2-hjk2") ;
            assertNull("testhjk2Node2VO is expected to be null", testhjk2Node2VO);


            Node3VO testhjkNode3VO = (Node3VO) bd.findByPrimaryKey(Node3VO.class,"node3-hjk") ;
            assertNull("testhjkNode3VO is expected to be null", testhjkNode3VO);

            Node33VO testhjkNode33VO = (Node33VO) bd.findByPrimaryKey(Node33VO.class,"node33-hjk") ;
            assertNotNull("testhjkNode33VO is expected to not be null", testhjkNode33VO);



        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testUpdateCreateTreesApplyDeletePathCascadeFalse() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testUpdateCreateTreesApplyDeletePathCascadeFalse() **************");
    }

    @Test
    public void testUpdateCreateTreesOnlyStoreVOHasToBeUpdated(){
        log.info("************Entering the "+getThisClassName()+".testUpdateCreateTreesOnlyStoreVOHasToBeUpdated() ***************");

        try{

            BD bd = getBD();
            RootVO ccccRootVO = new RootVO();
            ccccRootVO.setIdRoot("root-cccc");

            String path1 = "node1VOs.node11VO.node111VOs";
            String path2 = "node1VOs.node12VOs.node121VO";
            String path3 = "node1VOs.node12VOs.node122VOs";
            String path4 = "node2VOs.node21VO.node211VOs";
            String path5 = "node2VOs.node22VOs.node221VOs";
            String path6 = "node3VO.node31VOs.node311VOs.node3111VOs";
            String path7 = "node3VO.node31VOs.node311VOs.node3112VOs";
            String path8 = "node3VO.node32VOs.node321VO";
            String path9 = "node3VO.node32VOs.node322VOs";
            String path10 = "node3VO.node33VO";

            ArrayList<String> paths = new ArrayList<String>();

            paths.add(path1);
            paths.add(path2);
            paths.add(path3);
            paths.add(path4);
            paths.add(path5);
            paths.add(path6);
            paths.add(path7);
            paths.add(path8);
            paths.add(path9);
            paths.add(path10);


            bd.updateCreateTrees(ccccRootVO,paths, Boolean.TRUE);

            RootVO testccccRootVO = (RootVO)bd.findByPrimaryKey(RootVO.class,"root-cccc") ;

            log.info("testcRootVO.getIdRoot() = "+testccccRootVO.getIdRoot());
            assertEquals("testcRootVO.getIdRoot() is expected to be root-cccc", "root-cccc",testccccRootVO.getIdRoot());



        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testUpdateCreateTreesOnlyStoreVOHasToBeUpdated() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testUpdateCreateTreesOnlyStoreVOHasToBeUpdated() **************");
    }


    /**********************************************/

    @Test
    public void testBuildMap(){
        log.info("************Entering the "+getThisClassName()+".testBuildMap() ***************");
        try{

            BD bd = getBD();


            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleTitle("roleTitle1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleTitle("roleTitle1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleTitle("roleTitle1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = bd.buildMap(projectVO,"personProjectVOs", "idPerson",true, "roleTitle", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(1101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be roleTitle1000-101","roleTitle1000-101",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(1102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleTitle1000-102","roleTitle1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(1103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(1104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleTitle1000-104","roleTitle1000-104",role4VO.getRoleName());


        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMap() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMap() **************");
    }


    @Test
    public void testBuildMapWithNoIsValueObjectKeyAttributeNameToSet(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithNoIsValueObjectKeyAttributeNameToSet() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleTitle("roleTitle1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleTitle("roleTitle1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleTitle("roleTitle1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = bd.buildMap(projectVO,"personProjectVOs", "idPerson", "roleTitle", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be roleTitle1000-101","roleTitle1000-101",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleTitle1000-102","roleTitle1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(103);
            assertNull("role3VO is expected to be null ", role3VO);

            RoleVO role4VO = (RoleVO) map.get(104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleTitle1000-104","roleTitle1000-104",role4VO.getRoleName());


        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithNoIsValueObjectKeyAttributeNameToSet() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithNoIsValueObjectKeyAttributeNameToSet() **************");
    }


    @Test
    public void testBuildMapJustFirstAttributeAndMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapJustFirstAttributeAndMapValueClass() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();
            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);
            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = bd.buildMap(projectVO,"personProjectVOs", "idPerson", Boolean.FALSE, PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            PersonVO person1VO = (PersonVO) map.get(101);
            log.info("person1VO.getIdPerson() = "+person1VO.getIdPerson());
            assertEquals("person1VO.getIdPerson() is expected to be 101", new Integer(101),person1VO.getIdPerson());

            PersonVO person2VO = (PersonVO) map.get(102);
            log.info("person2VO.getIdPerson() = "+person2VO.getIdPerson());
            assertEquals("person2VO.getIdPerson() is expected to be 102", new Integer(102),person2VO.getIdPerson());

            PersonVO person3VO = (PersonVO) map.get(103);
            assertNull("person3VO is expected to be null ", person3VO);

            PersonVO person4VO = (PersonVO) map.get(104);
            log.info("person4VO.getIdPerson() = "+person4VO.getIdPerson());
            assertEquals("person4VO.getIdPerson() is expected to be 104", new Integer(104),person4VO.getIdPerson());



        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapJustFirstAttributeAndMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapJustFirstAttributeAndMapValueClass() **************");
    }

    @Test
    public void testBuildMapJustKeyAndValuetAttributeNameAndMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapJustKeyAndValuetAttributeNameAndMapValueClass() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = bd.buildMap(projectVO,"personProjectVOs", "idPerson", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be roleName1000-101","roleName1000-101",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleName1000-102","roleName1000-102",role2VO.getRoleName());

            RoleVO role3VO = (RoleVO) map.get(103);
            assertNull("role3VO is expected to be null ", role3VO);

            RoleVO role4VO = (RoleVO) map.get(104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleName1000-104","roleName1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapJustKeyAndValuetAttributeNameAndMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapJustKeyAndValuetAttributeNameAndMapValueClass() **************");
    }


    @Test
    public void testBuildMapWithEmptyCollection(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithEmptyCollection() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(2000);
            projectVO.setTitle("title 2000");
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            PersonVO person1VO = new PersonVO();
            person1VO.setIdPerson(101);
            personProject1VO.setPersonVO(person1VO);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            PersonVO person2VO = new PersonVO();
            person2VO.setIdPerson(102);
            personProject2VO.setPersonVO(person2VO);


            PersonProjectVO personProject4VO = new PersonProjectVO();
            PersonVO person4VO = new PersonVO();
            person4VO.setIdPerson(104);
            personProject4VO.setPersonVO(person4VO);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Collection<String> trees = new ArrayList<String>();
            trees.add("personProjectVOs.personVO");

            bd.updateCreateTrees(projectVO,trees);

            ProjectVO testProjectVO =(ProjectVO) bd.findByPrimaryKey(ProjectVO.class,2000);
            testProjectVO.setPersonProjectVOs(new ArrayList<PersonProjectVO>());

            Map map = bd.buildMap(testProjectVO,"personProjectVOs", "idPerson", Boolean.FALSE, PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 0",0,map.keySet().size());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithEmptyCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithEmptyCollection() **************");
    }



    @Test
    public void testBuildMapWithNullCollection(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithNullCollection() ***************");

        try{

            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            projectVO.setTitle("title 1000");
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            PersonVO person1VO = new PersonVO();
            person1VO.setIdPerson(101);
            personProject1VO.setPersonVO(person1VO);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            PersonVO person2VO = new PersonVO();
            person2VO.setIdPerson(102);
            personProject2VO.setPersonVO(person2VO);


            PersonProjectVO personProject4VO = new PersonProjectVO();
            PersonVO person4VO = new PersonVO();
            person4VO.setIdPerson(104);
            personProject4VO.setPersonVO(person4VO);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Collection<String> trees = new ArrayList<String>();
            trees.add("personProjectVOs.personVO");

            bd.updateCreateTrees(projectVO,trees, Boolean.TRUE);

            ProjectVO testProjectVO =(ProjectVO) bd.findByPrimaryKey(ProjectVO.class,1000);
            //log.info("testProjectVO.getIdPerson() = "+testProjectVO.getPersonProjectVOs());

            testProjectVO.setPersonProjectVOs(null);

            Map map = bd.buildMap(testProjectVO,"personProjectVOs", "idPerson", Boolean.FALSE, PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            PersonVO testPerson1VO = (PersonVO) map.get(101);
            log.info("testPerson1VO.getIdPerson() = "+testPerson1VO.getIdPerson());
            assertEquals("testPerson1VO.getIdPerson() is expected to be 101", new Integer(101),testPerson1VO.getIdPerson());

            PersonVO testPerson2VO = (PersonVO) map.get(102);
            log.info("testPerson2VO.getIdPerson() = "+testPerson2VO.getIdPerson());
            assertEquals("testPerson2VO.getIdPerson() is expected to be 102", new Integer(102),testPerson2VO.getIdPerson());

            PersonVO testPerson4VO = (PersonVO) map.get(104);
            log.info("testPerson4VO.getIdPerson() = "+testPerson4VO.getIdPerson());
            assertEquals("testPerson4VO.getIdPerson() is expected to be 104", new Integer(104),testPerson4VO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithNullCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithNullCollection() **************");
    }


    @Test
    public void testBuildMapWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = bd.buildMap(projectVO,"personProjectVOs", "idPerson", "roleName");

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            String roleName1VO = (String) map.get(101);
            log.info("roleName1VO = "+roleName1VO);
            assertEquals("roleName1VO is expected to be roleName1000-101","roleName1000-101",roleName1VO);

            String roleName2VO = (String) map.get(102);
            log.info("roleName2VO = "+roleName2VO);
            assertEquals("roleName2VO is expected to be roleName1000-102","roleName1000-102",roleName2VO);

            String roleName3VO = (String) map.get(103);
            assertNull("roleName3VO is expected to be null ", roleName3VO);

            String roleName4VO = (String)  map.get(104);
            log.info("roleName4VO = "+roleName4VO);
            assertEquals("roleName4VO is expected to be roleName1000-104","roleName1000-104",roleName4VO );

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() **************");
    }


    @Test
    public void testBuildMapJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() ***************");

        try{

            BD bd = getBD();


            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();
            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);
            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = bd.buildMap(projectVO,"personProjectVOs", "idPerson");

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            Integer idPerson1 = (Integer) map.get(101);
            log.info("idPerson1 = "+ idPerson1);
            assertEquals("idPerson1 is expected to be 101", new Integer(101), idPerson1);

            Integer idPerson2 = (Integer) map.get(102);
            log.info("idPerson2 = "+idPerson2);
            assertEquals("idPerson2 is expected to be 102", new Integer(102),idPerson2);

            Integer idPerson3 = (Integer) map.get(103);
            assertNull("idPerson3 is expected to be null ", idPerson3);

            Integer idPerson4 = (Integer) map.get(104);
            log.info("idPerson4 = "+idPerson4);
            assertEquals("idPerson4is expected to be 104", new Integer(104),idPerson4);



        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() **************");
    }


    @Test
    public void testBuildMapWithCollection(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithCollection() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleTitle("roleTitle1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleTitle("roleTitle1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleTitle("roleTitle1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = bd.buildMap(personProjectVOs, "idPerson",true, "roleTitle", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(1101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be roleTitle1000-101","roleTitle1000-101",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(1102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleTitle1000-102","roleTitle1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(1103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(1104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleTitle1000-104","roleTitle1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithCollection() **************");
    }

    @Test
    public void testBuildMapWithCollectionNoMapAttribute(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithCollectionNoMapAttribute() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = bd.buildMap(personProjectVOs, "idPerson",true, "roleName", RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(1101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be roleName1000-101","roleName1000-101",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(1102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleName1000-102","roleName1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(1103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(1104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleName1000-104","roleName1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithCollectionNoMapAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithCollectionNoMapAttribute() **************");
    }

    @Test
    public void testBuildMapWithCollectionNoValueNoMapAttribute(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithCollectionNoValueNoMapAttribute() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = bd.buildMap(personProjectVOs, "idPerson",false,  PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            PersonVO person1VO = (PersonVO) map.get(101);
            log.info("person1VO.getIdPerson() = "+person1VO.getIdPerson());
            assertEquals("person1VO.getIdPerson() is expected to be 101",new Integer(101),person1VO.getIdPerson());

            PersonVO person2VO = (PersonVO) map.get(102);
            log.info("person2VO.getIdPerson() = "+person2VO.getIdPerson());
            assertEquals("person2VO.getIdPerson() is expected to be 102",new Integer(102),person2VO.getIdPerson());

            PersonVO person3VO = (PersonVO)map.get(103);
            assertNull("person3VO is expected to be null ", person3VO);

            PersonVO person4VO = (PersonVO) map.get(104);
            log.info("person4VO.getIdPerson() = "+person4VO.getIdPerson());
            assertEquals("person4VO.getIdPerson() is expected to be 104",new Integer(104),person4VO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithCollectionNoValueNoMapAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithCollectionNoValueNoMapAttribute() **************");
    }


    @Test
    public void testBuildMapWithCollectionNoIsKeyToSet(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithCollectionNoIsKeyToSet() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleTitle("roleTitle1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleTitle("roleTitle1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleTitle("roleTitle1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = bd.buildMap(personProjectVOs, "idPerson", "roleTitle", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be roleTitle1000-101","roleTitle1000-101",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleTitle1000-102","roleTitle1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleTitle1000-104","roleTitle1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithCollectionNoIsKeyToSet() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithCollectionNoIsKeyToSet() **************");
    }


    @Test
    public void testBuildMapWithCollectionNoIsKeyNoMapAttribute(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithCollectionNoIsKeyNoMapAttribute() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = bd.buildMap(personProjectVOs, "idPerson", "roleName", RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be roleName1000-101","roleName1000-101",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleName1000-102","roleName1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleName1000-104","roleName1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithCollectionNoIsKeyNoMapAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithCollectionNoIsKeyNoMapAttribute() **************");
    }



    @Test
    public void testBuildMapWithCollectionNoIsKeyToSetNoValueNoMapAttribute(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithCollectionNoIsKeyToSetNoValueNoMapAttribute() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = bd.buildMap(personProjectVOs, "idPerson",  PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            PersonVO person1VO = (PersonVO) map.get(101);
            log.info("person1VO.getIdPerson() = "+person1VO.getIdPerson());
            assertEquals("person1VO.getIdPerson() is expected to be 101",new Integer(101),person1VO.getIdPerson());

            PersonVO person2VO = (PersonVO) map.get(102);
            log.info("person2VO.getIdPerson() = "+person2VO.getIdPerson());
            assertEquals("person2VO.getIdPerson() is expected to be 102",new Integer(102),person2VO.getIdPerson());

            PersonVO person3VO = (PersonVO)map.get(103);
            assertNull("person3VO is expected to be null ", person3VO);

            PersonVO person4VO = (PersonVO) map.get(104);
            log.info("person4VO.getIdPerson() = "+person4VO.getIdPerson());
            assertEquals("person4VO.getIdPerson() is expected to be 104",new Integer(104),person4VO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithCollectionNoIsKeyToSetNoValueNoMapAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithCollectionNoIsKeyToSetNoValueNoMapAttribute() **************");
    }

    @Test
    public void testBuildMapWithCollectionNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithCollectionNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = bd.buildMap(personProjectVOs, "idPerson", "roleName");

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            String roleName1VO = (String) map.get(101);
            log.info("roleName1VO = "+roleName1VO);
            assertEquals("roleName1VO is expected to be roleName1000-101","roleName1000-101",roleName1VO);

            String roleName2VO = (String) map.get(102);
            log.info("roleName2VO = "+roleName2VO);
            assertEquals("roleName2VO is expected to be roleName1000-102","roleName1000-102",roleName2VO);

            String roleName3VO = (String) map.get(103);
            assertNull("roleName3VO is expected to be null ", roleName3VO);

            String roleName4VO = (String)  map.get(104);
            log.info("roleName4VO = "+roleName4VO);
            assertEquals("roleName4VO is expected to be roleName1000-104","roleName1000-104",roleName4VO );

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithCollectionNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithCollectionNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() **************");
    }


    @Test
    public void testBuildMapWithCollectionJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testBuildMapWithCollectionJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();
            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);
            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = bd.buildMap(personProjectVOs, "idPerson");

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            Integer idPerson1 = (Integer) map.get(101);
            log.info("idPerson1 = "+ idPerson1);
            assertEquals("idPerson1 is expected to be 101", new Integer(101), idPerson1);

            Integer idPerson2 = (Integer) map.get(102);
            log.info("idPerson2 = "+idPerson2);
            assertEquals("idPerson2 is expected to be 102", new Integer(102),idPerson2);

            Integer idPerson3 = (Integer) map.get(103);
            assertNull("idPerson3 is expected to be null ", idPerson3);

            Integer idPerson4 = (Integer) map.get(104);
            log.info("idPerson4 = "+idPerson4);
            assertEquals("idPerson4is expected to be 104", new Integer(104),idPerson4);

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testBuildMapWithCollectionJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testBuildMapWithCollectionJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() **************");
    }



    @Test
    public void testAddToMap(){
        log.info("************Entering the "+getThisClassName()+".testAddToMap() ***************");
        try{

            BD bd = getBD();


            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleTitle("roleTitle1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleTitle("roleTitle1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleTitle("roleTitle1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = new HashMap();

            RoleVO existing1RoleVO = new RoleVO();
            existing1RoleVO.setRoleName("existing1RoleVO");

            map.put(1101,existing1RoleVO);
            map.put(1102,null);

            map = bd.addToMap(projectVO,"personProjectVOs", map, "idPerson",true, "roleTitle", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(1101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be existing1RoleVO","existing1RoleVO",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(1102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleTitle1000-102","roleTitle1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(1103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(1104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleTitle1000-104","roleTitle1000-104",role4VO.getRoleName());


        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMap() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMap() **************");
    }

    @Test
    public void testAddToMapWithNoIsValueObjectKeyAttributeNameToSet(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithNoIsValueObjectKeyAttributeNameToSet() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleTitle("roleTitle1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleTitle("roleTitle1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleTitle("roleTitle1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = new HashMap();

            RoleVO existing1RoleVO = new RoleVO();
            existing1RoleVO.setRoleName("existing1RoleVO");

            map.put(101,existing1RoleVO);
            map.put(102,null);
            //map = bd.addToMap(projectVO,"personProjectVOs", map, "idPerson",true, "roleTitle", "roleName",  RoleVO.class);

            map = bd.addToMap(projectVO,"personProjectVOs", map, "idPerson", "roleTitle", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be existing1RoleVO","existing1RoleVO",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleTitle1000-102","roleTitle1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(103);
            assertNull("role3VO is expected to be null ", role3VO);

            RoleVO role4VO = (RoleVO) map.get(104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleTitle1000-104","roleTitle1000-104",role4VO.getRoleName());


        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithNoIsValueObjectKeyAttributeNameToSet() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithNoIsValueObjectKeyAttributeNameToSet() **************");
    }


    @Test
    public void testAddToMapJustFirstAttributeAndMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapJustFirstAttributeAndMapValueClass() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();
            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);
            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = new HashMap();

            PersonVO existing1PersonVO = new PersonVO();
            existing1PersonVO.setIdPerson(5000);

            map.put(101,existing1PersonVO);
            map.put(102,null);

            map = bd.addToMap(projectVO,"personProjectVOs",map, "idPerson", Boolean.FALSE, PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            PersonVO person1VO = (PersonVO) map.get(101);
            log.info("person1VO.getIdPerson() = "+person1VO.getIdPerson());
            assertEquals("person1VO.getIdPerson() is expected to be 5000", new Integer(5000),person1VO.getIdPerson());

            PersonVO person2VO = (PersonVO) map.get(102);
            log.info("person2VO.getIdPerson() = "+person2VO.getIdPerson());
            assertEquals("person2VO.getIdPerson() is expected to be 102", new Integer(102),person2VO.getIdPerson());

            PersonVO person3VO = (PersonVO) map.get(103);
            assertNull("person3VO is expected to be null ", person3VO);

            PersonVO person4VO = (PersonVO) map.get(104);
            log.info("person4VO.getIdPerson() = "+person4VO.getIdPerson());
            assertEquals("person4VO.getIdPerson() is expected to be 104", new Integer(104),person4VO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapJustFirstAttributeAndMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapJustFirstAttributeAndMapValueClass() **************");
    }



    @Test
    public void testAddToMapJustKeyAndValuetAttributeNameAndMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapJustKeyAndValuetAttributeNameAndMapValueClass() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);


            Map map = new HashMap();

            RoleVO existing1RoleVO = new RoleVO();
            existing1RoleVO.setRoleName("existing1RoleVO");

            map.put(101,existing1RoleVO);
            map.put(102,null);

            map = bd.addToMap(projectVO,"personProjectVOs", map, "idPerson", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be existing1RoleVO","existing1RoleVO",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleName1000-102","roleName1000-102",role2VO.getRoleName());

            RoleVO role3VO = (RoleVO) map.get(103);
            assertNull("role3VO is expected to be null ", role3VO);

            RoleVO role4VO = (RoleVO) map.get(104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleName1000-104","roleName1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapJustKeyAndValuetAttributeNameAndMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapJustKeyAndValuetAttributeNameAndMapValueClass() **************");
    }


    @Test
    public void testAddToMapWithEmptyCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithEmptyCollection() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(2000);
            projectVO.setTitle("title 2000");
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            PersonVO person1VO = new PersonVO();
            person1VO.setIdPerson(101);
            personProject1VO.setPersonVO(person1VO);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            PersonVO person2VO = new PersonVO();
            person2VO.setIdPerson(102);
            personProject2VO.setPersonVO(person2VO);


            PersonProjectVO personProject4VO = new PersonProjectVO();
            PersonVO person4VO = new PersonVO();
            person4VO.setIdPerson(104);
            personProject4VO.setPersonVO(person4VO);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Collection<String> trees = new ArrayList<String>();
            trees.add("personProjectVOs.personVO");

            bd.updateCreateTrees(projectVO,trees);

            ProjectVO testProjectVO =(ProjectVO) bd.findByPrimaryKey(ProjectVO.class,2000);
            testProjectVO.setPersonProjectVOs(new ArrayList<PersonProjectVO>());

            Map map = new HashMap();

            PersonVO existing1PersonVO = new PersonVO();
            existing1PersonVO.setIdPerson(5000);

            map.put(101,existing1PersonVO);
            map.put(102,null);


            map = bd.addToMap(testProjectVO,"personProjectVOs",map, "idPerson", Boolean.FALSE, PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 2",2,map.keySet().size());


            PersonVO testperson1VO = (PersonVO) map.get(101);
            log.info("testperson1VO.getIdPerson() = "+testperson1VO.getIdPerson());
            assertEquals("testperson1VO.getIdPerson() is expected to be 5000", new Integer(5000),testperson1VO.getIdPerson());

            PersonVO testperson2VO = (PersonVO) map.get(102);
            assertNull("testperson2VO is expected to be null", testperson2VO);

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithEmptyCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithEmptyCollection() **************");
    }



    @Test
    public void testAddToMapWithNullCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithNullCollection() ***************");

        try{

            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            projectVO.setTitle("title 1000");
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            PersonVO person1VO = new PersonVO();
            person1VO.setIdPerson(101);
            personProject1VO.setPersonVO(person1VO);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            PersonVO person2VO = new PersonVO();
            person2VO.setIdPerson(102);
            personProject2VO.setPersonVO(person2VO);


            PersonProjectVO personProject4VO = new PersonProjectVO();
            PersonVO person4VO = new PersonVO();
            person4VO.setIdPerson(104);
            personProject4VO.setPersonVO(person4VO);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Collection<String> trees = new ArrayList<String>();
            trees.add("personProjectVOs.personVO");

            bd.updateCreateTrees(projectVO,trees, Boolean.TRUE);

            ProjectVO testProjectVO =(ProjectVO) bd.findByPrimaryKey(ProjectVO.class,1000);
            //log.info("testProjectVO.getIdPerson() = "+testProjectVO.getPersonProjectVOs());

            testProjectVO.setPersonProjectVOs(null);

            Map map = new HashMap();

            PersonVO existing1PersonVO = new PersonVO();
            existing1PersonVO.setIdPerson(5000);

            map.put(101,existing1PersonVO);
            map.put(102,null);

            map = bd.addToMap(testProjectVO,"personProjectVOs", map,"idPerson", Boolean.FALSE, PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            PersonVO testPerson1VO = (PersonVO) map.get(101);
            log.info("testPerson1VO.getIdPerson() = "+testPerson1VO.getIdPerson());
            assertEquals("testPerson1VO.getIdPerson() is expected to be 5000", new Integer(5000),testPerson1VO.getIdPerson());

            PersonVO testPerson2VO = (PersonVO) map.get(102);
            log.info("testPerson2VO.getIdPerson() = "+testPerson2VO.getIdPerson());
            assertEquals("testPerson2VO.getIdPerson() is expected to be 102", new Integer(102),testPerson2VO.getIdPerson());

            PersonVO testPerson4VO = (PersonVO) map.get(104);
            log.info("testPerson4VO.getIdPerson() = "+testPerson4VO.getIdPerson());
            assertEquals("testPerson4VO.getIdPerson() is expected to be 104", new Integer(104),testPerson4VO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithNullCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithNullCollection() **************");
    }


    @Test
    public void testAddToMapWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);


            Map map = new HashMap();


            map.put(101,"existing1RoleName");
            map.put(102,null);


            map = bd.addToMap(projectVO,"personProjectVOs", map, "idPerson", "roleName");

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            String roleName1VO = (String) map.get(101);
            log.info("roleName1VO = "+roleName1VO);
            assertEquals("roleName1VO is expected to be existing1RoleName","existing1RoleName",roleName1VO);

            String roleName2VO = (String) map.get(102);
            log.info("roleName2VO = "+roleName2VO);
            assertEquals("roleName2VO is expected to be roleName1000-102","roleName1000-102",roleName2VO);

            String roleName3VO = (String) map.get(103);
            assertNull("roleName3VO is expected to be null ", roleName3VO);

            String roleName4VO = (String)  map.get(104);
            log.info("roleName4VO = "+roleName4VO);
            assertEquals("roleName4VO is expected to be roleName1000-104","roleName1000-104",roleName4VO );

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() **************");
    }


    @Test
    public void testAddToMapJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();
            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);
            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);


            Map map = new HashMap();

            map.put(101,new Integer(5000));
            map.put(102,null);

            map = bd.addToMap(projectVO,"personProjectVOs", map,"idPerson");

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            Integer idPerson1 = (Integer) map.get(101);
            log.info("idPerson1 = "+ idPerson1);
            assertEquals("idPerson1 is expected to be 5000", new Integer(5000), idPerson1);

            Integer idPerson2 = (Integer) map.get(102);
            log.info("idPerson2 = "+idPerson2);
            assertEquals("idPerson2 is expected to be 102", new Integer(102),idPerson2);

            Integer idPerson3 = (Integer) map.get(103);
            assertNull("idPerson3 is expected to be null ", idPerson3);

            Integer idPerson4 = (Integer) map.get(104);
            log.info("idPerson4 = "+idPerson4);
            assertEquals("idPerson4is expected to be 104", new Integer(104),idPerson4);



        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() **************");
    }


    @Test
    public void testAddToMapWithCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithCollection() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleTitle("roleTitle1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleTitle("roleTitle1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleTitle("roleTitle1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = new HashMap();

            RoleVO existing1RoleVO = new RoleVO();
            existing1RoleVO.setRoleName("existing1RoleVO");

            map.put(1101,existing1RoleVO);
            map.put(1102,null);


            map = bd.addToMap(personProjectVOs, map, "idPerson", true, "roleTitle", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(1101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be existing1RoleVO","existing1RoleVO",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(1102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleTitle1000-102","roleTitle1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(1103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(1104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleTitle1000-104","roleTitle1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithCollection() **************");
    }

    @Test
    public void testAddToMapWithCollectionNoMapAttribute(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithCollectionNoMapAttribute() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            Map map = new HashMap();

            RoleVO existing1RoleVO = new RoleVO();
            existing1RoleVO.setRoleName("existing1RoleVO");

            map.put(1101,existing1RoleVO);
            map.put(1102,null);

            map = bd.addToMap(personProjectVOs,map, "idPerson",true, "roleName", RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(1101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be existing1RoleVO","existing1RoleVO",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(1102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleName1000-102","roleName1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(1103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(1104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleName1000-104","roleName1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithCollectionNoMapAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithCollectionNoMapAttribute() **************");
    }

    @Test
    public void testAddToMapWithCollectionNoValueNoMapAttribute(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithCollectionNoValueNoMapAttribute() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            Map map = new HashMap();

            PersonVO existing1PersonVO = new PersonVO();
            existing1PersonVO.setIdPerson(5000);

            map.put(101,existing1PersonVO);
            map.put(102,null);

            map = bd.addToMap(personProjectVOs, map, "idPerson",false,  PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            PersonVO person1VO = (PersonVO) map.get(101);
            log.info("person1VO.getIdPerson() = "+person1VO.getIdPerson());
            assertEquals("person1VO.getIdPerson() is expected to be 5000",new Integer(5000),person1VO.getIdPerson());

            PersonVO person2VO = (PersonVO) map.get(102);
            log.info("person2VO.getIdPerson() = "+person2VO.getIdPerson());
            assertEquals("person2VO.getIdPerson() is expected to be 102",new Integer(102),person2VO.getIdPerson());

            PersonVO person3VO = (PersonVO)map.get(103);
            assertNull("person3VO is expected to be null ", person3VO);

            PersonVO person4VO = (PersonVO) map.get(104);
            log.info("person4VO.getIdPerson() = "+person4VO.getIdPerson());
            assertEquals("person4VO.getIdPerson() is expected to be 104",new Integer(104),person4VO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithCollectionNoValueNoMapAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithCollectionNoValueNoMapAttribute() **************");
    }


    @Test
    public void testAddToMapWithCollectionNoIsKeyToSet(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithCollectionNoIsKeyToSet() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleTitle("roleTitle1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleTitle("roleTitle1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleTitle("roleTitle1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = new HashMap();

            RoleVO existing1RoleVO = new RoleVO();
            existing1RoleVO.setRoleName("existing1RoleVO");

            map.put(101,existing1RoleVO);
            map.put(102,null);

            map = bd.addToMap(personProjectVOs, map, "idPerson", "roleTitle", "roleName",  RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be existing1RoleVO","existing1RoleVO",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleTitle1000-102","roleTitle1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleTitle1000-104","roleTitle1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithCollectionNoIsKeyToSet() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithCollectionNoIsKeyToSet() **************");
    }


    @Test
    public void testAddToMapWithCollectionNoIsKeyNoMapAttribute(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithCollectionNoIsKeyNoMapAttribute() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            Map map = new HashMap();

            RoleVO existing1RoleVO = new RoleVO();
            existing1RoleVO.setRoleName("existing1RoleVO");

            map.put(101,existing1RoleVO);
            map.put(102,null);

            map = bd.addToMap(personProjectVOs, map, "idPerson", "roleName", RoleVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            RoleVO role1VO = (RoleVO) map.get(101);
            log.info("role1VO.getRoleName() = "+role1VO.getRoleName());
            assertEquals("role1VO.getRoleName() is expected to be existing1RoleVO","existing1RoleVO",role1VO.getRoleName());

            RoleVO role2VO = (RoleVO) map.get(102);
            log.info("role2VO.getRoleName() = "+role2VO.getRoleName());
            assertEquals("role2VO.getRoleName() is expected to be roleName1000-102","roleName1000-102",role2VO.getRoleName());


            RoleVO role3VO = (RoleVO) map.get(103);
            assertNull("role3VO is expected to be null ", role3VO);
            assertNull("map.get(103)  is expected to be null ",  map.get(103));

            RoleVO role4VO = (RoleVO) map.get(104);
            log.info("role4VO.getRoleName() = "+role4VO.getRoleName());
            assertEquals("role4VO.getRoleName() is expected to be roleName1000-104","roleName1000-104",role4VO.getRoleName());
        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithCollectionNoIsKeyNoMapAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithCollectionNoIsKeyNoMapAttribute() **************");
    }



    @Test
    public void testAddToMapWithCollectionNoIsKeyToSetNoValueNoMapAttribute(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithCollectionNoIsKeyToSetNoValueNoMapAttribute() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            Map map = new HashMap();

            PersonVO existing1PersonVO = new PersonVO();
            existing1PersonVO.setIdPerson(5000);

            map.put(101,existing1PersonVO);
            map.put(102,null);


            map = bd.addToMap(personProjectVOs, map, "idPerson",  PersonVO.class);

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            PersonVO person1VO = (PersonVO) map.get(101);
            log.info("person1VO.getIdPerson() = "+person1VO.getIdPerson());
            assertEquals("person1VO.getIdPerson() is expected to be 5000",new Integer(5000),person1VO.getIdPerson());

            PersonVO person2VO = (PersonVO) map.get(102);
            log.info("person2VO.getIdPerson() = "+person2VO.getIdPerson());
            assertEquals("person2VO.getIdPerson() is expected to be 102",new Integer(102),person2VO.getIdPerson());

            PersonVO person3VO = (PersonVO)map.get(103);
            assertNull("person3VO is expected to be null ", person3VO);

            PersonVO person4VO = (PersonVO) map.get(104);
            log.info("person4VO.getIdPerson() = "+person4VO.getIdPerson());
            assertEquals("person4VO.getIdPerson() is expected to be 104",new Integer(104),person4VO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithCollectionNoIsKeyToSetNoValueNoMapAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithCollectionNoIsKeyToSetNoValueNoMapAttribute() **************");
    }

    @Test
    public void testAddToMapWithCollectionNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithCollectionNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            Map map = new HashMap();


            map.put(101,"existing1RoleName");
            map.put(102,null);

            map = bd.addToMap(personProjectVOs,map, "idPerson", "roleName");

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            String roleName1VO = (String) map.get(101);
            log.info("roleName1VO = "+roleName1VO);
            assertEquals("roleName1VO is expected to beexisting1RoleName","existing1RoleName",roleName1VO);

            String roleName2VO = (String) map.get(102);
            log.info("roleName2VO = "+roleName2VO);
            assertEquals("roleName2VO is expected to be roleName1000-102","roleName1000-102",roleName2VO);

            String roleName3VO = (String) map.get(103);
            assertNull("roleName3VO is expected to be null ", roleName3VO);

            String roleName4VO = (String)  map.get(104);
            log.info("roleName4VO = "+roleName4VO);
            assertEquals("roleName4VO is expected to be roleName1000-104","roleName1000-104",roleName4VO );

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithCollectionNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithCollectionNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() **************");
    }


    @Test
    public void testAddToMapWithCollectionJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass(){
        log.info("************Entering the "+getThisClassName()+".testAddToMapWithCollectionJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();
            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);
            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            Map map = new HashMap();

            map.put(101,new Integer(5000));
            map.put(102,null);

            map = bd.addToMap(personProjectVOs,map, "idPerson");

            log.info("map.keySet().size() = "+map.keySet().size());
            assertEquals("map.keySet().size() expected is 3",3,map.keySet().size());

            Integer idPerson1 = (Integer) map.get(101);
            log.info("idPerson1 = "+ idPerson1);
            assertEquals("idPerson1 is expected to be 5000", new Integer(5000), idPerson1);

            Integer idPerson2 = (Integer) map.get(102);
            log.info("idPerson2 = "+idPerson2);
            assertEquals("idPerson2 is expected to be 102", new Integer(102),idPerson2);

            Integer idPerson3 = (Integer) map.get(103);
            assertNull("idPerson3 is expected to be null ", idPerson3);

            Integer idPerson4 = (Integer) map.get(104);
            log.info("idPerson4 = "+idPerson4);
            assertEquals("idPerson4is expected to be 104", new Integer(104),idPerson4);

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testAddToMapWithCollectionJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToMapWithCollectionJustKeyAttributeAndWithNoIsValueObjectKeyAttributeNameToSetAndWithoutMapValueClass() **************");
    }



    @Test
    public void testUpdateCollectionWithMap(){
        log.info("************Entering the "+getThisClassName()+".testUpdateCollectionWithMap() ***************");
        try{
            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);


            Map map = new HashMap();


            map.put(101,"roleName1FromMap");
            map.put(102,null);
            map.put(105,"roleName5FromMap");

            bd.updateCollectionWithMap(projectVO,"personProjectVOs", map, "idPerson", "roleName");


            log.info("personProject1VO.getRoleName() = "+personProject1VO.getRoleName());
            assertEquals("personProject1VO.getRoleName() is expected to be roleName1FromMap","roleName1FromMap",personProject1VO.getRoleName());

            assertNull("personProject2VO.getRoleName() is expected to be null",personProject2VO.getRoleName());

            log.info("personProject4VO.getRoleName() = "+personProject4VO.getRoleName());
            assertEquals("personProject4VO.getRoleName() is expected to be roleName1000-104","roleName1000-104",personProject4VO.getRoleName() );

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testUpdateCollectionWithMap() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testUpdateCollectionWithMap() **************");
    }


    @Test
    public void testUpdateCollectionWithMapNoValueAttribute(){
        log.info("************Entering the "+getThisClassName()+".testUpdateCollectionWithMapNoValueAttribute() ***************");

        try{

            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            projectVO.setTitle("title 1000");
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);


            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Map map = new HashMap();



            map.put(101,new Integer(5000));
            map.put(102,null);
            map.put(105,new Integer(105));

            bd.updateCollectionWithMap(projectVO,"personProjectVOs", map,"idPerson");


            log.info("personProject1VO.getIdPerson() = "+personProject1VO.getIdPerson());
            assertEquals("personProject1VO.getIdPerson() is expected to be 5000", new Integer(5000),personProject1VO.getIdPerson());

            assertNull("personProject2VO.getIdPerson() is expected to be null", personProject2VO.getIdPerson());

            log.info("personProject4VO.getIdPerson() = "+personProject4VO.getIdPerson());
            assertEquals("personProject4VO.getIdPerson() is expected to be 104", new Integer(104),personProject4VO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testUpdateCollectionWithMapNoValueAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testUpdateCollectionWithMapNoValueAttribute() **************");
    }


    @Test
    public void testUpdateCollectionWithMapNullCollectionNoValueAttribute(){
        log.info("************Entering the "+getThisClassName()+".testUpdateCollectionWithMapNullCollectionNoValueAttribute() ***************");

        try{

            BD bd = getBD();

            ProjectVO projectVO = new ProjectVO();
            projectVO.setIdProject(1000);
            projectVO.setTitle("title 1000");
            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            PersonVO person1VO = new PersonVO();
            person1VO.setIdPerson(101);
            personProject1VO.setPersonVO(person1VO);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            PersonVO person2VO = new PersonVO();
            person2VO.setIdPerson(102);
            personProject2VO.setPersonVO(person2VO);


            PersonProjectVO personProject4VO = new PersonProjectVO();
            PersonVO person4VO = new PersonVO();
            person4VO.setIdPerson(104);
            personProject4VO.setPersonVO(person4VO);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject4VO);

            projectVO.setPersonProjectVOs(personProjectVOs);

            Collection<String> trees = new ArrayList<String>();
            trees.add("personProjectVOs.personVO");

            bd.updateCreateTrees(projectVO,trees, Boolean.TRUE);

            ProjectVO testProjectVO =(ProjectVO) bd.findByPrimaryKey(ProjectVO.class,1000);
            //log.info("testProjectVO.getIdPerson() = "+testProjectVO.getPersonProjectVOs());

            testProjectVO.setPersonProjectVOs(null);

            Map map = new HashMap();



            map.put(101,new Integer(5000));
            map.put(102,null);
            map.put(105,new Integer(105));

            bd.updateCollectionWithMap(testProjectVO,"personProjectVOs", map,"idPerson");



            Collection<PersonProjectVO> testPersonProjectVOs = testProjectVO.getPersonProjectVOs();

            log.info("testPersonProjectVOs.size() = "+testPersonProjectVOs.size());
            assertEquals("testPersonProjectVOs expected is 3",3,testPersonProjectVOs.size());

            Iterator<PersonProjectVO>  testPersonProjectVOsIterator = testPersonProjectVOs.iterator();

            PersonProjectVO test1PersonProjectVO = testPersonProjectVOsIterator.next();
            PersonProjectVO test2PersonProjectVO = testPersonProjectVOsIterator.next();
            PersonProjectVO test4PersonProjectVO = testPersonProjectVOsIterator.next();




            log.info("test1PersonProjectVO.getIdPerson() = "+test1PersonProjectVO.getIdPerson());
            assertEquals("test1PersonProjectVO.getIdPerson() is expected to be 5000", new Integer(5000),test1PersonProjectVO.getIdPerson());

            assertNull("test2PersonProjectVO.getIdPerson() is expected to be null", test2PersonProjectVO.getIdPerson());

            log.info("test4PersonProjectVO.getIdPerson() = "+test4PersonProjectVO.getIdPerson());
            assertEquals("test4PersonProjectVO.getIdPerson() is expected to be 104", new Integer(104),test4PersonProjectVO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testUpdateCollectionWithMapNullCollectionNoValueAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testUpdateCollectionWithMapNullCollectionNoValueAttribute() **************");
    }

    @Test
    public void testUpdateCollectionWithMapCollection(){
        log.info("************Entering the "+getThisClassName()+".testUpdateCollectionWithMapCollection() ***************");
        try{
            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);
            personProject1VO.setRoleName("roleName1000-101");

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);
            personProject2VO.setRoleName("roleName1000-102");

            PersonProjectVO personProject3VO = new PersonProjectVO();
            personProject3VO.setIdPerson(null);

            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);
            personProject4VO.setRoleName("roleName1000-104");

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject3VO);
            personProjectVOs.add(personProject4VO);


            Map map = new HashMap();


            map.put(101,"roleName1FromMap");
            map.put(102,null);
            map.put(105,"roleName5FromMap");

            bd.updateCollectionWithMap(personProjectVOs, map, "idPerson", "roleName");


            log.info("personProject1VO.getRoleName() = "+personProject1VO.getRoleName());
            assertEquals("personProject1VO.getRoleName() is expected to be roleName1FromMap","roleName1FromMap",personProject1VO.getRoleName());

            assertNull("personProject2VO.getRoleName() is expected to be null",personProject2VO.getRoleName());

            log.info("personProject4VO.getRoleName() = "+personProject4VO.getRoleName());
            assertEquals("personProject4VO.getRoleName() is expected to be roleName1000-104","roleName1000-104",personProject4VO.getRoleName() );

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testUpdateCollectionWithMapCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testUpdateCollectionWithMapCollection() **************");
    }


    @Test
    public void testUpdateCollectionWithMapCollectionNoValueAttribute(){
        log.info("************Entering the "+getThisClassName()+".testUpdateCollectionWithMapCollectionNoValueAttribute() ***************");
        try{

            BD bd = getBD();

            Collection<PersonProjectVO> personProjectVOs = new ArrayList<PersonProjectVO>();

            PersonProjectVO personProject1VO = new PersonProjectVO();
            personProject1VO.setIdPerson(101);

            PersonProjectVO personProject2VO = new PersonProjectVO();
            personProject2VO.setIdPerson(102);


            PersonProjectVO personProject4VO = new PersonProjectVO();
            personProject4VO.setIdPerson(104);

            personProjectVOs.add(personProject1VO);
            personProjectVOs.add(personProject2VO);
            personProjectVOs.add(personProject4VO);

            Map map = new HashMap();

            map.put(101,new Integer(5000));
            map.put(102,null);
            map.put(105,new Integer(105));

            bd.updateCollectionWithMap(personProjectVOs, map,"idPerson");


            log.info("personProject1VO.getIdPerson() = "+personProject1VO.getIdPerson());
            assertEquals("personProject1VO.getIdPerson() is expected to be 5000", new Integer(5000),personProject1VO.getIdPerson());

            assertNull("personProject2VO.getIdPerson() is expected to be null", personProject2VO.getIdPerson());

            log.info("personProject4VO.getIdPerson() = "+personProject4VO.getIdPerson());
            assertEquals("personProject4VO.getIdPerson() is expected to be 104", new Integer(104),personProject4VO.getIdPerson());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testUpdateCollectionWithMapCollectionNoValueAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testUpdateCollectionWithMapCollectionNoValueAttribute() **************");
    }


    @Test
    public void testRetrieveTreeLeaves(){
        log.info("************Entering the "+getThisClassName()+".testRetrieveTreeLeaves() ***************");
        try{

            BD bd = getBD();

            Path11VO l12321121211Path11VO = new Path11VO();
            l12321121211Path11VO.setIdPath11("l12321121211Path11");
            l12321121211Path11VO.setDescription("description of l12321121211Path11");

            Path10VO l1232112121Path10VO= new Path10VO();
            l1232112121Path10VO.setIdPath10("l1232112121Path10");
            l1232112121Path10VO.setDescription("description of l1232112121Path10");
            l1232112121Path10VO.setPath11VO(l12321121211Path11VO);

            Path9VO l123211212Path9VO  = new Path9VO();
            l123211212Path9VO.setIdPath9("l123211212Path9");
            l123211212Path9VO.setDescription("description of l123211212Path9");
            l123211212Path9VO.setPath10VO(l1232112121Path10VO);

            Path10VO l1232112111Path10VO = new Path10VO();
            l1232112111Path10VO.setIdPath10("l1232112111Path10");

            Path9VO l123211211Path9VO    = new  Path9VO();
            l123211211Path9VO.setIdPath9("l123211211Path9");
            l123211211Path9VO.setPath10VO(l1232112111Path10VO);

            Path8VO l12321121Path8VO = new Path8VO();
            l12321121Path8VO.setIdPath8("l12321121Path8");
            ArrayList<Path9VO>  l12321121Path8Path9VOs = new ArrayList<Path9VO>();
            l12321121Path8Path9VOs.add(l123211212Path9VO);
            l12321121Path8Path9VOs.add(l123211211Path9VO);
            l12321121Path8VO.setPath9VOs(l12321121Path8Path9VOs);


            Path8VO l12321122Path8VO = new Path8VO();
            l12321122Path8VO.setIdPath8("l12321122Path8");


            Path7VO l1232112Path7VO = new Path7VO();
            l1232112Path7VO.setIdPath7("l1232112Path7");
            ArrayList<Path8VO> l1232112Path7Path8VOs = new ArrayList<Path8VO>();
            l1232112Path7Path8VOs.add(l12321122Path8VO);
            l1232112Path7Path8VOs.add(l12321121Path8VO);
            l1232112Path7VO.setPath8VOs(l1232112Path7Path8VOs);



            Path11VO l12321131211Path11VO = new Path11VO();
            l12321131211Path11VO.setIdPath11("l12321131211Path11");

            Path10VO l1232113121Path10VO    = new Path10VO();
            l1232113121Path10VO.setIdPath10("l1232113121Path10");
            l1232113121Path10VO.setPath11VO(l12321131211Path11VO);

            Path9VO l123211312Path9VO = new Path9VO();
            l123211312Path9VO.setIdPath9("l123211312Path9");
            l123211312Path9VO.setPath10VO(l1232113121Path10VO);


            Path10VO l1232113111Path10VO = new Path10VO();
            l1232113111Path10VO.setIdPath10("l1232113111Path10");

            Path9VO l123211311Path9VO = new Path9VO();
            l123211311Path9VO.setIdPath9("l123211311Path9");
            l123211311Path9VO.setPath10VO(l1232113111Path10VO);

            Path8VO l12321131Path8VO= new Path8VO();
            l12321131Path8VO.setIdPath8("l12321131Path8");
            ArrayList<Path9VO> l12321131Path8Path9VOs = new ArrayList<Path9VO>();
            l12321131Path8Path9VOs.add(l123211311Path9VO);
            l12321131Path8Path9VOs.add(l123211312Path9VO);
            l12321131Path8VO.setPath9VOs(l12321131Path8Path9VOs);



            Path7VO l1232113Path7VO = new Path7VO();
            l1232113Path7VO.setIdPath7("l1232113Path7");
            ArrayList<Path8VO>  l1232113Path7Path8VOs = new  ArrayList<Path8VO>();
            l1232113Path7Path8VOs.add(l12321131Path8VO) ;
            l1232113Path7VO.setPath8VOs(l1232113Path7Path8VOs);



            Path7VO l1232111Path7VO = new Path7VO();
            l1232111Path7VO.setIdPath7("l1232111Path7");



            Path6VO l123211Path6VO = new Path6VO();
            l123211Path6VO.setIdPath6("l123211Path6");
            ArrayList<Path7VO> l123211Path6Path7VOs = new ArrayList<Path7VO>();
            l123211Path6Path7VOs.add(l1232111Path7VO) ;
            l123211Path6Path7VOs.add(l1232113Path7VO) ;
            l123211Path6Path7VOs.add(l1232112Path7VO) ;
            l123211Path6VO.setPath7VOs(l123211Path6Path7VOs);


            Path5VO l12321Path5VO =new Path5VO();
            l12321Path5VO.setIdPath5("l12321Path5");
            l12321Path5VO.setPath6VO(l123211Path6VO);


            Path4VO l1232Path4VO = new Path4VO();
            l1232Path4VO.setIdPath4("l1232Path4");
            l1232Path4VO.setPath5VO(l12321Path5VO);

            Path4VO l1231Path4VO = new Path4VO();
            l1231Path4VO.setIdPath4("l1231Path4");


            Path3VO l123Path3VO= new Path3VO();
            l123Path3VO.setIdPath3("l123Path3");
            ArrayList<Path4VO> l123Path3Path4VOs = new ArrayList<Path4VO>();
            l123Path3Path4VOs.add(l1231Path4VO);
            l123Path3Path4VOs.add(l1232Path4VO);
            l123Path3VO.setPath4VOs(l123Path3Path4VOs);



            Path5VO l12221Path5VO  = new Path5VO();
            l12221Path5VO.setIdPath5("l12221Path5");

            Path4VO l1222Path4VO = new Path4VO();
            l1222Path4VO.setIdPath4("l1222Path4");
            l1222Path4VO.setPath5VO(l12221Path5VO);


            Path4VO l1221Path4VO = new Path4VO();
            l1221Path4VO.setIdPath4("l1221Path4");

            Path3VO l122Path3VO = new Path3VO();
            l122Path3VO.setIdPath3("l122Path3");
            ArrayList<Path4VO> l122Path3Path4VOs = new ArrayList<Path4VO>();
            l122Path3Path4VOs.add(l1221Path4VO);
            l122Path3Path4VOs.add(l1222Path4VO);
            l122Path3VO.setPath4VOs(l122Path3Path4VOs);


            Path3VO l121Path3VO = new Path3VO();
            l121Path3VO.setIdPath3("l121Path3");


            Path2VO l12Path2VO = new Path2VO();
            l12Path2VO.setIdPath2("l12Path2");
            ArrayList<Path3VO> l12Path2Path3VOs = new ArrayList<Path3VO>();
            l12Path2Path3VOs.add(l121Path3VO);
            l12Path2Path3VOs.add(l122Path3VO);
            l12Path2Path3VOs.add(l123Path3VO);
            l12Path2VO.setPath3VOs(l12Path2Path3VOs);






            Path11VO l13231112111Path11VO  = new Path11VO();
            l13231112111Path11VO.setIdPath11("l13231112111Path11");

            Path10VO l1323111211Path10VO = new Path10VO();
            l1323111211Path10VO.setIdPath10("l1323111211Path10");
            l1323111211Path10VO.setPath11VO(l13231112111Path11VO);

            Path9VO l132311121Path9VO = new Path9VO();
            l132311121Path9VO.setIdPath9("l132311121Path9");
            l132311121Path9VO.setPath10VO(l1323111211Path10VO);

            Path10VO l1323111221Path10VO = new Path10VO();
            l1323111221Path10VO.setIdPath10("l1323111221Path10");

            Path9VO l132311122Path9VO = new Path9VO();
            l132311122Path9VO.setIdPath9("l132311122Path9");
            l132311122Path9VO.setPath10VO(l1323111221Path10VO);

            Path8VO l13231112Path8VO = new Path8VO();
            l13231112Path8VO.setIdPath8("l13231112Path8");
            ArrayList<Path9VO> l13231112Path8Path9VOs = new ArrayList<Path9VO>();
            l13231112Path8Path9VOs.add(l132311122Path9VO);
            l13231112Path8Path9VOs.add(l132311121Path9VO);
            l13231112Path8VO.setPath9VOs(l13231112Path8Path9VOs);

            Path8VO l13231111Path8VO = new Path8VO();
            l13231111Path8VO.setIdPath8("l13231111Path8");

            Path7VO l1323111Path7VO= new Path7VO();
            l1323111Path7VO.setIdPath7("l1323111Path7");
            ArrayList<Path8VO> l1323111Path7Path8VOs = new ArrayList<Path8VO>();
            l1323111Path7Path8VOs.add(l13231111Path8VO);
            l1323111Path7Path8VOs.add(l13231112Path8VO);
            l1323111Path7VO.setPath8VOs(l1323111Path7Path8VOs);


            Path7VO l1323112Path7VO = new Path7VO();
            l1323112Path7VO.setIdPath7("l1323112Path7");


            Path6VO l132311Path6VO = new Path6VO();
            l132311Path6VO.setIdPath6("l132311Path6");
            ArrayList<Path7VO> l132311Path6Path7VOs = new ArrayList<Path7VO>();
            l132311Path6Path7VOs.add(l1323112Path7VO);
            l132311Path6Path7VOs.add(l1323111Path7VO);
            l132311Path6VO.setPath7VOs(l132311Path6Path7VOs);  //added ******

            Path5VO l13231Path5VO = new Path5VO();
            l13231Path5VO.setIdPath5("l13231Path5");
            l13231Path5VO.setPath6VO(l132311Path6VO);

            Path4VO l1323Path4VO    = new Path4VO();
            l1323Path4VO.setIdPath4("l1323Path4");
            l1323Path4VO.setPath5VO(l13231Path5VO);

            Path5VO l13221Path5VO = new Path5VO();
            l13221Path5VO.setIdPath5("l13221Path5");


            Path4VO l1322Path4VO = new Path4VO();
            l1322Path4VO.setIdPath4("l1322Path4");
            l1322Path4VO.setPath5VO(l13221Path5VO);

            Path4VO l1321Path4VO = new Path4VO();
            l1321Path4VO.setIdPath4("l1321Path4");


            Path3VO l132Path3VO = new Path3VO();
            l132Path3VO.setIdPath3("l132Path3");
            ArrayList<Path4VO> l132Path3Path4VOs = new ArrayList<Path4VO>();
            l132Path3Path4VOs.add(l1321Path4VO);
            l132Path3Path4VOs.add(l1322Path4VO);
            l132Path3Path4VOs.add(l1323Path4VO);
            l132Path3VO.setPath4VOs(l132Path3Path4VOs);


            Path4VO l1311Path4VO = new Path4VO();
            l1311Path4VO.setIdPath4("l1311Path4");


            Path3VO l131Path3VO = new Path3VO();
            l131Path3VO.setIdPath3("l131Path3");
            ArrayList<Path4VO>  l131Path3Path4VOs = new ArrayList<Path4VO>();
            l131Path3Path4VOs.add(l1311Path4VO);
            l131Path3VO.setPath4VOs(l131Path3Path4VOs);

            Path2VO l13Path2VO = new Path2VO();
            l13Path2VO.setIdPath2("l13Path2");
            ArrayList<Path3VO> l13Path2Path3VOs = new ArrayList<Path3VO>();
            l13Path2Path3VOs.add(l131Path3VO);
            l13Path2Path3VOs.add(l132Path3VO);
            l13Path2VO.setPath3VOs(l13Path2Path3VOs);

            Path2VO l11Path2VO = new Path2VO();
            l11Path2VO.setIdPath2("l11Path2");

            Path1VO l1Path1VO = new Path1VO();
            l1Path1VO.setIdPath1("l1Path1");
            ArrayList<Path2VO> l1Path1Path2VOs = new ArrayList<Path2VO>();
            l1Path1Path2VOs.add(l11Path2VO);
            l1Path1Path2VOs.add(l13Path2VO);
            l1Path1Path2VOs.add(l12Path2VO);
            l1Path1VO.setPath2VOs(l1Path1Path2VOs);



            Path0VO lPath0VO = new Path0VO();
            lPath0VO.setIdPath0("lPath0");
            lPath0VO.setDescription("description of lPath0");
            lPath0VO.setPath1VO(l1Path1VO);

            Collection<String> trees = new ArrayList<String>();
            trees.add("path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO.path7VOs.path8VOs.path9VOs.path10VO.path11VO");
            bd.updateCreateTrees(lPath0VO,trees);

            Path0VO testlPath0VO = new Path0VO();
            testlPath0VO.setIdPath0("lPath0");
            testlPath0VO.setIdPath1("l1Path1");
            Collection treeLeaves = bd.retrieveTreeLeaves(testlPath0VO,"path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO.path7VOs.path8VOs.path9VOs.path10VO.path11VO");



            log.info("treeLeaves.size() = "+treeLeaves.size());
            assertEquals("treeLeaves.size() expected is 3",3,treeLeaves.size());

            Iterator treeLeavesIterator = treeLeaves.iterator();

            Path11VO testl12321121211Path11VO = (Path11VO) treeLeavesIterator.next();
            Path11VO testl12321131211Path11VO = (Path11VO) treeLeavesIterator.next();
            Path11VO testl13231112111Path11VO = (Path11VO) treeLeavesIterator.next();


            log.info("testl12321121211Path11VO.getIdPath11() = "+testl12321121211Path11VO.getIdPath11());
            assertEquals("testl12321121211Path11VO.getIdPath11() is expected to be l12321121211Path11","l12321121211Path11",testl12321121211Path11VO.getIdPath11());

            log.info("testl12321131211Path11VO.getIdPath11() = "+testl12321131211Path11VO.getIdPath11());
            assertEquals("testl12321131211Path11VO.getIdPath11() is expected to be l12321131211Path11","l12321131211Path11",testl12321131211Path11VO.getIdPath11());

            log.info("testl13231112111Path11VO.getIdPath11() = "+testl13231112111Path11VO.getIdPath11());
            assertEquals("testl13231112111Path11VO.getIdPath11() is expected to be l13231112111Path11","l13231112111Path11",testl13231112111Path11VO.getIdPath11());

        }catch (Exception e) {
            assertTrue("Exception thrown in in "+getThisClassName()+".testRetrieveTreeLeaves() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetrieveTreeLeaves() **************");
    }


    @Test public void testRetrieveNullPathTreeLeaves(){
        log.info("************Entering the "+getThisClassName()+".testRetrieveNullPathTreeLeaves() ***************");
        try{
            BD bd = getBD();
            ProjectVO projectVO = (ProjectVO) bd.findByPrimaryKey(ProjectVO.class,new Integer(1));
            PersonProjectVO personProjectVO1 = (PersonProjectVO)bd.findByPrimaryKey(PersonProjectVO.class,new Object[]{new Integer(1),new Integer(1)});
            bd.retrievePathReference(projectVO,"personProjectVOs");
            projectVO.getPersonProjectVOs().clear();
            projectVO.getPersonProjectVOs().add(personProjectVO1);


            Collection treeLeaves = bd.retrieveNullPathTreeLeaves(projectVO, "personProjectVOs.personVO.personRoleVOs.roleVO");
            log.info("testRetrieveNullPathTreeLeaves :treeLeaves.size() = "+treeLeaves.size());
            assertEquals("testRetrieveNullPathTreeLeaves: treeLeaves.size() expected is 2",2,treeLeaves.size());
            Iterator treeLeavesIterator = treeLeaves.iterator();

            RoleVO roleVO1_1 = (RoleVO) treeLeavesIterator.next();
            RoleVO roleVO1_3 = (RoleVO) treeLeavesIterator.next();

            log.info("roleVO1_1.idRole= "+roleVO1_1.getIdRole());
            log.info("roleVO1_1.roleName= "+roleVO1_1.getRoleName());
            assertEquals("roleVO1_1.idRole expected is 1",new Integer(1),roleVO1_1.getIdRole());
            assertEquals("roleVO1_1.roleName expected is junior programmer","junior programmer",roleVO1_1.getRoleName());

            log.info("roleVO1_3.idRole= "+roleVO1_3.getIdRole());
            log.info("roleVO1_3.roleName= "+roleVO1_3.getRoleName());
            assertEquals("roleVO1_3.idRole expected is 3",new Integer(3),roleVO1_3.getIdRole());
            assertEquals("roleVO1_3.roleName expected is analist programmer","analist programmer",roleVO1_3.getRoleName());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetrieveNullPathTreeLeaves() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetrieveNullPathTreeLeaves() **************");
    }



    @Test public void testAddToRetainInCollectionTreeLeaves(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeLeaves() ***************");
        try{
            BD bd = getBD();

            StoreVO aStoreVO = new StoreVO();
            aStoreVO.setIdStore("a");
            aStoreVO.setIdAdministration("admin");

            CategoryVO cat1VO = new CategoryVO();
            cat1VO.setIdCategory("cat1");
            CategoryVO cat2VO = new CategoryVO();
            cat1VO.setIdCategory("cat2");
            CategoryVO cat3VO = new CategoryVO();
            cat1VO.setIdCategory("cat3");

            ArrayList<CategoryVO> aStoreCategoryVOs = new ArrayList<CategoryVO>();
            aStoreCategoryVOs.add(cat1VO);
            aStoreCategoryVOs.add(cat2VO);
            aStoreCategoryVOs.add(cat3VO);

            aStoreVO.setCategoryVOs(aStoreCategoryVOs);

            SubCategoryVO subCat11 = new SubCategoryVO();
            subCat11.setIdCategory("cat1");
            subCat11.setIdSubCategory("subCat1");

            SubCategoryVO subCat12 = new SubCategoryVO();
            subCat12.setIdCategory("cat1");
            subCat12.setIdSubCategory("subCat2");

            SubCategoryVO subCat13 = new SubCategoryVO();
            subCat13.setIdCategory("cat1");
            subCat13.setIdSubCategory("subCat3");

            ArrayList<SubCategoryVO> cat1SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat1SubCategoryVOs.add(subCat11);
            cat1SubCategoryVOs.add(subCat12);
            cat1SubCategoryVOs.add(subCat13);

            cat1VO.setSubCategoryVOs(cat1SubCategoryVOs);

            ProductVO prod121VO = new ProductVO();
            prod121VO.setIdCategory("cat1");
            prod121VO.setIdSubCategory("subCat2");
            prod121VO.setIdProduct("prod1");
            prod121VO.setProductDescription("productDescription121");

            ProductVO prod122VO = new ProductVO();
            prod122VO.setIdCategory("cat1");
            prod122VO.setIdSubCategory("subCat2");
            prod122VO.setIdProduct("prod2");
            prod122VO.setProductDescription("productDescription122");

            ArrayList<ProductVO> subCat12ProductVOs= new ArrayList<ProductVO>();
            subCat12ProductVOs.add(prod121VO);
            subCat12ProductVOs.add(prod122VO);
            subCat12.setProductVOs(subCat12ProductVOs);


            ProductVO prod131VO = new ProductVO();
            prod131VO.setIdCategory("cat1");
            prod131VO.setIdSubCategory("subCat3");
            prod131VO.setIdProduct("prod1");
            prod131VO.setProductDescription("productDescription131");

            ArrayList<ProductVO> subCat13ProductVOs= new ArrayList<ProductVO>();
            subCat13ProductVOs.add(prod131VO);
            subCat13.setProductVOs(subCat13ProductVOs);




            SubCategoryVO subCat21 = new SubCategoryVO();
            subCat21.setIdCategory("cat2");
            subCat21.setIdSubCategory("subCat1");

            ArrayList<SubCategoryVO> cat2SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat2SubCategoryVOs.add(subCat21);
            cat2VO.setSubCategoryVOs(cat2SubCategoryVOs);

            ProductVO prod211VO = new ProductVO();
            prod211VO.setIdCategory("cat2");
            prod211VO.setIdSubCategory("subCat1");
            prod211VO.setIdProduct("prod1");
            prod211VO.setProductDescription("productDescription211");

            ProductVO prod212VO = new ProductVO();
            prod212VO.setIdCategory("cat2");
            prod212VO.setIdSubCategory("subCat1");
            prod212VO.setIdProduct("prod2");
            prod212VO.setProductDescription("productDescription212");

            ArrayList<ProductVO> subCat21ProductVOs= new ArrayList<ProductVO>();
            subCat21ProductVOs.add(prod211VO);
            subCat21ProductVOs.add(prod212VO);
            subCat21.setProductVOs(subCat21ProductVOs);




            SubCategoryVO subCat31 = new SubCategoryVO();
            subCat31.setIdCategory("cat3");
            subCat31.setIdSubCategory("subCat1");

            SubCategoryVO subCat32 = new SubCategoryVO();
            subCat32.setIdCategory("cat3");
            subCat32.setIdSubCategory("subCat2");

            ArrayList<SubCategoryVO> cat3SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat3SubCategoryVOs.add(subCat31);
            cat3SubCategoryVOs.add(subCat32);

            cat3VO.setSubCategoryVOs(cat3SubCategoryVOs);

            ProductVO prod321VO = new ProductVO();
            prod321VO.setIdCategory("cat3");
            prod321VO.setIdSubCategory("subCat2");
            prod321VO.setIdProduct("prod1");
            prod321VO.setProductDescription("productDescription321");

            ArrayList<ProductVO> subCat32ProductVOs= new ArrayList<ProductVO>();
            subCat32ProductVOs.add(prod321VO);
            subCat32.setProductVOs(subCat32ProductVOs);


            bd.addToRetainInCollectionTreeLeaves(aStoreVO, "administrationVO.orderVOs", new String[]{"idCategory","idSubCategory","idProduct"},"categoryVOs.subCategoryVOs.productVOs",new String[]{"productDescription"},new String[]{"orderDescription"},new String[]{"note from valueArray"},new String[]{"note"});

            Collection<OrderVO> orderVOs = aStoreVO.getAdministrationVO().getOrderVOs();
            log.info("orderVOs.size() = "+orderVOs.size());
            assertEquals("orderVOs.size() expected is 6",6,orderVOs.size());
            Iterator<OrderVO> orderVOsIterator = orderVOs.iterator();

            OrderVO testord121VO = orderVOsIterator.next();
            OrderVO testord122VO = orderVOsIterator.next();
            OrderVO testord131VO = orderVOsIterator.next();
            OrderVO testord211VO = orderVOsIterator.next();
            OrderVO testord212VO = orderVOsIterator.next();
            OrderVO testord321VO = orderVOsIterator.next();


            log.info("testord121VO.getIdCategory() = "+testord121VO.getIdCategory());
            log.info("testord121VO.getIdSubCategory() = "+testord121VO.getIdSubCategory());
            log.info("testord121VO.getIdProduct() = "+testord121VO.getIdProduct());
            log.info("testord121VO.getOrderDescription() = "+testord121VO.getOrderDescription());
            log.info("testord121VO.getNote() = "+testord121VO.getNote());
            assertEquals("testord121VO.getIdCategory() is expected to be cat1","cat1",testord121VO.getIdCategory());
            assertEquals("testord121VO.getIdSubCategory() is expected to be subCat2","subCat2",testord121VO.getIdSubCategory());
            assertEquals("testord121VO.getIdProduct() is expected to be prod1","prod1",testord121VO.getIdProduct());
            assertEquals("testord121VO.getOrderDescription() is expected to be productDescription121","productDescription121",testord121VO.getOrderDescription());
            assertEquals("testord121VO.getNote() is expected to be note from valueArray","note from valueArray",testord121VO.getNote());

            log.info("testord122VO.getIdCategory() = "+testord122VO.getIdCategory());
            log.info("testord122VO.getIdSubCategory() = "+testord122VO.getIdSubCategory());
            log.info("testord122VO.getIdProduct() = "+testord122VO.getIdProduct());
            log.info("testord122VO.getOrderDescription() = "+testord122VO.getOrderDescription());
            log.info("testord122VO.getNote() = "+testord122VO.getNote());
            assertEquals("testord122VO.getIdCategory() is expected to be cat1","cat1",testord122VO.getIdCategory());
            assertEquals("testord122VO.getIdSubCategory() is expected to be subCat2","subCat2",testord122VO.getIdSubCategory());
            assertEquals("testord122VO.getIdProduct() is expected to be prod2","prod2",testord122VO.getIdProduct());
            assertEquals("testord122VO.getOrderDescription() is expected to be productDescription122","productDescription122",testord122VO.getOrderDescription());
            assertEquals("testord122VO.getNote() is expected to be note from valueArray","note from valueArray",testord122VO.getNote());

            log.info("testord131VO.getIdCategory() = "+testord131VO.getIdCategory());
            log.info("testord131VO.getIdSubCategory() = "+testord131VO.getIdSubCategory());
            log.info("testord131VO.getIdProduct() = "+testord131VO.getIdProduct());
            log.info("testord131VO.getOrderDescription() = "+testord131VO.getOrderDescription());
            log.info("testord131VO.getNote() = "+testord131VO.getNote());
            assertEquals("testord131VO.getIdCategory() is expected to be cat1","cat1",testord131VO.getIdCategory());
            assertEquals("testord131VO.getIdSubCategory() is expected to be subCat3","subCat3",testord131VO.getIdSubCategory());
            assertEquals("testord131VO.getIdProduct() is expected to be prod1","prod1",testord131VO.getIdProduct());
            assertEquals("testord131VO.getOrderDescription() is expected to be productDescription131","productDescription131",testord131VO.getOrderDescription());
            assertEquals("testord131VO.getNote() is expected to be note from valueArray","note from valueArray",testord131VO.getNote());

            log.info("testord211VO.getIdCategory() = "+testord211VO.getIdCategory());
            log.info("testord211VO.getIdSubCategory() = "+testord211VO.getIdSubCategory());
            log.info("testord211VO.getIdProduct() = "+testord211VO.getIdProduct());
            log.info("testord211VO.getOrderDescription() = "+testord211VO.getOrderDescription());
            log.info("testord211VO.getNote() = "+testord211VO.getNote());
            assertEquals("testord211VO.getIdCategory() is expected to be cat2","cat2",testord211VO.getIdCategory());
            assertEquals("testord211VO.getIdSubCategory() is expected to be subCat1","subCat1",testord211VO.getIdSubCategory());
            assertEquals("testord211VO.getIdProduct() is expected to be prod1","prod1",testord211VO.getIdProduct());
            assertEquals("testord211VO.getOrderDescription() is expected to be productDescription211","productDescription211",testord211VO.getOrderDescription());
            assertEquals("testord211VO.getNote() is expected to be note from valueArray","note from valueArray",testord211VO.getNote());

            log.info("testord212VO.getIdCategory() = "+testord212VO.getIdCategory());
            log.info("testord212VO.getIdSubCategory() = "+testord212VO.getIdSubCategory());
            log.info("testord212VO.getIdProduct() = "+testord212VO.getIdProduct());
            log.info("testord212VO.getOrderDescription() = "+testord212VO.getOrderDescription());
            log.info("testord212VO.getNote() = "+testord212VO.getNote());
            assertEquals("testord212VO.getIdCategory() is expected to be cat2","cat2",testord212VO.getIdCategory());
            assertEquals("testord212VO.getIdSubCategory() is expected to be subCat1","subCat1",testord212VO.getIdSubCategory());
            assertEquals("testord212VO.getIdProduct() is expected to be prod2","prod2",testord212VO.getIdProduct());
            assertEquals("testord212VO.getOrderDescription() is expected to be productDescription212","productDescription212",testord212VO.getOrderDescription());
            assertEquals("testord212VO.getNote() is expected to be note from valueArray","note from valueArray",testord212VO.getNote());

            log.info("testord321VO.getIdCategory() = "+ testord321VO.getIdCategory());
            log.info("testord321VO.getIdSubCategory() = "+ testord321VO.getIdSubCategory());
            log.info("testord321VO.getIdProduct() = "+ testord321VO.getIdProduct());
            log.info("testord321VO.getOrderDescription() = "+ testord321VO.getOrderDescription());
            log.info("testord321VO.getNote() = "+ testord321VO.getNote());
            assertEquals("testord321VO.getIdCategory() is expected to be cat3","cat3", testord321VO.getIdCategory());
            assertEquals("testord321VO.getIdSubCategory() is expected to be subCat2","subCat2", testord321VO.getIdSubCategory());
            assertEquals("testord321VO.getIdProduct() is expected to be prod1","prod1", testord321VO.getIdProduct());
            assertEquals("testord321VO.getOrderDescription() is expected to be productDescription321","productDescription321", testord321VO.getOrderDescription());
            assertEquals("testord321VO.getNote() is expected to be note from valueArray","note from valueArray", testord321VO.getNote());



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeLeaves() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeLeaves() **************");
    }


    @Test public void testAddToRetainInCollectionTreeLeavesNoRetrieve(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesNoRetrieve() ***************");
        try{
            BD bd = getBD();

            StoreVO aStoreVO = new StoreVO();
            aStoreVO.setIdStore("a");
            aStoreVO.setIdAdministration("admin");
            bd.retrievePathReference(aStoreVO,"administrationVO.orderVOs");

            CategoryVO cat1VO = new CategoryVO();
            cat1VO.setIdCategory("cat1");
            CategoryVO cat2VO = new CategoryVO();
            cat1VO.setIdCategory("cat2");
            CategoryVO cat3VO = new CategoryVO();
            cat1VO.setIdCategory("cat3");

            ArrayList<CategoryVO> aStoreCategoryVOs = new ArrayList<CategoryVO>();
            aStoreCategoryVOs.add(cat1VO);
            aStoreCategoryVOs.add(cat2VO);
            aStoreCategoryVOs.add(cat3VO);

            aStoreVO.setCategoryVOs(aStoreCategoryVOs);

            SubCategoryVO subCat11 = new SubCategoryVO();
            subCat11.setIdCategory("cat1");
            subCat11.setIdSubCategory("subCat1");

            SubCategoryVO subCat12 = new SubCategoryVO();
            subCat12.setIdCategory("cat1");
            subCat12.setIdSubCategory("subCat2");

            SubCategoryVO subCat13 = new SubCategoryVO();
            subCat13.setIdCategory("cat1");
            subCat13.setIdSubCategory("subCat3");

            ArrayList<SubCategoryVO> cat1SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat1SubCategoryVOs.add(subCat11);
            cat1SubCategoryVOs.add(subCat12);
            cat1SubCategoryVOs.add(subCat13);

            cat1VO.setSubCategoryVOs(cat1SubCategoryVOs);

            ProductVO prod121VO = new ProductVO();
            prod121VO.setIdCategory("cat1");
            prod121VO.setIdSubCategory("subCat2");
            prod121VO.setIdProduct("prod1");
            prod121VO.setProductDescription("productDescription121");

            ProductVO prod122VO = new ProductVO();
            prod122VO.setIdCategory("cat1");
            prod122VO.setIdSubCategory("subCat2");
            prod122VO.setIdProduct("prod2");
            prod122VO.setProductDescription("productDescription122");

            ArrayList<ProductVO> subCat12ProductVOs= new ArrayList<ProductVO>();
            subCat12ProductVOs.add(prod121VO);
            subCat12ProductVOs.add(prod122VO);
            subCat12.setProductVOs(subCat12ProductVOs);


            ProductVO prod131VO = new ProductVO();
            prod131VO.setIdCategory("cat1");
            prod131VO.setIdSubCategory("subCat3");
            prod131VO.setIdProduct("prod1");
            prod131VO.setProductDescription("productDescription131");

            ArrayList<ProductVO> subCat13ProductVOs= new ArrayList<ProductVO>();
            subCat13ProductVOs.add(prod131VO);
            subCat13.setProductVOs(subCat13ProductVOs);




            SubCategoryVO subCat21 = new SubCategoryVO();
            subCat21.setIdCategory("cat2");
            subCat21.setIdSubCategory("subCat1");

            ArrayList<SubCategoryVO> cat2SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat2SubCategoryVOs.add(subCat21);
            cat2VO.setSubCategoryVOs(cat2SubCategoryVOs);

            ProductVO prod211VO = new ProductVO();
            prod211VO.setIdCategory("cat2");
            prod211VO.setIdSubCategory("subCat1");
            prod211VO.setIdProduct("prod1");
            prod211VO.setProductDescription("productDescription211");

            ProductVO prod212VO = new ProductVO();
            prod212VO.setIdCategory("cat2");
            prod212VO.setIdSubCategory("subCat1");
            prod212VO.setIdProduct("prod2");
            prod212VO.setProductDescription("productDescription212");

            ArrayList<ProductVO> subCat21ProductVOs= new ArrayList<ProductVO>();
            subCat21ProductVOs.add(prod211VO);
            subCat21ProductVOs.add(prod212VO);
            subCat21.setProductVOs(subCat21ProductVOs);




            SubCategoryVO subCat31 = new SubCategoryVO();
            subCat31.setIdCategory("cat3");
            subCat31.setIdSubCategory("subCat1");

            SubCategoryVO subCat32 = new SubCategoryVO();
            subCat32.setIdCategory("cat3");
            subCat32.setIdSubCategory("subCat2");

            ArrayList<SubCategoryVO> cat3SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat3SubCategoryVOs.add(subCat31);
            cat3SubCategoryVOs.add(subCat32);

            cat3VO.setSubCategoryVOs(cat3SubCategoryVOs);

            ProductVO prod321VO = new ProductVO();
            prod321VO.setIdCategory("cat3");
            prod321VO.setIdSubCategory("subCat2");
            prod321VO.setIdProduct("prod1");
            prod321VO.setProductDescription("productDescription321");

            ArrayList<ProductVO> subCat32ProductVOs= new ArrayList<ProductVO>();
            subCat32ProductVOs.add(prod321VO);
            subCat32.setProductVOs(subCat32ProductVOs);


            bd.addToRetainInCollectionTreeLeaves(aStoreVO, "administrationVO.orderVOs", new String[]{"idCategory","idSubCategory","idProduct"},"categoryVOs.subCategoryVOs.productVOs",new String[]{"productDescription"},new String[]{"orderDescription"},new String[]{"note from valueArray"},new String[]{"note"});

            Collection<OrderVO> orderVOs = aStoreVO.getAdministrationVO().getOrderVOs();
            log.info("orderVOs.size() = "+orderVOs.size());
            assertEquals("orderVOs.size() expected is 6",6,orderVOs.size());
            Iterator<OrderVO> orderVOsIterator = orderVOs.iterator();

            OrderVO testord121VO = orderVOsIterator.next();
            OrderVO testord122VO = orderVOsIterator.next();
            OrderVO testord131VO = orderVOsIterator.next();
            OrderVO testord211VO = orderVOsIterator.next();
            OrderVO testord212VO = orderVOsIterator.next();
            OrderVO testord321VO = orderVOsIterator.next();


            log.info("testord121VO.getIdCategory() = "+testord121VO.getIdCategory());
            log.info("testord121VO.getIdSubCategory() = "+testord121VO.getIdSubCategory());
            log.info("testord121VO.getIdProduct() = "+testord121VO.getIdProduct());
            log.info("testord121VO.getOrderDescription() = "+testord121VO.getOrderDescription());
            log.info("testord121VO.getNote() = "+testord121VO.getNote());
            assertEquals("testord121VO.getIdCategory() is expected to be cat1","cat1",testord121VO.getIdCategory());
            assertEquals("testord121VO.getIdSubCategory() is expected to be subCat2","subCat2",testord121VO.getIdSubCategory());
            assertEquals("testord121VO.getIdProduct() is expected to be prod1","prod1",testord121VO.getIdProduct());
            assertEquals("testord121VO.getOrderDescription() is expected to be order description of admin,cat1,subCat2,prod1","order description of admin,cat1,subCat2,prod1",testord121VO.getOrderDescription());
            assertEquals("testord121VO.getNote() is expected to be note of admin,cat1,subCat2,prod1","note of admin,cat1,subCat2,prod1",testord121VO.getNote());

            log.info("testord122VO.getIdCategory() = "+testord122VO.getIdCategory());
            log.info("testord122VO.getIdSubCategory() = "+testord122VO.getIdSubCategory());
            log.info("testord122VO.getIdProduct() = "+testord122VO.getIdProduct());
            log.info("testord122VO.getOrderDescription() = "+testord122VO.getOrderDescription());
            log.info("testord122VO.getNote() = "+testord122VO.getNote());
            assertEquals("testord122VO.getIdCategory() is expected to be cat1","cat1",testord122VO.getIdCategory());
            assertEquals("testord122VO.getIdSubCategory() is expected to be subCat2","subCat2",testord122VO.getIdSubCategory());
            assertEquals("testord122VO.getIdProduct() is expected to be prod2","prod2",testord122VO.getIdProduct());
            assertEquals("testord122VO.getOrderDescription() is expected to be productDescription122","productDescription122",testord122VO.getOrderDescription());
            assertEquals("testord122VO.getNote() is expected to be note from valueArray","note from valueArray",testord122VO.getNote());

            log.info("testord131VO.getIdCategory() = "+testord131VO.getIdCategory());
            log.info("testord131VO.getIdSubCategory() = "+testord131VO.getIdSubCategory());
            log.info("testord131VO.getIdProduct() = "+testord131VO.getIdProduct());
            log.info("testord131VO.getOrderDescription() = "+testord131VO.getOrderDescription());
            log.info("testord131VO.getNote() = "+testord131VO.getNote());
            assertEquals("testord131VO.getIdCategory() is expected to be cat1","cat1",testord131VO.getIdCategory());
            assertEquals("testord131VO.getIdSubCategory() is expected to be subCat3","subCat3",testord131VO.getIdSubCategory());
            assertEquals("testord131VO.getIdProduct() is expected to be prod1","prod1",testord131VO.getIdProduct());
            assertEquals("testord131VO.getOrderDescription() is expected to be productDescription131","productDescription131",testord131VO.getOrderDescription());
            assertEquals("testord131VO.getNote() is expected to be note from valueArray","note from valueArray",testord131VO.getNote());

            log.info("testord211VO.getIdCategory() = "+testord211VO.getIdCategory());
            log.info("testord211VO.getIdSubCategory() = "+testord211VO.getIdSubCategory());
            log.info("testord211VO.getIdProduct() = "+testord211VO.getIdProduct());
            log.info("testord211VO.getOrderDescription() = "+testord211VO.getOrderDescription());
            log.info("testord211VO.getNote() = "+testord211VO.getNote());
            assertEquals("testord211VO.getIdCategory() is expected to be cat2","cat2",testord211VO.getIdCategory());
            assertEquals("testord211VO.getIdSubCategory() is expected to be subCat1","subCat1",testord211VO.getIdSubCategory());
            assertEquals("testord211VO.getIdProduct() is expected to be prod1","prod1",testord211VO.getIdProduct());
            assertEquals("testord211VO.getOrderDescription() is expected to be productDescription211","productDescription211",testord211VO.getOrderDescription());
            assertEquals("testord211VO.getNote() is expected to be note from valueArray","note from valueArray",testord211VO.getNote());

            log.info("testord212VO.getIdCategory() = "+testord212VO.getIdCategory());
            log.info("testord212VO.getIdSubCategory() = "+testord212VO.getIdSubCategory());
            log.info("testord212VO.getIdProduct() = "+testord212VO.getIdProduct());
            log.info("testord212VO.getOrderDescription() = "+testord212VO.getOrderDescription());
            log.info("testord212VO.getNote() = "+testord212VO.getNote());
            assertEquals("testord212VO.getIdCategory() is expected to be cat2","cat2",testord212VO.getIdCategory());
            assertEquals("testord212VO.getIdSubCategory() is expected to be subCat1","subCat1",testord212VO.getIdSubCategory());
            assertEquals("testord212VO.getIdProduct() is expected to be prod2","prod2",testord212VO.getIdProduct());
            assertEquals("testord212VO.getOrderDescription() is expected to be productDescription212","productDescription212",testord212VO.getOrderDescription());
            assertEquals("testord212VO.getNote() is expected to be note from valueArray","note from valueArray",testord212VO.getNote());

            log.info("testord321VO.getIdCategory() = "+ testord321VO.getIdCategory());
            log.info("testord321VO.getIdSubCategory() = "+ testord321VO.getIdSubCategory());
            log.info("testord321VO.getIdProduct() = "+ testord321VO.getIdProduct());
            log.info("testord321VO.getOrderDescription() = "+ testord321VO.getOrderDescription());
            log.info("testord321VO.getNote() = "+ testord321VO.getNote());
            assertEquals("testord321VO.getIdCategory() is expected to be cat3","cat3", testord321VO.getIdCategory());
            assertEquals("testord321VO.getIdSubCategory() is expected to be subCat2","subCat2", testord321VO.getIdSubCategory());
            assertEquals("testord321VO.getIdProduct() is expected to be prod1","prod1", testord321VO.getIdProduct());
            assertEquals("testord321VO.getOrderDescription() is expected to be productDescription321","productDescription321", testord321VO.getOrderDescription());
            assertEquals("testord321VO.getNote() is expected to be note from valueArray","note from valueArray", testord321VO.getNote());



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesNoRetrieve() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesNoRetrieve() **************");
    }








    @Test public void testAddToRetainInCollectionTreeLeavesM2NNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesM2NNoValueArray() ***************");
        try{
            BD bd = getBD();

            StoreVO aStoreVO = new StoreVO();
            aStoreVO.setIdStore("a");
            aStoreVO.setIdAdministration("admin");

            CategoryVO cat1VO = new CategoryVO();
            cat1VO.setIdCategory("cat1");
            CategoryVO cat2VO = new CategoryVO();
            cat1VO.setIdCategory("cat2");
            CategoryVO cat3VO = new CategoryVO();
            cat1VO.setIdCategory("cat3");

            ArrayList<CategoryVO> aStoreCategoryVOs = new ArrayList<CategoryVO>();
            aStoreCategoryVOs.add(cat1VO);
            aStoreCategoryVOs.add(cat2VO);
            aStoreCategoryVOs.add(cat3VO);

            aStoreVO.setCategoryVOs(aStoreCategoryVOs);

            SubCategoryVO subCat11 = new SubCategoryVO();
            subCat11.setIdCategory("cat1");
            subCat11.setIdSubCategory("subCat1");

            SubCategoryVO subCat12 = new SubCategoryVO();
            subCat12.setIdCategory("cat1");
            subCat12.setIdSubCategory("subCat2");

            SubCategoryVO subCat13 = new SubCategoryVO();
            subCat13.setIdCategory("cat1");
            subCat13.setIdSubCategory("subCat3");

            ArrayList<SubCategoryVO> cat1SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat1SubCategoryVOs.add(subCat11);
            cat1SubCategoryVOs.add(subCat12);
            cat1SubCategoryVOs.add(subCat13);

            cat1VO.setSubCategoryVOs(cat1SubCategoryVOs);

            ProductVO prod121VO = new ProductVO();
            prod121VO.setIdCategory("cat1");
            prod121VO.setIdSubCategory("subCat2");
            prod121VO.setIdProduct("prod1");
            prod121VO.setProductDescription("productDescription121");

            ProductVO prod122VO = new ProductVO();
            prod122VO.setIdCategory("cat1");
            prod122VO.setIdSubCategory("subCat2");
            prod122VO.setIdProduct("prod2");
            prod122VO.setProductDescription("productDescription122");

            ArrayList<ProductVO> subCat12ProductVOs= new ArrayList<ProductVO>();
            subCat12ProductVOs.add(prod121VO);
            subCat12ProductVOs.add(prod122VO);
            subCat12.setProductVOs(subCat12ProductVOs);


            ProductVO prod131VO = new ProductVO();
            prod131VO.setIdCategory("cat1");
            prod131VO.setIdSubCategory("subCat3");
            prod131VO.setIdProduct("prod1");
            prod131VO.setProductDescription("productDescription131");

            ArrayList<ProductVO> subCat13ProductVOs= new ArrayList<ProductVO>();
            subCat13ProductVOs.add(prod131VO);
            subCat13.setProductVOs(subCat13ProductVOs);




            SubCategoryVO subCat21 = new SubCategoryVO();
            subCat21.setIdCategory("cat2");
            subCat21.setIdSubCategory("subCat1");

            ArrayList<SubCategoryVO> cat2SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat2SubCategoryVOs.add(subCat21);
            cat2VO.setSubCategoryVOs(cat2SubCategoryVOs);

            ProductVO prod211VO = new ProductVO();
            prod211VO.setIdCategory("cat2");
            prod211VO.setIdSubCategory("subCat1");
            prod211VO.setIdProduct("prod1");
            prod211VO.setProductDescription("productDescription211");

            ProductVO prod212VO = new ProductVO();
            prod212VO.setIdCategory("cat2");
            prod212VO.setIdSubCategory("subCat1");
            prod212VO.setIdProduct("prod2");
            prod212VO.setProductDescription("productDescription212");

            ArrayList<ProductVO> subCat21ProductVOs= new ArrayList<ProductVO>();
            subCat21ProductVOs.add(prod211VO);
            subCat21ProductVOs.add(prod212VO);
            subCat21.setProductVOs(subCat21ProductVOs);




            SubCategoryVO subCat31 = new SubCategoryVO();
            subCat31.setIdCategory("cat3");
            subCat31.setIdSubCategory("subCat1");

            SubCategoryVO subCat32 = new SubCategoryVO();
            subCat32.setIdCategory("cat3");
            subCat32.setIdSubCategory("subCat2");

            ArrayList<SubCategoryVO> cat3SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat3SubCategoryVOs.add(subCat31);
            cat3SubCategoryVOs.add(subCat32);

            cat3VO.setSubCategoryVOs(cat3SubCategoryVOs);

            ProductVO prod321VO = new ProductVO();
            prod321VO.setIdCategory("cat3");
            prod321VO.setIdSubCategory("subCat2");
            prod321VO.setIdProduct("prod1");
            prod321VO.setProductDescription("productDescription321");

            ArrayList<ProductVO> subCat32ProductVOs= new ArrayList<ProductVO>();
            subCat32ProductVOs.add(prod321VO);
            subCat32.setProductVOs(subCat32ProductVOs);


            bd.addToRetainInCollectionTreeLeaves(aStoreVO, "administrationVO.productVOs", new String[]{"idCategory","idSubCategory","idProduct"},"categoryVOs.subCategoryVOs.productVOs",new String[]{"productDescription"},new String[]{"description"});

            Collection<ProductVO> productVOs = aStoreVO.getAdministrationVO().getProductVOs();
            log.info("productVOs.size() = "+productVOs.size());
            assertEquals("productVOs.size() expected is 6",6,productVOs.size());
            Iterator<ProductVO> productVOsIterator = productVOs.iterator();

            ProductVO testprod121VO = productVOsIterator.next();
            ProductVO testprod122VO = productVOsIterator.next();
            ProductVO testprod131VO = productVOsIterator.next();
            ProductVO testprod211VO = productVOsIterator.next();
            ProductVO testprod212VO = productVOsIterator.next();
            ProductVO testord321VO = productVOsIterator.next();


            log.info("testprod121VO.getIdCategory() = "+ testprod121VO.getIdCategory());
            log.info("testprod121VO.getIdSubCategory() = "+ testprod121VO.getIdSubCategory());
            log.info("testprod121VO.getIdProduct() = "+ testprod121VO.getIdProduct());
            log.info("testprod121VO.getDescription() = "+ testprod121VO.getDescription());
            assertEquals("testprod121VO.getIdCategory() is expected to be cat1","cat1", testprod121VO.getIdCategory());
            assertEquals("testprod121VO.getIdSubCategory() is expected to be subCat2","subCat2", testprod121VO.getIdSubCategory());
            assertEquals("testprod121VO.getIdProduct() is expected to be prod1","prod1", testprod121VO.getIdProduct());
            assertEquals("testprod121VO.getDescription() is expected to be productDescription121","productDescription121", testprod121VO.getDescription());

            log.info("testprod122VO.getIdCategory() = "+ testprod122VO.getIdCategory());
            log.info("testprod122VO.getIdSubCategory() = "+ testprod122VO.getIdSubCategory());
            log.info("testprod122VO.getIdProduct() = "+ testprod122VO.getIdProduct());
            log.info("testprod122VO.getDescription() = "+ testprod122VO.getDescription());
            assertEquals("testprod122VO.getIdCategory() is expected to be cat1","cat1", testprod122VO.getIdCategory());
            assertEquals("testprod122VO.getIdSubCategory() is expected to be subCat2","subCat2", testprod122VO.getIdSubCategory());
            assertEquals("testprod122VO.getIdProduct() is expected to be prod2","prod2", testprod122VO.getIdProduct());
            assertEquals("testprod122VO.getDescription() is expected to be productDescription122","productDescription122", testprod122VO.getDescription());

            log.info("testprod131VO.getIdCategory() = "+ testprod131VO.getIdCategory());
            log.info("testprod131VO.getIdSubCategory() = "+ testprod131VO.getIdSubCategory());
            log.info("testprod131VO.getIdProduct() = "+ testprod131VO.getIdProduct());
            log.info("testprod131VO.getDescription() = "+ testprod131VO.getDescription());
            assertEquals("testprod131VO.getIdCategory() is expected to be cat1","cat1", testprod131VO.getIdCategory());
            assertEquals("testprod131VO.getIdSubCategory() is expected to be subCat3","subCat3", testprod131VO.getIdSubCategory());
            assertEquals("testprod131VO.getIdProduct() is expected to be prod1","prod1", testprod131VO.getIdProduct());
            assertEquals("testprod131VO.getDescription() is expected to be productDescription131","productDescription131", testprod131VO.getDescription());

            log.info("testprod211VO.getIdCategory() = "+ testprod211VO.getIdCategory());
            log.info("testprod211VO.getIdSubCategory() = "+ testprod211VO.getIdSubCategory());
            log.info("testprod211VO.getIdProduct() = "+ testprod211VO.getIdProduct());
            log.info("testprod211VO.getDescription() = "+ testprod211VO.getDescription());
            assertEquals("testprod211VO.getIdCategory() is expected to be cat2","cat2", testprod211VO.getIdCategory());
            assertEquals("testprod211VO.getIdSubCategory() is expected to be subCat1","subCat1", testprod211VO.getIdSubCategory());
            assertEquals("testprod211VO.getIdProduct() is expected to be prod1","prod1", testprod211VO.getIdProduct());
            assertEquals("testprod211VO.getDescription() is expected to be productDescription211","productDescription211", testprod211VO.getDescription());

            log.info("testprod212VO.getIdCategory() = "+ testprod212VO.getIdCategory());
            log.info("testprod212VO.getIdSubCategory() = "+ testprod212VO.getIdSubCategory());
            log.info("testprod212VO.getIdProduct() = "+ testprod212VO.getIdProduct());
            log.info("testprod212VO.getDescription() = "+ testprod212VO.getDescription());
            assertEquals("testprod212VO.getIdCategory() is expected to be cat2","cat2", testprod212VO.getIdCategory());
            assertEquals("testprod212VO.getIdSubCategory() is expected to be subCat1","subCat1", testprod212VO.getIdSubCategory());
            assertEquals("testprod212VO.getIdProduct() is expected to be prod2","prod2", testprod212VO.getIdProduct());
            assertEquals("testprod212VO.getDescription() is expected to be productDescription212","productDescription212", testprod212VO.getDescription());

            log.info("testord321VO.getIdCategory() = "+ testord321VO.getIdCategory());
            log.info("testord321VO.getIdSubCategory() = "+ testord321VO.getIdSubCategory());
            log.info("testord321VO.getIdProduct() = "+ testord321VO.getIdProduct());
            log.info("testord321VO.getDescription() = "+ testord321VO.getDescription());
            assertEquals("testord321VO.getIdCategory() is expected to be cat3","cat3", testord321VO.getIdCategory());
            assertEquals("testord321VO.getIdSubCategory() is expected to be subCat2","subCat2", testord321VO.getIdSubCategory());
            assertEquals("testord321VO.getIdProduct() is expected to be prod1","prod1", testord321VO.getIdProduct());
            assertEquals("testord321VO.getDescription() is expected to be productDescription321","productDescription321", testord321VO.getDescription());



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesM2NNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesM2NNoValueArray() **************");
    }

    @Test public void testAddToRetainInCollectionTreeLeavesNoRetrieveNoTarget(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesNoRetrieveNoTarget() ***************");
        try{
            BD bd = getBD();

            StoreVO aStoreVO = new StoreVO();
            aStoreVO.setIdStore("a");
            aStoreVO.setIdAdministration("admin");
            bd.retrievePathReference(aStoreVO,"administrationVO.orderVOs");

            CategoryVO cat1VO = new CategoryVO();
            cat1VO.setIdCategory("cat1");
            CategoryVO cat2VO = new CategoryVO();
            cat1VO.setIdCategory("cat2");
            CategoryVO cat3VO = new CategoryVO();
            cat1VO.setIdCategory("cat3");

            ArrayList<CategoryVO> aStoreCategoryVOs = new ArrayList<CategoryVO>();
            aStoreCategoryVOs.add(cat1VO);
            aStoreCategoryVOs.add(cat2VO);
            aStoreCategoryVOs.add(cat3VO);

            aStoreVO.setCategoryVOs(aStoreCategoryVOs);

            SubCategoryVO subCat11 = new SubCategoryVO();
            subCat11.setIdCategory("cat1");
            subCat11.setIdSubCategory("subCat1");

            SubCategoryVO subCat12 = new SubCategoryVO();
            subCat12.setIdCategory("cat1");
            subCat12.setIdSubCategory("subCat2");

            SubCategoryVO subCat13 = new SubCategoryVO();
            subCat13.setIdCategory("cat1");
            subCat13.setIdSubCategory("subCat3");

            ArrayList<SubCategoryVO> cat1SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat1SubCategoryVOs.add(subCat11);
            cat1SubCategoryVOs.add(subCat12);
            cat1SubCategoryVOs.add(subCat13);

            cat1VO.setSubCategoryVOs(cat1SubCategoryVOs);

            ProductVO prod121VO = new ProductVO();
            prod121VO.setIdCategory("cat1");
            prod121VO.setIdSubCategory("subCat2");
            prod121VO.setIdProduct("prod1");
            prod121VO.setDescription("description121");

            ProductVO prod122VO = new ProductVO();
            prod122VO.setIdCategory("cat1");
            prod122VO.setIdSubCategory("subCat2");
            prod122VO.setIdProduct("prod2");
            prod122VO.setDescription("description122");

            ArrayList<ProductVO> subCat12ProductVOs= new ArrayList<ProductVO>();
            subCat12ProductVOs.add(prod121VO);
            subCat12ProductVOs.add(prod122VO);
            subCat12.setProductVOs(subCat12ProductVOs);


            ProductVO prod131VO = new ProductVO();
            prod131VO.setIdCategory("cat1");
            prod131VO.setIdSubCategory("subCat3");
            prod131VO.setIdProduct("prod1");
            prod131VO.setDescription("description131");

            ArrayList<ProductVO> subCat13ProductVOs= new ArrayList<ProductVO>();
            subCat13ProductVOs.add(prod131VO);
            subCat13.setProductVOs(subCat13ProductVOs);




            SubCategoryVO subCat21 = new SubCategoryVO();
            subCat21.setIdCategory("cat2");
            subCat21.setIdSubCategory("subCat1");

            ArrayList<SubCategoryVO> cat2SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat2SubCategoryVOs.add(subCat21);
            cat2VO.setSubCategoryVOs(cat2SubCategoryVOs);

            ProductVO prod211VO = new ProductVO();
            prod211VO.setIdCategory("cat2");
            prod211VO.setIdSubCategory("subCat1");
            prod211VO.setIdProduct("prod1");
            prod211VO.setDescription("description211");

            ProductVO prod212VO = new ProductVO();
            prod212VO.setIdCategory("cat2");
            prod212VO.setIdSubCategory("subCat1");
            prod212VO.setIdProduct("prod2");
            prod212VO.setDescription("description212");

            ArrayList<ProductVO> subCat21ProductVOs= new ArrayList<ProductVO>();
            subCat21ProductVOs.add(prod211VO);
            subCat21ProductVOs.add(prod212VO);
            subCat21.setProductVOs(subCat21ProductVOs);




            SubCategoryVO subCat31 = new SubCategoryVO();
            subCat31.setIdCategory("cat3");
            subCat31.setIdSubCategory("subCat1");

            SubCategoryVO subCat32 = new SubCategoryVO();
            subCat32.setIdCategory("cat3");
            subCat32.setIdSubCategory("subCat2");

            ArrayList<SubCategoryVO> cat3SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat3SubCategoryVOs.add(subCat31);
            cat3SubCategoryVOs.add(subCat32);

            cat3VO.setSubCategoryVOs(cat3SubCategoryVOs);

            ProductVO prod321VO = new ProductVO();
            prod321VO.setIdCategory("cat3");
            prod321VO.setIdSubCategory("subCat2");
            prod321VO.setIdProduct("prod1");
            prod321VO.setDescription("description321");

            ArrayList<ProductVO> subCat32ProductVOs= new ArrayList<ProductVO>();
            subCat32ProductVOs.add(prod321VO);
            subCat32.setProductVOs(subCat32ProductVOs);


            bd.addToRetainInCollectionTreeLeaves(aStoreVO, "administrationVO.orderVOs", new String[]{"idCategory","idSubCategory","idProduct"},"categoryVOs.subCategoryVOs.productVOs",new String[]{"description"},new String[]{"note from valueArray"},new String[]{"note"});

            Collection<OrderVO> orderVOs = aStoreVO.getAdministrationVO().getOrderVOs();
            log.info("orderVOs.size() = "+orderVOs.size());
            assertEquals("orderVOs.size() expected is 6",6,orderVOs.size());
            Iterator<OrderVO> orderVOsIterator = orderVOs.iterator();

            OrderVO testord121VO = orderVOsIterator.next();
            OrderVO testord122VO = orderVOsIterator.next();
            OrderVO testord131VO = orderVOsIterator.next();
            OrderVO testord211VO = orderVOsIterator.next();
            OrderVO testord212VO = orderVOsIterator.next();
            OrderVO testord321VO = orderVOsIterator.next();


            log.info("testord121VO.getIdCategory() = "+testord121VO.getIdCategory());
            log.info("testord121VO.getIdSubCategory() = "+testord121VO.getIdSubCategory());
            log.info("testord121VO.getIdProduct() = "+testord121VO.getIdProduct());
            log.info("testord121VO.getDescription() = "+testord121VO.getDescription());
            log.info("testord121VO.getNote() = "+testord121VO.getNote());
            assertEquals("testord121VO.getIdCategory() is expected to be cat1","cat1",testord121VO.getIdCategory());
            assertEquals("testord121VO.getIdSubCategory() is expected to be subCat2","subCat2",testord121VO.getIdSubCategory());
            assertEquals("testord121VO.getIdProduct() is expected to be prod1","prod1",testord121VO.getIdProduct());
            assertEquals("testord121VO.getDescription() is expected to be order description of admin,cat1,subCat2,prod1","description of admin,cat1,subCat2,prod1",testord121VO.getDescription());
            assertEquals("testord121VO.getNote() is expected to be note of admin,cat1,subCat2,prod1","note of admin,cat1,subCat2,prod1",testord121VO.getNote());

            log.info("testord122VO.getIdCategory() = "+testord122VO.getIdCategory());
            log.info("testord122VO.getIdSubCategory() = "+testord122VO.getIdSubCategory());
            log.info("testord122VO.getIdProduct() = "+testord122VO.getIdProduct());
            log.info("testord122VO.getDescription() = "+testord122VO.getDescription());
            log.info("testord122VO.getNote() = "+testord122VO.getNote());
            assertEquals("testord122VO.getIdCategory() is expected to be cat1","cat1",testord122VO.getIdCategory());
            assertEquals("testord122VO.getIdSubCategory() is expected to be subCat2","subCat2",testord122VO.getIdSubCategory());
            assertEquals("testord122VO.getIdProduct() is expected to be prod2","prod2",testord122VO.getIdProduct());
            assertEquals("testord122VO.getDescription() is expected to be description122","description122",testord122VO.getDescription());
            assertEquals("testord122VO.getNote() is expected to be note from valueArray","note from valueArray",testord122VO.getNote());

            log.info("testord131VO.getIdCategory() = "+testord131VO.getIdCategory());
            log.info("testord131VO.getIdSubCategory() = "+testord131VO.getIdSubCategory());
            log.info("testord131VO.getIdProduct() = "+testord131VO.getIdProduct());
            log.info("testord131VO.getDescription() = "+testord131VO.getDescription());
            log.info("testord131VO.getNote() = "+testord131VO.getNote());
            assertEquals("testord131VO.getIdCategory() is expected to be cat1","cat1",testord131VO.getIdCategory());
            assertEquals("testord131VO.getIdSubCategory() is expected to be subCat3","subCat3",testord131VO.getIdSubCategory());
            assertEquals("testord131VO.getIdProduct() is expected to be prod1","prod1",testord131VO.getIdProduct());
            assertEquals("testord131VO.getDescription() is expected to be description131","description131",testord131VO.getDescription());
            assertEquals("testord131VO.getNote() is expected to be note from valueArray","note from valueArray",testord131VO.getNote());

            log.info("testord211VO.getIdCategory() = "+testord211VO.getIdCategory());
            log.info("testord211VO.getIdSubCategory() = "+testord211VO.getIdSubCategory());
            log.info("testord211VO.getIdProduct() = "+testord211VO.getIdProduct());
            log.info("testord211VO.getDescription() = "+testord211VO.getDescription());
            log.info("testord211VO.getNote() = "+testord211VO.getNote());
            assertEquals("testord211VO.getIdCategory() is expected to be cat2","cat2",testord211VO.getIdCategory());
            assertEquals("testord211VO.getIdSubCategory() is expected to be subCat1","subCat1",testord211VO.getIdSubCategory());
            assertEquals("testord211VO.getIdProduct() is expected to be prod1","prod1",testord211VO.getIdProduct());
            assertEquals("testord211VO.getDescription() is expected to be dDescription211","description211",testord211VO.getDescription());
            assertEquals("testord211VO.getNote() is expected to be note from valueArray","note from valueArray",testord211VO.getNote());

            log.info("testord212VO.getIdCategory() = "+testord212VO.getIdCategory());
            log.info("testord212VO.getIdSubCategory() = "+testord212VO.getIdSubCategory());
            log.info("testord212VO.getIdProduct() = "+testord212VO.getIdProduct());
            log.info("testord212VO.getDescription() = "+testord212VO.getDescription());
            log.info("testord212VO.getNote() = "+testord212VO.getNote());
            assertEquals("testord212VO.getIdCategory() is expected to be cat2","cat2",testord212VO.getIdCategory());
            assertEquals("testord212VO.getIdSubCategory() is expected to be subCat1","subCat1",testord212VO.getIdSubCategory());
            assertEquals("testord212VO.getIdProduct() is expected to be prod2","prod2",testord212VO.getIdProduct());
            assertEquals("testord212VO.getDescription() is expected to be description212","description212",testord212VO.getDescription());
            assertEquals("testord212VO.getNote() is expected to be note from valueArray","note from valueArray",testord212VO.getNote());

            log.info("testord321VO.getIdCategory() = "+ testord321VO.getIdCategory());
            log.info("testord321VO.getIdSubCategory() = "+ testord321VO.getIdSubCategory());
            log.info("testord321VO.getIdProduct() = "+ testord321VO.getIdProduct());
            log.info("testord321VO.getDescription() = "+ testord321VO.getDescription());
            log.info("testord321VO.getNote() = "+ testord321VO.getNote());
            assertEquals("testord321VO.getIdCategory() is expected to be cat3","cat3", testord321VO.getIdCategory());
            assertEquals("testord321VO.getIdSubCategory() is expected to be subCat2","subCat2", testord321VO.getIdSubCategory());
            assertEquals("testord321VO.getIdProduct() is expected to be prod1","prod1", testord321VO.getIdProduct());
            assertEquals("testord321VO.getDescription() is expected to be description321","description321", testord321VO.getDescription());
            assertEquals("testord321VO.getNote() is expected to be note from valueArray","note from valueArray", testord321VO.getNote());



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesNoRetrieveNoTarget() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesNoRetrieveNoTarget() **************");
    }

    @Test public void testAddToRetainInCollectionTreeLeavesNoRetrieveNoAttributes(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesNoRetrieveNoAttributes() ***************");
        try{
            BD bd = getBD();

            StoreVO aStoreVO = new StoreVO();
            aStoreVO.setIdStore("a");
            aStoreVO.setIdAdministration("admin");
            bd.retrievePathReference(aStoreVO,"administrationVO.orderVOs");

            CategoryVO cat1VO = new CategoryVO();
            cat1VO.setIdCategory("cat1");
            CategoryVO cat2VO = new CategoryVO();
            cat1VO.setIdCategory("cat2");
            CategoryVO cat3VO = new CategoryVO();
            cat1VO.setIdCategory("cat3");

            ArrayList<CategoryVO> aStoreCategoryVOs = new ArrayList<CategoryVO>();
            aStoreCategoryVOs.add(cat1VO);
            aStoreCategoryVOs.add(cat2VO);
            aStoreCategoryVOs.add(cat3VO);

            aStoreVO.setCategoryVOs(aStoreCategoryVOs);

            SubCategoryVO subCat11 = new SubCategoryVO();
            subCat11.setIdCategory("cat1");
            subCat11.setIdSubCategory("subCat1");

            SubCategoryVO subCat12 = new SubCategoryVO();
            subCat12.setIdCategory("cat1");
            subCat12.setIdSubCategory("subCat2");

            SubCategoryVO subCat13 = new SubCategoryVO();
            subCat13.setIdCategory("cat1");
            subCat13.setIdSubCategory("subCat3");

            ArrayList<SubCategoryVO> cat1SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat1SubCategoryVOs.add(subCat11);
            cat1SubCategoryVOs.add(subCat12);
            cat1SubCategoryVOs.add(subCat13);

            cat1VO.setSubCategoryVOs(cat1SubCategoryVOs);

            ProductVO prod121VO = new ProductVO();
            prod121VO.setIdCategory("cat1");
            prod121VO.setIdSubCategory("subCat2");
            prod121VO.setIdProduct("prod1");
            prod121VO.setDescription("description121");

            ProductVO prod122VO = new ProductVO();
            prod122VO.setIdCategory("cat1");
            prod122VO.setIdSubCategory("subCat2");
            prod122VO.setIdProduct("prod2");
            prod122VO.setDescription("description122");

            ArrayList<ProductVO> subCat12ProductVOs= new ArrayList<ProductVO>();
            subCat12ProductVOs.add(prod121VO);
            subCat12ProductVOs.add(prod122VO);
            subCat12.setProductVOs(subCat12ProductVOs);


            ProductVO prod131VO = new ProductVO();
            prod131VO.setIdCategory("cat1");
            prod131VO.setIdSubCategory("subCat3");
            prod131VO.setIdProduct("prod1");
            prod131VO.setDescription("description131");

            ArrayList<ProductVO> subCat13ProductVOs= new ArrayList<ProductVO>();
            subCat13ProductVOs.add(prod131VO);
            subCat13.setProductVOs(subCat13ProductVOs);




            SubCategoryVO subCat21 = new SubCategoryVO();
            subCat21.setIdCategory("cat2");
            subCat21.setIdSubCategory("subCat1");

            ArrayList<SubCategoryVO> cat2SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat2SubCategoryVOs.add(subCat21);
            cat2VO.setSubCategoryVOs(cat2SubCategoryVOs);

            ProductVO prod211VO = new ProductVO();
            prod211VO.setIdCategory("cat2");
            prod211VO.setIdSubCategory("subCat1");
            prod211VO.setIdProduct("prod1");
            prod211VO.setDescription("description211");

            ProductVO prod212VO = new ProductVO();
            prod212VO.setIdCategory("cat2");
            prod212VO.setIdSubCategory("subCat1");
            prod212VO.setIdProduct("prod2");
            prod212VO.setDescription("description212");

            ArrayList<ProductVO> subCat21ProductVOs= new ArrayList<ProductVO>();
            subCat21ProductVOs.add(prod211VO);
            subCat21ProductVOs.add(prod212VO);
            subCat21.setProductVOs(subCat21ProductVOs);




            SubCategoryVO subCat31 = new SubCategoryVO();
            subCat31.setIdCategory("cat3");
            subCat31.setIdSubCategory("subCat1");

            SubCategoryVO subCat32 = new SubCategoryVO();
            subCat32.setIdCategory("cat3");
            subCat32.setIdSubCategory("subCat2");

            ArrayList<SubCategoryVO> cat3SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat3SubCategoryVOs.add(subCat31);
            cat3SubCategoryVOs.add(subCat32);

            cat3VO.setSubCategoryVOs(cat3SubCategoryVOs);

            ProductVO prod321VO = new ProductVO();
            prod321VO.setIdCategory("cat3");
            prod321VO.setIdSubCategory("subCat2");
            prod321VO.setIdProduct("prod1");
            prod321VO.setDescription("description321");

            ArrayList<ProductVO> subCat32ProductVOs= new ArrayList<ProductVO>();
            subCat32ProductVOs.add(prod321VO);
            subCat32.setProductVOs(subCat32ProductVOs);


            bd.addToRetainInCollectionTreeLeaves(aStoreVO, "administrationVO.orderVOs", new String[]{"idCategory","idSubCategory","idProduct"},"categoryVOs.subCategoryVOs.productVOs");

            Collection<OrderVO> orderVOs = aStoreVO.getAdministrationVO().getOrderVOs();
            log.info("orderVOs.size() = "+orderVOs.size());
            assertEquals("orderVOs.size() expected is 6",6,orderVOs.size());
            Iterator<OrderVO> orderVOsIterator = orderVOs.iterator();

            OrderVO testord121VO = orderVOsIterator.next();
            OrderVO testord122VO = orderVOsIterator.next();
            OrderVO testord131VO = orderVOsIterator.next();
            OrderVO testord211VO = orderVOsIterator.next();
            OrderVO testord212VO = orderVOsIterator.next();
            OrderVO testord321VO = orderVOsIterator.next();


            log.info("testord121VO.getIdCategory() = "+testord121VO.getIdCategory());
            log.info("testord121VO.getIdSubCategory() = "+testord121VO.getIdSubCategory());
            log.info("testord121VO.getIdProduct() = "+testord121VO.getIdProduct());
            log.info("testord121VO.getDescription() = "+testord121VO.getDescription());
            log.info("testord121VO.getNote() = "+testord121VO.getNote());
            assertEquals("testord121VO.getIdCategory() is expected to be cat1","cat1",testord121VO.getIdCategory());
            assertEquals("testord121VO.getIdSubCategory() is expected to be subCat2","subCat2",testord121VO.getIdSubCategory());
            assertEquals("testord121VO.getIdProduct() is expected to be prod1","prod1",testord121VO.getIdProduct());
            assertEquals("testord121VO.getDescription() is expected to be order description of admin,cat1,subCat2,prod1","description of admin,cat1,subCat2,prod1",testord121VO.getDescription());
            assertEquals("testord121VO.getNote() is expected to be note of admin,cat1,subCat2,prod1","note of admin,cat1,subCat2,prod1",testord121VO.getNote());

            log.info("testord122VO.getIdCategory() = "+testord122VO.getIdCategory());
            log.info("testord122VO.getIdSubCategory() = "+testord122VO.getIdSubCategory());
            log.info("testord122VO.getIdProduct() = "+testord122VO.getIdProduct());
            log.info("testord122VO.getDescription() = "+testord122VO.getDescription());
            log.info("testord122VO.getNote() = "+testord122VO.getNote());
            assertEquals("testord122VO.getIdCategory() is expected to be cat1","cat1",testord122VO.getIdCategory());
            assertEquals("testord122VO.getIdSubCategory() is expected to be subCat2","subCat2",testord122VO.getIdSubCategory());
            assertEquals("testord122VO.getIdProduct() is expected to be prod2","prod2",testord122VO.getIdProduct());
            assertNull("testord122VO.getDescription() is expected to be Null",testord122VO.getDescription());
            assertNull("testord122VO.getNote() is expected to be Null",testord122VO.getNote());

            log.info("testord131VO.getIdCategory() = "+testord131VO.getIdCategory());
            log.info("testord131VO.getIdSubCategory() = "+testord131VO.getIdSubCategory());
            log.info("testord131VO.getIdProduct() = "+testord131VO.getIdProduct());
            log.info("testord131VO.getDescription() = "+testord131VO.getDescription());
            log.info("testord131VO.getNote() = "+testord131VO.getNote());
            assertEquals("testord131VO.getIdCategory() is expected to be cat1","cat1",testord131VO.getIdCategory());
            assertEquals("testord131VO.getIdSubCategory() is expected to be subCat3","subCat3",testord131VO.getIdSubCategory());
            assertEquals("testord131VO.getIdProduct() is expected to be prod1","prod1",testord131VO.getIdProduct());
            assertNull("testord131VO.getDescription() is expected to be Null",testord131VO.getDescription());
            assertNull("testord131VO.getNote() is expected to be Null",testord131VO.getNote());

            log.info("testord211VO.getIdCategory() = "+testord211VO.getIdCategory());
            log.info("testord211VO.getIdSubCategory() = "+testord211VO.getIdSubCategory());
            log.info("testord211VO.getIdProduct() = "+testord211VO.getIdProduct());
            log.info("testord211VO.getDescription() = "+testord211VO.getDescription());
            log.info("testord211VO.getNote() = "+testord211VO.getNote());
            assertEquals("testord211VO.getIdCategory() is expected to be cat2","cat2",testord211VO.getIdCategory());
            assertEquals("testord211VO.getIdSubCategory() is expected to be subCat1","subCat1",testord211VO.getIdSubCategory());
            assertEquals("testord211VO.getIdProduct() is expected to be prod1","prod1",testord211VO.getIdProduct());
            assertNull("testord211VO.getDescription() is expected to be Null",testord211VO.getDescription());
            assertNull("testord211VO.getNote() is expected to be Null",testord211VO.getNote());

            log.info("testord212VO.getIdCategory() = "+testord212VO.getIdCategory());
            log.info("testord212VO.getIdSubCategory() = "+testord212VO.getIdSubCategory());
            log.info("testord212VO.getIdProduct() = "+testord212VO.getIdProduct());
            log.info("testord212VO.getDescription() = "+testord212VO.getDescription());
            log.info("testord212VO.getNote() = "+testord212VO.getNote());
            assertEquals("testord212VO.getIdCategory() is expected to be cat2","cat2",testord212VO.getIdCategory());
            assertEquals("testord212VO.getIdSubCategory() is expected to be subCat1","subCat1",testord212VO.getIdSubCategory());
            assertEquals("testord212VO.getIdProduct() is expected to be prod2","prod2",testord212VO.getIdProduct());
            assertNull("testord212VO.getDescription() is expected to be Null",testord212VO.getDescription());
            assertNull("testord212VO.getNote() is expected to be Null",testord212VO.getNote());

            log.info("testord321VO.getIdCategory() = "+ testord321VO.getIdCategory());
            log.info("testord321VO.getIdSubCategory() = "+ testord321VO.getIdSubCategory());
            log.info("testord321VO.getIdProduct() = "+ testord321VO.getIdProduct());
            log.info("testord321VO.getDescription() = "+ testord321VO.getDescription());
            log.info("testord321VO.getNote() = "+ testord321VO.getNote());
            assertEquals("testord321VO.getIdCategory() is expected to be cat3","cat3", testord321VO.getIdCategory());
            assertEquals("testord321VO.getIdSubCategory() is expected to be subCat2","subCat2", testord321VO.getIdSubCategory());
            assertEquals("testord321VO.getIdProduct() is expected to be prod1","prod1", testord321VO.getIdProduct());
            assertNull("testord321VO.getDescription() is expected to be Null", testord321VO.getDescription());
            assertNull("testord321VO.getNote() is expected to be Null", testord321VO.getNote());



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesNoRetrieveNoAttributes() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesNoRetrieveNoAttributes() **************");
    }

    @Test public void testAddToRetainInCollectionTreeLeavesM2NNoComparatorNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesM2NNoComparatorNoValueArray() ***************");
        try{
            BD bd = getBD();

            StoreVO aStoreVO = new StoreVO();
            aStoreVO.setIdStore("a");
            aStoreVO.setIdAdministration("admin");

            CategoryVO cat1VO = new CategoryVO();
            cat1VO.setIdCategory("cat1");
            CategoryVO cat2VO = new CategoryVO();
            cat1VO.setIdCategory("cat2");
            CategoryVO cat3VO = new CategoryVO();
            cat1VO.setIdCategory("cat3");

            ArrayList<CategoryVO> aStoreCategoryVOs = new ArrayList<CategoryVO>();
            aStoreCategoryVOs.add(cat1VO);
            aStoreCategoryVOs.add(cat2VO);
            aStoreCategoryVOs.add(cat3VO);

            aStoreVO.setCategoryVOs(aStoreCategoryVOs);

            SubCategoryVO subCat11 = new SubCategoryVO();
            subCat11.setIdCategory("cat1");
            subCat11.setIdSubCategory("subCat1");

            SubCategoryVO subCat12 = new SubCategoryVO();
            subCat12.setIdCategory("cat1");
            subCat12.setIdSubCategory("subCat2");

            SubCategoryVO subCat13 = new SubCategoryVO();
            subCat13.setIdCategory("cat1");
            subCat13.setIdSubCategory("subCat3");

            ArrayList<SubCategoryVO> cat1SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat1SubCategoryVOs.add(subCat11);
            cat1SubCategoryVOs.add(subCat12);
            cat1SubCategoryVOs.add(subCat13);

            cat1VO.setSubCategoryVOs(cat1SubCategoryVOs);

            ProductVO prod121VO = new ProductVO();
            prod121VO.setIdCategory("cat1");
            prod121VO.setIdSubCategory("subCat2");
            prod121VO.setIdProduct("prod1");
            prod121VO.setProductDescription("productDescription121");

            ProductVO prod122VO = new ProductVO();
            prod122VO.setIdCategory("cat1");
            prod122VO.setIdSubCategory("subCat2");
            prod122VO.setIdProduct("prod2");
            prod122VO.setProductDescription("productDescription122");

            ArrayList<ProductVO> subCat12ProductVOs= new ArrayList<ProductVO>();
            subCat12ProductVOs.add(prod121VO);
            subCat12ProductVOs.add(prod122VO);
            subCat12.setProductVOs(subCat12ProductVOs);


            ProductVO prod131VO = new ProductVO();
            prod131VO.setIdCategory("cat1");
            prod131VO.setIdSubCategory("subCat3");
            prod131VO.setIdProduct("prod1");
            prod131VO.setProductDescription("productDescription131");

            ArrayList<ProductVO> subCat13ProductVOs= new ArrayList<ProductVO>();
            subCat13ProductVOs.add(prod131VO);
            subCat13.setProductVOs(subCat13ProductVOs);




            SubCategoryVO subCat21 = new SubCategoryVO();
            subCat21.setIdCategory("cat2");
            subCat21.setIdSubCategory("subCat1");

            ArrayList<SubCategoryVO> cat2SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat2SubCategoryVOs.add(subCat21);
            cat2VO.setSubCategoryVOs(cat2SubCategoryVOs);

            ProductVO prod211VO = new ProductVO();
            prod211VO.setIdCategory("cat2");
            prod211VO.setIdSubCategory("subCat1");
            prod211VO.setIdProduct("prod1");
            prod211VO.setProductDescription("productDescription211");

            ProductVO prod212VO = new ProductVO();
            prod212VO.setIdCategory("cat2");
            prod212VO.setIdSubCategory("subCat1");
            prod212VO.setIdProduct("prod2");
            prod212VO.setProductDescription("productDescription212");

            ArrayList<ProductVO> subCat21ProductVOs= new ArrayList<ProductVO>();
            subCat21ProductVOs.add(prod211VO);
            subCat21ProductVOs.add(prod212VO);
            subCat21.setProductVOs(subCat21ProductVOs);




            SubCategoryVO subCat31 = new SubCategoryVO();
            subCat31.setIdCategory("cat3");
            subCat31.setIdSubCategory("subCat1");

            SubCategoryVO subCat32 = new SubCategoryVO();
            subCat32.setIdCategory("cat3");
            subCat32.setIdSubCategory("subCat2");

            ArrayList<SubCategoryVO> cat3SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat3SubCategoryVOs.add(subCat31);
            cat3SubCategoryVOs.add(subCat32);

            cat3VO.setSubCategoryVOs(cat3SubCategoryVOs);

            ProductVO prod321VO = new ProductVO();
            prod321VO.setIdCategory("cat3");
            prod321VO.setIdSubCategory("subCat2");
            prod321VO.setIdProduct("prod1");
            prod321VO.setProductDescription("productDescription321");

            ArrayList<ProductVO> subCat32ProductVOs= new ArrayList<ProductVO>();
            subCat32ProductVOs.add(prod321VO);
            subCat32.setProductVOs(subCat32ProductVOs);


            bd.addToRetainInCollectionTreeLeaves(aStoreVO, "administrationVO.productVOs", "categoryVOs.subCategoryVOs.productVOs",new String[]{"productDescription"},new String[]{"description"});

            Collection<ProductVO> productVOs = aStoreVO.getAdministrationVO().getProductVOs();
            log.info("productVOs.size() = "+productVOs.size());
            assertEquals("productVOs.size() expected is 6",6,productVOs.size());
            Iterator<ProductVO> productVOsIterator = productVOs.iterator();

            ProductVO testprod121VO = productVOsIterator.next();
            ProductVO testprod122VO = productVOsIterator.next();
            ProductVO testprod131VO = productVOsIterator.next();
            ProductVO testprod211VO = productVOsIterator.next();
            ProductVO testprod212VO = productVOsIterator.next();
            ProductVO testord321VO = productVOsIterator.next();


            log.info("testprod121VO.getIdCategory() = "+ testprod121VO.getIdCategory());
            log.info("testprod121VO.getIdSubCategory() = "+ testprod121VO.getIdSubCategory());
            log.info("testprod121VO.getIdProduct() = "+ testprod121VO.getIdProduct());
            log.info("testprod121VO.getDescription() = "+ testprod121VO.getDescription());
            assertEquals("testprod121VO.getIdCategory() is expected to be cat1","cat1", testprod121VO.getIdCategory());
            assertEquals("testprod121VO.getIdSubCategory() is expected to be subCat2","subCat2", testprod121VO.getIdSubCategory());
            assertEquals("testprod121VO.getIdProduct() is expected to be prod1","prod1", testprod121VO.getIdProduct());
            assertEquals("testprod121VO.getDescription() is expected to be productDescription121","productDescription121", testprod121VO.getDescription());

            log.info("testprod122VO.getIdCategory() = "+ testprod122VO.getIdCategory());
            log.info("testprod122VO.getIdSubCategory() = "+ testprod122VO.getIdSubCategory());
            log.info("testprod122VO.getIdProduct() = "+ testprod122VO.getIdProduct());
            log.info("testprod122VO.getDescription() = "+ testprod122VO.getDescription());
            assertEquals("testprod122VO.getIdCategory() is expected to be cat1","cat1", testprod122VO.getIdCategory());
            assertEquals("testprod122VO.getIdSubCategory() is expected to be subCat2","subCat2", testprod122VO.getIdSubCategory());
            assertEquals("testprod122VO.getIdProduct() is expected to be prod2","prod2", testprod122VO.getIdProduct());
            assertEquals("testprod122VO.getDescription() is expected to be productDescription122","productDescription122", testprod122VO.getDescription());

            log.info("testprod131VO.getIdCategory() = "+ testprod131VO.getIdCategory());
            log.info("testprod131VO.getIdSubCategory() = "+ testprod131VO.getIdSubCategory());
            log.info("testprod131VO.getIdProduct() = "+ testprod131VO.getIdProduct());
            log.info("testprod131VO.getDescription() = "+ testprod131VO.getDescription());
            assertEquals("testprod131VO.getIdCategory() is expected to be cat1","cat1", testprod131VO.getIdCategory());
            assertEquals("testprod131VO.getIdSubCategory() is expected to be subCat3","subCat3", testprod131VO.getIdSubCategory());
            assertEquals("testprod131VO.getIdProduct() is expected to be prod1","prod1", testprod131VO.getIdProduct());
            assertEquals("testprod131VO.getDescription() is expected to be productDescription131","productDescription131", testprod131VO.getDescription());

            log.info("testprod211VO.getIdCategory() = "+ testprod211VO.getIdCategory());
            log.info("testprod211VO.getIdSubCategory() = "+ testprod211VO.getIdSubCategory());
            log.info("testprod211VO.getIdProduct() = "+ testprod211VO.getIdProduct());
            log.info("testprod211VO.getDescription() = "+ testprod211VO.getDescription());
            assertEquals("testprod211VO.getIdCategory() is expected to be cat2","cat2", testprod211VO.getIdCategory());
            assertEquals("testprod211VO.getIdSubCategory() is expected to be subCat1","subCat1", testprod211VO.getIdSubCategory());
            assertEquals("testprod211VO.getIdProduct() is expected to be prod1","prod1", testprod211VO.getIdProduct());
            assertEquals("testprod211VO.getDescription() is expected to be productDescription211","productDescription211", testprod211VO.getDescription());

            log.info("testprod212VO.getIdCategory() = "+ testprod212VO.getIdCategory());
            log.info("testprod212VO.getIdSubCategory() = "+ testprod212VO.getIdSubCategory());
            log.info("testprod212VO.getIdProduct() = "+ testprod212VO.getIdProduct());
            log.info("testprod212VO.getDescription() = "+ testprod212VO.getDescription());
            assertEquals("testprod212VO.getIdCategory() is expected to be cat2","cat2", testprod212VO.getIdCategory());
            assertEquals("testprod212VO.getIdSubCategory() is expected to be subCat1","subCat1", testprod212VO.getIdSubCategory());
            assertEquals("testprod212VO.getIdProduct() is expected to be prod2","prod2", testprod212VO.getIdProduct());
            assertEquals("testprod212VO.getDescription() is expected to be productDescription212","productDescription212", testprod212VO.getDescription());

            log.info("testord321VO.getIdCategory() = "+ testord321VO.getIdCategory());
            log.info("testord321VO.getIdSubCategory() = "+ testord321VO.getIdSubCategory());
            log.info("testord321VO.getIdProduct() = "+ testord321VO.getIdProduct());
            log.info("testord321VO.getDescription() = "+ testord321VO.getDescription());
            assertEquals("testord321VO.getIdCategory() is expected to be cat3","cat3", testord321VO.getIdCategory());
            assertEquals("testord321VO.getIdSubCategory() is expected to be subCat2","subCat2", testord321VO.getIdSubCategory());
            assertEquals("testord321VO.getIdProduct() is expected to be prod1","prod1", testord321VO.getIdProduct());
            assertEquals("testord321VO.getDescription() is expected to be productDescription321","productDescription321", testord321VO.getDescription());



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesM2NNoComparatorNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesM2NNoComparatorNoValueArray() **************");
    }

    @Test public void testAddToRetainInCollectionTreeLeavesM2NNoComparatorNoAttribute(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesM2NNoComparatorNoAttribute() ***************");
        try{
            BD bd = getBD();

            StoreVO aStoreVO = new StoreVO();
            aStoreVO.setIdStore("a");
            aStoreVO.setIdAdministration("admin");

            CategoryVO cat1VO = new CategoryVO();
            cat1VO.setIdCategory("cat1");
            CategoryVO cat2VO = new CategoryVO();
            cat1VO.setIdCategory("cat2");
            CategoryVO cat3VO = new CategoryVO();
            cat1VO.setIdCategory("cat3");

            ArrayList<CategoryVO> aStoreCategoryVOs = new ArrayList<CategoryVO>();
            aStoreCategoryVOs.add(cat1VO);
            aStoreCategoryVOs.add(cat2VO);
            aStoreCategoryVOs.add(cat3VO);

            aStoreVO.setCategoryVOs(aStoreCategoryVOs);

            SubCategoryVO subCat11 = new SubCategoryVO();
            subCat11.setIdCategory("cat1");
            subCat11.setIdSubCategory("subCat1");

            SubCategoryVO subCat12 = new SubCategoryVO();
            subCat12.setIdCategory("cat1");
            subCat12.setIdSubCategory("subCat2");

            SubCategoryVO subCat13 = new SubCategoryVO();
            subCat13.setIdCategory("cat1");
            subCat13.setIdSubCategory("subCat3");

            ArrayList<SubCategoryVO> cat1SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat1SubCategoryVOs.add(subCat11);
            cat1SubCategoryVOs.add(subCat12);
            cat1SubCategoryVOs.add(subCat13);

            cat1VO.setSubCategoryVOs(cat1SubCategoryVOs);

            ProductVO prod121VO = new ProductVO();
            prod121VO.setIdCategory("cat1");
            prod121VO.setIdSubCategory("subCat2");
            prod121VO.setIdProduct("prod1");
            prod121VO.setProductDescription("productDescription121");

            ProductVO prod122VO = new ProductVO();
            prod122VO.setIdCategory("cat1");
            prod122VO.setIdSubCategory("subCat2");
            prod122VO.setIdProduct("prod2");
            prod122VO.setProductDescription("productDescription122");

            ArrayList<ProductVO> subCat12ProductVOs= new ArrayList<ProductVO>();
            subCat12ProductVOs.add(prod121VO);
            subCat12ProductVOs.add(prod122VO);
            subCat12.setProductVOs(subCat12ProductVOs);


            ProductVO prod131VO = new ProductVO();
            prod131VO.setIdCategory("cat1");
            prod131VO.setIdSubCategory("subCat3");
            prod131VO.setIdProduct("prod1");
            prod131VO.setProductDescription("productDescription131");

            ArrayList<ProductVO> subCat13ProductVOs= new ArrayList<ProductVO>();
            subCat13ProductVOs.add(prod131VO);
            subCat13.setProductVOs(subCat13ProductVOs);




            SubCategoryVO subCat21 = new SubCategoryVO();
            subCat21.setIdCategory("cat2");
            subCat21.setIdSubCategory("subCat1");

            ArrayList<SubCategoryVO> cat2SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat2SubCategoryVOs.add(subCat21);
            cat2VO.setSubCategoryVOs(cat2SubCategoryVOs);

            ProductVO prod211VO = new ProductVO();
            prod211VO.setIdCategory("cat2");
            prod211VO.setIdSubCategory("subCat1");
            prod211VO.setIdProduct("prod1");
            prod211VO.setProductDescription("productDescription211");

            ProductVO prod212VO = new ProductVO();
            prod212VO.setIdCategory("cat2");
            prod212VO.setIdSubCategory("subCat1");
            prod212VO.setIdProduct("prod2");
            prod212VO.setProductDescription("productDescription212");

            ArrayList<ProductVO> subCat21ProductVOs= new ArrayList<ProductVO>();
            subCat21ProductVOs.add(prod211VO);
            subCat21ProductVOs.add(prod212VO);
            subCat21.setProductVOs(subCat21ProductVOs);




            SubCategoryVO subCat31 = new SubCategoryVO();
            subCat31.setIdCategory("cat3");
            subCat31.setIdSubCategory("subCat1");

            SubCategoryVO subCat32 = new SubCategoryVO();
            subCat32.setIdCategory("cat3");
            subCat32.setIdSubCategory("subCat2");

            ArrayList<SubCategoryVO> cat3SubCategoryVOs = new ArrayList<SubCategoryVO>();
            cat3SubCategoryVOs.add(subCat31);
            cat3SubCategoryVOs.add(subCat32);

            cat3VO.setSubCategoryVOs(cat3SubCategoryVOs);

            ProductVO prod321VO = new ProductVO();
            prod321VO.setIdCategory("cat3");
            prod321VO.setIdSubCategory("subCat2");
            prod321VO.setIdProduct("prod1");
            prod321VO.setProductDescription("productDescription321");

            ArrayList<ProductVO> subCat32ProductVOs= new ArrayList<ProductVO>();
            subCat32ProductVOs.add(prod321VO);
            subCat32.setProductVOs(subCat32ProductVOs);


            bd.addToRetainInCollectionTreeLeaves(aStoreVO, "administrationVO.productVOs", "categoryVOs.subCategoryVOs.productVOs");

            Collection<ProductVO> productVOs = aStoreVO.getAdministrationVO().getProductVOs();
            log.info("productVOs.size() = "+productVOs.size());
            assertEquals("productVOs.size() expected is 6",6,productVOs.size());
            Iterator<ProductVO> productVOsIterator = productVOs.iterator();

            ProductVO testprod121VO = productVOsIterator.next();
            ProductVO testprod122VO = productVOsIterator.next();
            ProductVO testprod131VO = productVOsIterator.next();
            ProductVO testprod211VO = productVOsIterator.next();
            ProductVO testprod212VO = productVOsIterator.next();
            ProductVO testord321VO = productVOsIterator.next();


            log.info("testprod121VO.getIdCategory() = "+ testprod121VO.getIdCategory());
            log.info("testprod121VO.getIdSubCategory() = "+ testprod121VO.getIdSubCategory());
            log.info("testprod121VO.getIdProduct() = "+ testprod121VO.getIdProduct());
            log.info("testprod121VO.getDescription() = "+ testprod121VO.getDescription());
            assertEquals("testprod121VO.getIdCategory() is expected to be cat1","cat1", testprod121VO.getIdCategory());
            assertEquals("testprod121VO.getIdSubCategory() is expected to be subCat2","subCat2", testprod121VO.getIdSubCategory());
            assertEquals("testprod121VO.getIdProduct() is expected to be prod1","prod1", testprod121VO.getIdProduct());
            assertNull("testprod121VO.getDescription() is expected to be Null", testprod121VO.getDescription());

            log.info("testprod122VO.getIdCategory() = "+ testprod122VO.getIdCategory());
            log.info("testprod122VO.getIdSubCategory() = "+ testprod122VO.getIdSubCategory());
            log.info("testprod122VO.getIdProduct() = "+ testprod122VO.getIdProduct());
            log.info("testprod122VO.getDescription() = "+ testprod122VO.getDescription());
            assertEquals("testprod122VO.getIdCategory() is expected to be cat1","cat1", testprod122VO.getIdCategory());
            assertEquals("testprod122VO.getIdSubCategory() is expected to be subCat2","subCat2", testprod122VO.getIdSubCategory());
            assertEquals("testprod122VO.getIdProduct() is expected to be prod2","prod2", testprod122VO.getIdProduct());
            assertNull("testprod122VO.getDescription() is expected to be Null", testprod122VO.getDescription());

            log.info("testprod131VO.getIdCategory() = "+ testprod131VO.getIdCategory());
            log.info("testprod131VO.getIdSubCategory() = "+ testprod131VO.getIdSubCategory());
            log.info("testprod131VO.getIdProduct() = "+ testprod131VO.getIdProduct());
            log.info("testprod131VO.getDescription() = "+ testprod131VO.getDescription());
            assertEquals("testprod131VO.getIdCategory() is expected to be cat1","cat1", testprod131VO.getIdCategory());
            assertEquals("testprod131VO.getIdSubCategory() is expected to be subCat3","subCat3", testprod131VO.getIdSubCategory());
            assertEquals("testprod131VO.getIdProduct() is expected to be prod1","prod1", testprod131VO.getIdProduct());
            assertNull("testprod131VO.getDescription() is expected to be Null", testprod131VO.getDescription());

            log.info("testprod211VO.getIdCategory() = "+ testprod211VO.getIdCategory());
            log.info("testprod211VO.getIdSubCategory() = "+ testprod211VO.getIdSubCategory());
            log.info("testprod211VO.getIdProduct() = "+ testprod211VO.getIdProduct());
            log.info("testprod211VO.getDescription() = "+ testprod211VO.getDescription());
            assertEquals("testprod211VO.getIdCategory() is expected to be cat2","cat2", testprod211VO.getIdCategory());
            assertEquals("testprod211VO.getIdSubCategory() is expected to be subCat1","subCat1", testprod211VO.getIdSubCategory());
            assertEquals("testprod211VO.getIdProduct() is expected to be prod1","prod1", testprod211VO.getIdProduct());
            assertNull("testprod211VO.getDescription() is expected to be Null", testprod211VO.getDescription());

            log.info("testprod212VO.getIdCategory() = "+ testprod212VO.getIdCategory());
            log.info("testprod212VO.getIdSubCategory() = "+ testprod212VO.getIdSubCategory());
            log.info("testprod212VO.getIdProduct() = "+ testprod212VO.getIdProduct());
            log.info("testprod212VO.getDescription() = "+ testprod212VO.getDescription());
            assertEquals("testprod212VO.getIdCategory() is expected to be cat2","cat2", testprod212VO.getIdCategory());
            assertEquals("testprod212VO.getIdSubCategory() is expected to be subCat1","subCat1", testprod212VO.getIdSubCategory());
            assertEquals("testprod212VO.getIdProduct() is expected to be prod2","prod2", testprod212VO.getIdProduct());
            assertNull("testprod212VO.getDescription() is expected to be Null", testprod212VO.getDescription());

            log.info("testord321VO.getIdCategory() = "+ testord321VO.getIdCategory());
            log.info("testord321VO.getIdSubCategory() = "+ testord321VO.getIdSubCategory());
            log.info("testord321VO.getIdProduct() = "+ testord321VO.getIdProduct());
            log.info("testord321VO.getDescription() = "+ testord321VO.getDescription());
            assertEquals("testord321VO.getIdCategory() is expected to be cat3","cat3", testord321VO.getIdCategory());
            assertEquals("testord321VO.getIdSubCategory() is expected to be subCat2","subCat2", testord321VO.getIdSubCategory());
            assertEquals("testord321VO.getIdProduct() is expected to be prod1","prod1", testord321VO.getIdProduct());
            assertNull("testord321VO.getDescription() is expected to be Null", testord321VO.getDescription());



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesM2NNoComparatorNoAttribute() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeLeavesM2NNoComparatorNoAttribute() **************");
    }



    @Test public void testAddToRetainInCollectionTreeNodes(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeNodes() ***************");
        try{
            BD bd = getBD();

            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorDescription1("aDirectorDescription1");
            aDirectorVO.setDirectorDescription2("aDirectorDescription2");

            SalesManagerVO aSalesManagerVO = new SalesManagerVO();
            aSalesManagerVO.setIdSalesManager("aSalesManager");
            aSalesManagerVO.setSalesManagerDescription1("aSalesManagerDescription1");
            aSalesManagerVO.setSalesManagerDescription2("aSalesManagerDescription2");
            aDirectorVO.setSalesManagerVO(aSalesManagerVO);

            Collection<SalesDivisionVO> aSalesDivisionVOs = new ArrayList<SalesDivisionVO>();
            SalesDivisionVO a1SalesDivisionVO = new SalesDivisionVO();
            a1SalesDivisionVO.setIdSalesManager("aSalesManager");
            a1SalesDivisionVO.setIdSalesDivision("1");
            a1SalesDivisionVO.setSalesDivisionDescription1("a1SalesDivisionDescription1");
            a1SalesDivisionVO.setSalesDivisionDescription2("a1SalesDivisionDescription2");

            SalesDivisionVO a2SalesDivisionVO = new SalesDivisionVO();
            a2SalesDivisionVO.setIdSalesManager("aSalesManager");
            a2SalesDivisionVO.setIdSalesDivision("2");
            a2SalesDivisionVO.setSalesDivisionDescription1("a2SalesDivisionDescription1");
            a2SalesDivisionVO.setSalesDivisionDescription2("a2SalesDivisionDescription2");

            aSalesDivisionVOs.add(a1SalesDivisionVO);
            aSalesDivisionVOs.add(a2SalesDivisionVO);
            aSalesManagerVO.setSalesDivisionVOs(aSalesDivisionVOs);

            SalesAssistantVO xSalesAssistantVO = new SalesAssistantVO();
            xSalesAssistantVO.setIdSalesAssistant("xSalesAssistant");
            xSalesAssistantVO.setSalesAssistantDescription1("xSalesAssistantDescription1");
            xSalesAssistantVO.setSalesAssistantDescription2("xSalesAssistantDescription2");

            SalesAssistantVO ySalesAssistantVO = new SalesAssistantVO();
            ySalesAssistantVO.setIdSalesAssistant("ySalesAssistant");
            ySalesAssistantVO.setSalesAssistantDescription1("ySalesAssistantDescription1");
            ySalesAssistantVO.setSalesAssistantDescription2("ySalesAssistantDescription2");

            SalesAssistantVO zSalesAssistantVO = new SalesAssistantVO();
            zSalesAssistantVO.setIdSalesAssistant("zSalesAssistant");
            zSalesAssistantVO.setSalesAssistantDescription1("zSalesAssistantDescription1");
            zSalesAssistantVO.setSalesAssistantDescription2("zSalesAssistantDescription2");


            Collection<SalesAssistantVO> a1SalesAssistantVOs = new ArrayList<SalesAssistantVO>();
            Collection<SalesAssistantVO> a2SalesAssistantVOs = new ArrayList<SalesAssistantVO>();

            a1SalesAssistantVOs.add(xSalesAssistantVO);
            a1SalesAssistantVOs.add(ySalesAssistantVO);
            a1SalesDivisionVO.setSalesAssistantVOs(a1SalesAssistantVOs);

            a2SalesAssistantVOs.add(ySalesAssistantVO);
            a2SalesAssistantVOs.add(zSalesAssistantVO);
            a2SalesDivisionVO.setSalesAssistantVOs(a2SalesAssistantVOs);

            ClerkVO x1ClerkVO = new ClerkVO();
            x1ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x1ClerkVO.setIdClerk("1");
            x1ClerkVO.setClerkDescription1("x1ClerkDescription1");
            x1ClerkVO.setClerkDescription2("x1ClerkDescription2");

            ClerkVO x2ClerkVO = new ClerkVO();
            x2ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x2ClerkVO.setIdClerk("2");
            x2ClerkVO.setClerkDescription1("x2ClerkDescription1");
            x2ClerkVO.setClerkDescription2("x2ClerkDescription2");

            Collection<ClerkVO> xClerkVOs = new ArrayList<ClerkVO>();
            xClerkVOs.add(x1ClerkVO);
            xClerkVOs.add(x2ClerkVO);
            xSalesAssistantVO.setClerkVOs(xClerkVOs);

            ClerkVO y1ClerkVO = new ClerkVO();
            y1ClerkVO.setIdSalesAssistant("ySalesAssistant");
            y1ClerkVO.setIdClerk("1");
            y1ClerkVO.setClerkDescription1("y1ClerkDescription1");
            y1ClerkVO.setClerkDescription2("y1ClerkDescription2");

            Collection<ClerkVO> yClerkVOs = new ArrayList<ClerkVO>();
            yClerkVOs.add(y1ClerkVO);
            ySalesAssistantVO.setClerkVOs(yClerkVOs);

            ClerkVO z1ClerkVO = new ClerkVO();
            z1ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z1ClerkVO.setIdClerk("1");
            z1ClerkVO.setClerkDescription1("z1ClerkDescription1");
            z1ClerkVO.setClerkDescription2("z1ClerkDescription2");

            ClerkVO z2ClerkVO = new ClerkVO();
            z2ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z2ClerkVO.setIdClerk("2");
            z2ClerkVO.setClerkDescription1("z2ClerkDescription1");
            z2ClerkVO.setClerkDescription2("z2ClerkDescription2");

            Collection<ClerkVO> zClerkVOs = new ArrayList<ClerkVO>();
            zClerkVOs.add(z1ClerkVO);
            zClerkVOs.add(z2ClerkVO);
            zSalesAssistantVO.setClerkVOs(zClerkVOs);

            bd.retrieveReference(aDirectorVO,"directorClerkVOs");


            String[] pkNames = {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};
            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String[][] nodeSourcePAttributeNames = new  String[5][];
            nodeSourcePAttributeNames[0] = new String[]{"directorDescription1","directorDescription2"};
            nodeSourcePAttributeNames[1] = new String[]{"salesManagerDescription1","salesManagerDescription2"};
            nodeSourcePAttributeNames[2] = new String[]{"salesDivisionDescription1","salesDivisionDescription2"};
            nodeSourcePAttributeNames[3] = new String[]{"salesAssistantDescription1","salesAssistantDescription2"};
            nodeSourcePAttributeNames[4] = new String[]{"clerkDescription1","clerkDescription2"};


            String[][] nodeTargetPAttributeNames = new  String[5][];
            nodeTargetPAttributeNames[0] = new String[]{"directorClerkDescription1","directorDescription2"};
            nodeTargetPAttributeNames[1] = new String[]{"directorClerkDescription2","salesManagerDescription2"};
            nodeTargetPAttributeNames[2] = new String[]{"directorClerkDescription3","salesDivisionDescription2"};
            nodeTargetPAttributeNames[3] = new String[]{"directorClerkDescription4","salesAssistantDescription2"};
            nodeTargetPAttributeNames[4] = new String[]{"directorClerkDescription5","clerkDescription2"};

            String[] pAttributeNames =   {"note1","note2"};
            Object[] valuesArray =   {"Note1","Note2"};
            bd.addToRetainInCollectionTreeNodes(aDirectorVO, "directorClerkVOs", pkNames, path, nodeSourcePAttributeNames,  nodeTargetPAttributeNames,   pAttributeNames,valuesArray);

            Collection<DirectorClerkVO> directorClerkVOs = aDirectorVO.getDirectorClerkVOs();
            log.info("directorClerkVOs.size() = "+directorClerkVOs.size());
            assertEquals("directorClerkVOs.size() expected is 6",6,directorClerkVOs.size());
            Iterator<DirectorClerkVO> directorClerkVOsIterator = directorClerkVOs.iterator();

            DirectorClerkVO testaa1x1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1x2DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z2DirectorClerkVO = directorClerkVOsIterator.next();


            log.info("testaa1x1DirectorClerkVO.getIdDirector() = "+ testaa1x1DirectorClerkVO.getIdDirector());
            log.info("testaa1x1DirectorClerkVO.getIdSalesManager() = "+ testaa1x1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x1DirectorClerkVO.getIdSalesDivision() = "+ testaa1x1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x1DirectorClerkVO.getIdClerk() = "+ testaa1x1DirectorClerkVO.getIdClerk());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x1DirectorClerkVO.getDirectorDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x1DirectorClerkVO.getClerkDescription2() = "+ testaa1x1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getNote1() = "+ testaa1x1DirectorClerkVO.getNote1());
            log.info("testaa1x1DirectorClerkVO.getNote2() = "+ testaa1x1DirectorClerkVO.getNote2());
            assertEquals("testaa1x1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1x1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() is expected to be 'DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorDescription2() is expected to be 'DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() is expected to be 'DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getSalesManagerDescription2() is expected to be 'SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() is expected to be 'DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() is expected to be 'SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() is expected to be 'DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() is expected to be 'DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x1DirectorClerkVO.getClerkDescription2() is expected to be 'CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getNote1() is expected to be 'NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote1());
            assertEquals("testaa1x1DirectorClerkVO.getNote2() is expected to be 'NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote2());



            log.info("testaa1x2DirectorClerkVO.getIdDirector() = "+ testaa1x2DirectorClerkVO.getIdDirector());
            log.info("testaa1x2DirectorClerkVO.getIdSalesManager() = "+ testaa1x2DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x2DirectorClerkVO.getIdSalesDivision() = "+ testaa1x2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x2DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x2DirectorClerkVO.getIdClerk() = "+ testaa1x2DirectorClerkVO.getIdClerk());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x2DirectorClerkVO.getDirectorDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x2DirectorClerkVO.getClerkDescription2() = "+ testaa1x2DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getNote1() = "+ testaa1x2DirectorClerkVO.getNote1());
            log.info("testaa1x2DirectorClerkVO.getNote2() = "+ testaa1x2DirectorClerkVO.getNote2());
            assertEquals("testaa1x2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x2DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa1x2DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1x2DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() is expected to be a1SalesDivisionDescription1", "a1SalesDivisionDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() is expected to be xSalesAssistantDescription1", "xSalesAssistantDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'xSalesAssistantDescription2'", "xSalesAssistantDescription2",testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() is expected to be x2ClerkDescription1", "x2ClerkDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x2DirectorClerkVO.getClerkDescription2() is expected to be x2ClerkDescription2", "x2ClerkDescription2",testaa1x2DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa1x2DirectorClerkVO.getNote1());
            assertEquals("testaa1x2DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa1x2DirectorClerkVO.getNote2());


            log.info("testaa1y1DirectorClerkVO.getIdDirector() = "+ testaa1y1DirectorClerkVO.getIdDirector());
            log.info("testaa1y1DirectorClerkVO.getIdSalesManager() = "+ testaa1y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1y1DirectorClerkVO.getIdSalesDivision() = "+ testaa1y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1y1DirectorClerkVO.getIdClerk() = "+ testaa1y1DirectorClerkVO.getIdClerk());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1y1DirectorClerkVO.getDirectorDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1y1DirectorClerkVO.getClerkDescription2() = "+ testaa1y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getNote1() = "+ testaa1y1DirectorClerkVO.getNote1());
            log.info("testaa1y1DirectorClerkVO.getNote2() = "+ testaa1y1DirectorClerkVO.getNote2());
            assertEquals("testaa1y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa1y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1y1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a1SalesDivisionDescription1", "a1SalesDivisionDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be ySalesAssistantDescription1", "ySalesAssistantDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() is expected to be y1ClerkDescription1", "y1ClerkDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa1y1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa1y1DirectorClerkVO.getNote1());
            assertEquals("testaa1y1DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa1y1DirectorClerkVO.getNote2());



            log.info("testaa2y1DirectorClerkVO.getIdDirector() = "+ testaa2y1DirectorClerkVO.getIdDirector());
            log.info("testaa2y1DirectorClerkVO.getIdSalesManager() = "+ testaa2y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2y1DirectorClerkVO.getIdSalesDivision() = "+ testaa2y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2y1DirectorClerkVO.getIdClerk() = "+ testaa2y1DirectorClerkVO.getIdClerk());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2y1DirectorClerkVO.getDirectorDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2y1DirectorClerkVO.getClerkDescription2() = "+ testaa2y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getNote1() = "+ testaa2y1DirectorClerkVO.getNote1());
            log.info("testaa2y1DirectorClerkVO.getNote2() = "+ testaa2y1DirectorClerkVO.getNote2());
            assertEquals("testaa2y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa2y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2y1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be ySalesAssistantDescription1", "ySalesAssistantDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() is expected to be y1ClerkDescription1", "y1ClerkDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa2y1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa2y1DirectorClerkVO.getNote1());
            assertEquals("testaa2y1DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa2y1DirectorClerkVO.getNote2());



            log.info("testaa2z1DirectorClerkVO.getIdDirector() = "+ testaa2z1DirectorClerkVO.getIdDirector());
            log.info("testaa2z1DirectorClerkVO.getIdSalesManager() = "+ testaa2z1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z1DirectorClerkVO.getIdSalesDivision() = "+ testaa2z1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z1DirectorClerkVO.getIdClerk() = "+ testaa2z1DirectorClerkVO.getIdClerk());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z1DirectorClerkVO.getDirectorDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z1DirectorClerkVO.getClerkDescription2() = "+ testaa2z1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getNote1() = "+ testaa2z1DirectorClerkVO.getNote1());
            log.info("testaa2z1DirectorClerkVO.getNote2() = "+ testaa2z1DirectorClerkVO.getNote2());
            assertEquals("testaa2z1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2z1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() is expected to be zSalesAssistantDescription1", "zSalesAssistantDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() is expected to be z1ClerkDescription1", "z1ClerkDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2z1DirectorClerkVO.getClerkDescription2() is expected to be z1ClerkDescription2", "z1ClerkDescription2",testaa2z1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa2z1DirectorClerkVO.getNote1());
            assertEquals("testaa2z1DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa2z1DirectorClerkVO.getNote2());


            log.info("testaa2z2DirectorClerkVO.getIdDirector() = "+ testaa2z2DirectorClerkVO.getIdDirector());
            log.info("testaa2z2DirectorClerkVO.getIdSalesManager() = "+ testaa2z2DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z2DirectorClerkVO.getIdSalesDivision() = "+ testaa2z2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z2DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z2DirectorClerkVO.getIdClerk() = "+ testaa2z2DirectorClerkVO.getIdClerk());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z2DirectorClerkVO.getDirectorDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z2DirectorClerkVO.getClerkDescription2() = "+ testaa2z2DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getNote1() = "+ testaa2z2DirectorClerkVO.getNote1());
            log.info("testaa2z2DirectorClerkVO.getNote2() = "+ testaa2z2DirectorClerkVO.getNote2());
            assertEquals("testaa2z2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z2DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa2z2DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z2DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() is expected to be zSalesAssistantDescription1", "zSalesAssistantDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() is expected to be z2ClerkDescription1", "z2ClerkDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2z2DirectorClerkVO.getClerkDescription2() is expected to be z2ClerkDescription2", "z2ClerkDescription2",testaa2z2DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa2z2DirectorClerkVO.getNote1());
            assertEquals("testaa2z2DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa2z2DirectorClerkVO.getNote2());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeNodes() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeNodes() **************");
    }



    @Test public void testAddToRetainInCollectionTreeNodesSomeNullSourceAndTarget(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeNodesSomeNullSourceAndTarget() ***************");
        try{
            BD bd = getBD();

            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorDescription1("aDirectorDescription1");
            aDirectorVO.setDirectorDescription2("aDirectorDescription2");

            SalesManagerVO aSalesManagerVO = new SalesManagerVO();
            aSalesManagerVO.setIdSalesManager("aSalesManager");
            aSalesManagerVO.setSalesManagerDescription1("aSalesManagerDescription1");
            aSalesManagerVO.setSalesManagerDescription2("aSalesManagerDescription2");
            aDirectorVO.setSalesManagerVO(aSalesManagerVO);

            Collection<SalesDivisionVO> aSalesDivisionVOs = new ArrayList<SalesDivisionVO>();
            SalesDivisionVO a1SalesDivisionVO = new SalesDivisionVO();
            a1SalesDivisionVO.setIdSalesManager("aSalesManager");
            a1SalesDivisionVO.setIdSalesDivision("1");
            a1SalesDivisionVO.setSalesDivisionDescription1("a1SalesDivisionDescription1");
            a1SalesDivisionVO.setSalesDivisionDescription2("a1SalesDivisionDescription2");

            SalesDivisionVO a2SalesDivisionVO = new SalesDivisionVO();
            a2SalesDivisionVO.setIdSalesManager("aSalesManager");
            a2SalesDivisionVO.setIdSalesDivision("2");
            a2SalesDivisionVO.setSalesDivisionDescription1("a2SalesDivisionDescription1");
            a2SalesDivisionVO.setSalesDivisionDescription2("a2SalesDivisionDescription2");

            aSalesDivisionVOs.add(a1SalesDivisionVO);
            aSalesDivisionVOs.add(a2SalesDivisionVO);
            aSalesManagerVO.setSalesDivisionVOs(aSalesDivisionVOs);

            SalesAssistantVO xSalesAssistantVO = new SalesAssistantVO();
            xSalesAssistantVO.setIdSalesAssistant("xSalesAssistant");
            xSalesAssistantVO.setSalesAssistantDescription1("xSalesAssistantDescription1");
            xSalesAssistantVO.setSalesAssistantDescription2("xSalesAssistantDescription2");

            SalesAssistantVO ySalesAssistantVO = new SalesAssistantVO();
            ySalesAssistantVO.setIdSalesAssistant("ySalesAssistant");
            ySalesAssistantVO.setSalesAssistantDescription1("ySalesAssistantDescription1");
            ySalesAssistantVO.setSalesAssistantDescription2("ySalesAssistantDescription2");

            SalesAssistantVO zSalesAssistantVO = new SalesAssistantVO();
            zSalesAssistantVO.setIdSalesAssistant("zSalesAssistant");
            zSalesAssistantVO.setSalesAssistantDescription1("zSalesAssistantDescription1");
            zSalesAssistantVO.setSalesAssistantDescription2("zSalesAssistantDescription2");


            Collection<SalesAssistantVO> a1SalesAssistantVOs = new ArrayList<SalesAssistantVO>();
            Collection<SalesAssistantVO> a2SalesAssistantVOs = new ArrayList<SalesAssistantVO>();

            a1SalesAssistantVOs.add(xSalesAssistantVO);
            a1SalesAssistantVOs.add(ySalesAssistantVO);
            a1SalesDivisionVO.setSalesAssistantVOs(a1SalesAssistantVOs);

            a2SalesAssistantVOs.add(ySalesAssistantVO);
            a2SalesAssistantVOs.add(zSalesAssistantVO);
            a2SalesDivisionVO.setSalesAssistantVOs(a2SalesAssistantVOs);

            ClerkVO x1ClerkVO = new ClerkVO();
            x1ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x1ClerkVO.setIdClerk("1");
            x1ClerkVO.setClerkDescription1("x1ClerkDescription1");
            x1ClerkVO.setClerkDescription2("x1ClerkDescription2");

            ClerkVO x2ClerkVO = new ClerkVO();
            x2ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x2ClerkVO.setIdClerk("2");
            x2ClerkVO.setClerkDescription1("x2ClerkDescription1");
            x2ClerkVO.setClerkDescription2("x2ClerkDescription2");

            Collection<ClerkVO> xClerkVOs = new ArrayList<ClerkVO>();
            xClerkVOs.add(x1ClerkVO);
            xClerkVOs.add(x2ClerkVO);
            xSalesAssistantVO.setClerkVOs(xClerkVOs);

            ClerkVO y1ClerkVO = new ClerkVO();
            y1ClerkVO.setIdSalesAssistant("ySalesAssistant");
            y1ClerkVO.setIdClerk("1");
            y1ClerkVO.setClerkDescription1("y1ClerkDescription1");
            y1ClerkVO.setClerkDescription2("y1ClerkDescription2");

            Collection<ClerkVO> yClerkVOs = new ArrayList<ClerkVO>();
            yClerkVOs.add(y1ClerkVO);
            ySalesAssistantVO.setClerkVOs(yClerkVOs);

            ClerkVO z1ClerkVO = new ClerkVO();
            z1ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z1ClerkVO.setIdClerk("1");
            z1ClerkVO.setClerkDescription1("z1ClerkDescription1");
            z1ClerkVO.setClerkDescription2("z1ClerkDescription2");

            ClerkVO z2ClerkVO = new ClerkVO();
            z2ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z2ClerkVO.setIdClerk("2");
            z2ClerkVO.setClerkDescription1("z2ClerkDescription1");
            z2ClerkVO.setClerkDescription2("z2ClerkDescription2");

            Collection<ClerkVO> zClerkVOs = new ArrayList<ClerkVO>();
            zClerkVOs.add(z1ClerkVO);
            zClerkVOs.add(z2ClerkVO);
            zSalesAssistantVO.setClerkVOs(zClerkVOs);

            bd.retrieveReference(aDirectorVO,"directorClerkVOs");


            String[] pkNames = {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};
            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String[][] nodeSourcePAttributeNames = new  String[5][];
            nodeSourcePAttributeNames[0] = new String[]{"directorDescription1","directorDescription2"};
            //nodeSourcePAttributeNames[1] = new String[]{"salesManagerDescription1","salesManagerDescription2"};
            nodeSourcePAttributeNames[1] = null;
            //nodeSourcePAttributeNames[2] = new String[]{"salesDivisionDescription1","salesDivisionDescription2"};
            nodeSourcePAttributeNames[2] = null;
            //nodeSourcePAttributeNames[3] = new String[]{"salesAssistantDescription1","salesAssistantDescription2"};
            nodeSourcePAttributeNames[3] = null;
            nodeSourcePAttributeNames[4] = new String[]{"clerkDescription1","clerkDescription2"};


            String[][] nodeTargetPAttributeNames = new  String[5][];
            nodeTargetPAttributeNames[0] = new String[]{"directorClerkDescription1","directorDescription2"};
            //nodeTargetPAttributeNames[1] = new String[]{"directorClerkDescription2","salesManagerDescription2"};
            nodeTargetPAttributeNames[1] = null;
            //nodeTargetPAttributeNames[2] = new String[]{"directorClerkDescription3","salesDivisionDescription2"};
            nodeTargetPAttributeNames[2] = null;
            //nodeTargetPAttributeNames[3] = new String[]{"directorClerkDescription4","salesAssistantDescription2"};
            nodeTargetPAttributeNames[3] = null;
            nodeTargetPAttributeNames[4] = new String[]{"directorClerkDescription5","clerkDescription2"};

            String[] pAttributeNames =   {"note1","note2"};
            Object[] valuesArray =   {"Note1","Note2"};
            bd.addToRetainInCollectionTreeNodes(aDirectorVO, "directorClerkVOs", pkNames, path, nodeSourcePAttributeNames,  nodeTargetPAttributeNames,   pAttributeNames,valuesArray);

            Collection<DirectorClerkVO> directorClerkVOs = aDirectorVO.getDirectorClerkVOs();
            log.info("directorClerkVOs.size() = "+directorClerkVOs.size());
            assertEquals("directorClerkVOs.size() expected is 6",6,directorClerkVOs.size());
            Iterator<DirectorClerkVO> directorClerkVOsIterator = directorClerkVOs.iterator();

            DirectorClerkVO testaa1x1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1x2DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z2DirectorClerkVO = directorClerkVOsIterator.next();


            log.info("testaa1x1DirectorClerkVO.getIdDirector() = "+ testaa1x1DirectorClerkVO.getIdDirector());
            log.info("testaa1x1DirectorClerkVO.getIdSalesManager() = "+ testaa1x1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x1DirectorClerkVO.getIdSalesDivision() = "+ testaa1x1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x1DirectorClerkVO.getIdClerk() = "+ testaa1x1DirectorClerkVO.getIdClerk());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x1DirectorClerkVO.getDirectorDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x1DirectorClerkVO.getClerkDescription2() = "+ testaa1x1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getNote1() = "+ testaa1x1DirectorClerkVO.getNote1());
            log.info("testaa1x1DirectorClerkVO.getNote2() = "+ testaa1x1DirectorClerkVO.getNote2());
            assertEquals("testaa1x1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1x1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() is expected to be 'DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorDescription2() is expected to be 'DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() is expected to be 'DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getSalesManagerDescription2() is expected to be 'SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() is expected to be 'DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() is expected to be 'SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() is expected to be 'DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() is expected to be 'DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x1DirectorClerkVO.getClerkDescription2() is expected to be 'CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getNote1() is expected to be 'NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote1());
            assertEquals("testaa1x1DirectorClerkVO.getNote2() is expected to be 'NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote2());



            log.info("testaa1x2DirectorClerkVO.getIdDirector() = "+ testaa1x2DirectorClerkVO.getIdDirector());
            log.info("testaa1x2DirectorClerkVO.getIdSalesManager() = "+ testaa1x2DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x2DirectorClerkVO.getIdSalesDivision() = "+ testaa1x2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x2DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x2DirectorClerkVO.getIdClerk() = "+ testaa1x2DirectorClerkVO.getIdClerk());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x2DirectorClerkVO.getDirectorDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x2DirectorClerkVO.getClerkDescription2() = "+ testaa1x2DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getNote1() = "+ testaa1x2DirectorClerkVO.getNote1());
            log.info("testaa1x2DirectorClerkVO.getNote2() = "+ testaa1x2DirectorClerkVO.getNote2());
            assertEquals("testaa1x2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x2DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa1x2DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1x2DirectorClerkVO.getDirectorDescription2());
            //assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            assertNull("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() is expected to be null'", testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            //assertEquals("testaa1x2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            assertNull("testaa1x2DirectorClerkVO.getSalesManagerDescription2() is expected to be null", testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            //assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() is expected to be a1SalesDivisionDescription1", "a1SalesDivisionDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            assertNull("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() is expected to be null", testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            //assertEquals("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            assertNull("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() is expected to be null", testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            //assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() is expected to be xSalesAssistantDescription1", "xSalesAssistantDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            assertNull("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() is expected to be null", testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            //assertEquals("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'xSalesAssistantDescription2'", "xSalesAssistantDescription2",testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            assertNull("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() is expected to be null", testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() is expected to be x2ClerkDescription1", "x2ClerkDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x2DirectorClerkVO.getClerkDescription2() is expected to be x2ClerkDescription2", "x2ClerkDescription2",testaa1x2DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa1x2DirectorClerkVO.getNote1());
            assertEquals("testaa1x2DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa1x2DirectorClerkVO.getNote2());


            log.info("testaa1y1DirectorClerkVO.getIdDirector() = "+ testaa1y1DirectorClerkVO.getIdDirector());
            log.info("testaa1y1DirectorClerkVO.getIdSalesManager() = "+ testaa1y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1y1DirectorClerkVO.getIdSalesDivision() = "+ testaa1y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1y1DirectorClerkVO.getIdClerk() = "+ testaa1y1DirectorClerkVO.getIdClerk());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1y1DirectorClerkVO.getDirectorDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1y1DirectorClerkVO.getClerkDescription2() = "+ testaa1y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getNote1() = "+ testaa1y1DirectorClerkVO.getNote1());
            log.info("testaa1y1DirectorClerkVO.getNote2() = "+ testaa1y1DirectorClerkVO.getNote2());
            assertEquals("testaa1y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa1y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1y1DirectorClerkVO.getDirectorDescription2());
            //assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            assertNull("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be null'", testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            //assertEquals("testaa1y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            assertNull("testaa1y1DirectorClerkVO.getSalesManagerDescription2() is expected to be null", testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            //assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a1SalesDivisionDescription1", "a1SalesDivisionDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            assertNull("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be null", testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            //assertEquals("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            assertNull("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be null", testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            //assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be ySalesAssistantDescription1", "ySalesAssistantDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            assertNull("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be null", testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            //assertEquals("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            assertNull("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be null", testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() is expected to be y1ClerkDescription1", "y1ClerkDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa1y1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa1y1DirectorClerkVO.getNote1());
            assertEquals("testaa1y1DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa1y1DirectorClerkVO.getNote2());



            log.info("testaa2y1DirectorClerkVO.getIdDirector() = "+ testaa2y1DirectorClerkVO.getIdDirector());
            log.info("testaa2y1DirectorClerkVO.getIdSalesManager() = "+ testaa2y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2y1DirectorClerkVO.getIdSalesDivision() = "+ testaa2y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2y1DirectorClerkVO.getIdClerk() = "+ testaa2y1DirectorClerkVO.getIdClerk());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2y1DirectorClerkVO.getDirectorDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2y1DirectorClerkVO.getClerkDescription2() = "+ testaa2y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getNote1() = "+ testaa2y1DirectorClerkVO.getNote1());
            log.info("testaa2y1DirectorClerkVO.getNote2() = "+ testaa2y1DirectorClerkVO.getNote2());
            assertEquals("testaa2y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa2y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2y1DirectorClerkVO.getDirectorDescription2());
            //assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            assertNull("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be null'", testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            //assertEquals("testaa2y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            assertNull("testaa2y1DirectorClerkVO.getSalesManagerDescription2() is expected to be null", testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            //assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            assertNull("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be null", testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            //assertEquals("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            assertNull("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be null", testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            //assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be ySalesAssistantDescription1", "ySalesAssistantDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            assertNull("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be null", testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            //assertEquals("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            assertNull("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be null", testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() is expected to be y1ClerkDescription1", "y1ClerkDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa2y1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa2y1DirectorClerkVO.getNote1());
            assertEquals("testaa2y1DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa2y1DirectorClerkVO.getNote2());



            log.info("testaa2z1DirectorClerkVO.getIdDirector() = "+ testaa2z1DirectorClerkVO.getIdDirector());
            log.info("testaa2z1DirectorClerkVO.getIdSalesManager() = "+ testaa2z1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z1DirectorClerkVO.getIdSalesDivision() = "+ testaa2z1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z1DirectorClerkVO.getIdClerk() = "+ testaa2z1DirectorClerkVO.getIdClerk());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z1DirectorClerkVO.getDirectorDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z1DirectorClerkVO.getClerkDescription2() = "+ testaa2z1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getNote1() = "+ testaa2z1DirectorClerkVO.getNote1());
            log.info("testaa2z1DirectorClerkVO.getNote2() = "+ testaa2z1DirectorClerkVO.getNote2());
            assertEquals("testaa2z1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2z1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z1DirectorClerkVO.getDirectorDescription2());
            //assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            assertNull("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() is expected to be null'", testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            //assertEquals("testaa2z1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            assertNull("testaa2z1DirectorClerkVO.getSalesManagerDescription2() is expected to be null", testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            //assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            assertNull("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() is expected to be null", testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            //assertEquals("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            assertNull("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() is expected to be null", testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            //assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() is expected to be zSalesAssistantDescription1", "zSalesAssistantDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            assertNull("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() is expected to be null", testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            //assertEquals("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            assertNull("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() is expected to be null",testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() is expected to be z1ClerkDescription1", "z1ClerkDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2z1DirectorClerkVO.getClerkDescription2() is expected to be z1ClerkDescription2", "z1ClerkDescription2",testaa2z1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa2z1DirectorClerkVO.getNote1());
            assertEquals("testaa2z1DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa2z1DirectorClerkVO.getNote2());


            log.info("testaa2z2DirectorClerkVO.getIdDirector() = "+ testaa2z2DirectorClerkVO.getIdDirector());
            log.info("testaa2z2DirectorClerkVO.getIdSalesManager() = "+ testaa2z2DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z2DirectorClerkVO.getIdSalesDivision() = "+ testaa2z2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z2DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z2DirectorClerkVO.getIdClerk() = "+ testaa2z2DirectorClerkVO.getIdClerk());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z2DirectorClerkVO.getDirectorDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z2DirectorClerkVO.getClerkDescription2() = "+ testaa2z2DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getNote1() = "+ testaa2z2DirectorClerkVO.getNote1());
            log.info("testaa2z2DirectorClerkVO.getNote2() = "+ testaa2z2DirectorClerkVO.getNote2());
            assertEquals("testaa2z2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z2DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa2z2DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z2DirectorClerkVO.getDirectorDescription2());
            //assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            assertNull("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() is expected to be null'", testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            //assertEquals("testaa2z2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            assertNull("testaa2z2DirectorClerkVO.getSalesManagerDescription2() is expected to be null",testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            //assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            assertNull("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() is expected to be null", testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            //assertEquals("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            assertNull("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() is expected to be null", testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            //assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() is expected to be zSalesAssistantDescription1", "zSalesAssistantDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            assertNull("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() is expected to be null", testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            //assertEquals("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            assertNull("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() is expected to be null", testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() is expected to be z2ClerkDescription1", "z2ClerkDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2z2DirectorClerkVO.getClerkDescription2() is expected to be z2ClerkDescription2", "z2ClerkDescription2",testaa2z2DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa2z2DirectorClerkVO.getNote1());
            assertEquals("testaa2z2DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa2z2DirectorClerkVO.getNote2());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeNodesSomeNullSourceAndTarget() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeNodesSomeNullSourceAndTarget() **************");
    }



    @Test public void testAddToRetainInCollectionTreeNodesNoValues(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoValues() ***************");
        try{
            BD bd = getBD();

            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorDescription1("aDirectorDescription1");
            aDirectorVO.setDirectorDescription2("aDirectorDescription2");

            SalesManagerVO aSalesManagerVO = new SalesManagerVO();
            aSalesManagerVO.setIdSalesManager("aSalesManager");
            aSalesManagerVO.setSalesManagerDescription1("aSalesManagerDescription1");
            aSalesManagerVO.setSalesManagerDescription2("aSalesManagerDescription2");
            aDirectorVO.setSalesManagerVO(aSalesManagerVO);

            Collection<SalesDivisionVO> aSalesDivisionVOs = new ArrayList<SalesDivisionVO>();
            SalesDivisionVO a1SalesDivisionVO = new SalesDivisionVO();
            a1SalesDivisionVO.setIdSalesManager("aSalesManager");
            a1SalesDivisionVO.setIdSalesDivision("1");
            a1SalesDivisionVO.setSalesDivisionDescription1("a1SalesDivisionDescription1");
            a1SalesDivisionVO.setSalesDivisionDescription2("a1SalesDivisionDescription2");

            SalesDivisionVO a2SalesDivisionVO = new SalesDivisionVO();
            a2SalesDivisionVO.setIdSalesManager("aSalesManager");
            a2SalesDivisionVO.setIdSalesDivision("2");
            a2SalesDivisionVO.setSalesDivisionDescription1("a2SalesDivisionDescription1");
            a2SalesDivisionVO.setSalesDivisionDescription2("a2SalesDivisionDescription2");

            aSalesDivisionVOs.add(a1SalesDivisionVO);
            aSalesDivisionVOs.add(a2SalesDivisionVO);
            aSalesManagerVO.setSalesDivisionVOs(aSalesDivisionVOs);

            SalesAssistantVO xSalesAssistantVO = new SalesAssistantVO();
            xSalesAssistantVO.setIdSalesAssistant("xSalesAssistant");
            xSalesAssistantVO.setSalesAssistantDescription1("xSalesAssistantDescription1");
            xSalesAssistantVO.setSalesAssistantDescription2("xSalesAssistantDescription2");

            SalesAssistantVO ySalesAssistantVO = new SalesAssistantVO();
            ySalesAssistantVO.setIdSalesAssistant("ySalesAssistant");
            ySalesAssistantVO.setSalesAssistantDescription1("ySalesAssistantDescription1");
            ySalesAssistantVO.setSalesAssistantDescription2("ySalesAssistantDescription2");

            SalesAssistantVO zSalesAssistantVO = new SalesAssistantVO();
            zSalesAssistantVO.setIdSalesAssistant("zSalesAssistant");
            zSalesAssistantVO.setSalesAssistantDescription1("zSalesAssistantDescription1");
            zSalesAssistantVO.setSalesAssistantDescription2("zSalesAssistantDescription2");


            Collection<SalesAssistantVO> a1SalesAssistantVOs = new ArrayList<SalesAssistantVO>();
            Collection<SalesAssistantVO> a2SalesAssistantVOs = new ArrayList<SalesAssistantVO>();

            a1SalesAssistantVOs.add(xSalesAssistantVO);
            a1SalesAssistantVOs.add(ySalesAssistantVO);
            a1SalesDivisionVO.setSalesAssistantVOs(a1SalesAssistantVOs);

            a2SalesAssistantVOs.add(ySalesAssistantVO);
            a2SalesAssistantVOs.add(zSalesAssistantVO);
            a2SalesDivisionVO.setSalesAssistantVOs(a2SalesAssistantVOs);

            ClerkVO x1ClerkVO = new ClerkVO();
            x1ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x1ClerkVO.setIdClerk("1");
            x1ClerkVO.setClerkDescription1("x1ClerkDescription1");
            x1ClerkVO.setClerkDescription2("x1ClerkDescription2");

            ClerkVO x2ClerkVO = new ClerkVO();
            x2ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x2ClerkVO.setIdClerk("2");
            x2ClerkVO.setClerkDescription1("x2ClerkDescription1");
            x2ClerkVO.setClerkDescription2("x2ClerkDescription2");

            Collection<ClerkVO> xClerkVOs = new ArrayList<ClerkVO>();
            xClerkVOs.add(x1ClerkVO);
            xClerkVOs.add(x2ClerkVO);
            xSalesAssistantVO.setClerkVOs(xClerkVOs);

            ClerkVO y1ClerkVO = new ClerkVO();
            y1ClerkVO.setIdSalesAssistant("ySalesAssistant");
            y1ClerkVO.setIdClerk("1");
            y1ClerkVO.setClerkDescription1("y1ClerkDescription1");
            y1ClerkVO.setClerkDescription2("y1ClerkDescription2");

            Collection<ClerkVO> yClerkVOs = new ArrayList<ClerkVO>();
            yClerkVOs.add(y1ClerkVO);
            ySalesAssistantVO.setClerkVOs(yClerkVOs);

            ClerkVO z1ClerkVO = new ClerkVO();
            z1ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z1ClerkVO.setIdClerk("1");
            z1ClerkVO.setClerkDescription1("z1ClerkDescription1");
            z1ClerkVO.setClerkDescription2("z1ClerkDescription2");

            ClerkVO z2ClerkVO = new ClerkVO();
            z2ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z2ClerkVO.setIdClerk("2");
            z2ClerkVO.setClerkDescription1("z2ClerkDescription1");
            z2ClerkVO.setClerkDescription2("z2ClerkDescription2");

            Collection<ClerkVO> zClerkVOs = new ArrayList<ClerkVO>();
            zClerkVOs.add(z1ClerkVO);
            zClerkVOs.add(z2ClerkVO);
            zSalesAssistantVO.setClerkVOs(zClerkVOs);

            bd.retrieveReference(aDirectorVO,"directorClerkVOs");


            String[] pkNames = {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};
            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String[][] nodeSourcePAttributeNames = new  String[5][];
            nodeSourcePAttributeNames[0] = new String[]{"directorDescription1","directorDescription2"};
            nodeSourcePAttributeNames[1] = new String[]{"salesManagerDescription1","salesManagerDescription2"};
            nodeSourcePAttributeNames[2] = new String[]{"salesDivisionDescription1","salesDivisionDescription2"};
            nodeSourcePAttributeNames[3] = new String[]{"salesAssistantDescription1","salesAssistantDescription2"};
            nodeSourcePAttributeNames[4] = new String[]{"clerkDescription1","clerkDescription2"};


            String[][] nodeTargetPAttributeNames = new  String[5][];
            nodeTargetPAttributeNames[0] = new String[]{"directorClerkDescription1","directorDescription2"};
            nodeTargetPAttributeNames[1] = new String[]{"directorClerkDescription2","salesManagerDescription2"};
            nodeTargetPAttributeNames[2] = new String[]{"directorClerkDescription3","salesDivisionDescription2"};
            nodeTargetPAttributeNames[3] = new String[]{"directorClerkDescription4","salesAssistantDescription2"};
            nodeTargetPAttributeNames[4] = new String[]{"directorClerkDescription5","clerkDescription2"};

            bd.addToRetainInCollectionTreeNodes(aDirectorVO, "directorClerkVOs", pkNames, path, nodeSourcePAttributeNames,  nodeTargetPAttributeNames);

            Collection<DirectorClerkVO> directorClerkVOs = aDirectorVO.getDirectorClerkVOs();
            log.info("directorClerkVOs.size() = "+directorClerkVOs.size());
            assertEquals("directorClerkVOs.size() expected is 6",6,directorClerkVOs.size());
            Iterator<DirectorClerkVO> directorClerkVOsIterator = directorClerkVOs.iterator();

            DirectorClerkVO testaa1x1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1x2DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z2DirectorClerkVO = directorClerkVOsIterator.next();


            log.info("testaa1x1DirectorClerkVO.getIdDirector() = "+ testaa1x1DirectorClerkVO.getIdDirector());
            log.info("testaa1x1DirectorClerkVO.getIdSalesManager() = "+ testaa1x1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x1DirectorClerkVO.getIdSalesDivision() = "+ testaa1x1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x1DirectorClerkVO.getIdClerk() = "+ testaa1x1DirectorClerkVO.getIdClerk());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x1DirectorClerkVO.getDirectorDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x1DirectorClerkVO.getClerkDescription2() = "+ testaa1x1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getNote1() = "+ testaa1x1DirectorClerkVO.getNote1());
            log.info("testaa1x1DirectorClerkVO.getNote2() = "+ testaa1x1DirectorClerkVO.getNote2());
            assertEquals("testaa1x1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1x1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() is expected to be 'DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorDescription2() is expected to be 'DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() is expected to be 'DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getSalesManagerDescription2() is expected to be 'SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() is expected to be 'DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() is expected to be 'SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() is expected to be 'DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() is expected to be 'DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x1DirectorClerkVO.getClerkDescription2() is expected to be 'CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getNote1() is expected to be 'NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote1());
            assertEquals("testaa1x1DirectorClerkVO.getNote2() is expected to be 'NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote2());



            log.info("testaa1x2DirectorClerkVO.getIdDirector() = "+ testaa1x2DirectorClerkVO.getIdDirector());
            log.info("testaa1x2DirectorClerkVO.getIdSalesManager() = "+ testaa1x2DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x2DirectorClerkVO.getIdSalesDivision() = "+ testaa1x2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x2DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x2DirectorClerkVO.getIdClerk() = "+ testaa1x2DirectorClerkVO.getIdClerk());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x2DirectorClerkVO.getDirectorDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x2DirectorClerkVO.getClerkDescription2() = "+ testaa1x2DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getNote1() = "+ testaa1x2DirectorClerkVO.getNote1());
            log.info("testaa1x2DirectorClerkVO.getNote2() = "+ testaa1x2DirectorClerkVO.getNote2());
            assertEquals("testaa1x2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x2DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa1x2DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1x2DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() is expected to be a1SalesDivisionDescription1", "a1SalesDivisionDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() is expected to be xSalesAssistantDescription1", "xSalesAssistantDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'xSalesAssistantDescription2'", "xSalesAssistantDescription2",testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() is expected to be x2ClerkDescription1", "x2ClerkDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x2DirectorClerkVO.getClerkDescription2() is expected to be x2ClerkDescription2", "x2ClerkDescription2",testaa1x2DirectorClerkVO.getClerkDescription2());
            assertNull("testaa1x2DirectorClerkVO.getNote1() is expected to be null", testaa1x2DirectorClerkVO.getNote1());
            assertNull("testaa1x2DirectorClerkVO.getNote2() is expected to be null", testaa1x2DirectorClerkVO.getNote2());


            log.info("testaa1y1DirectorClerkVO.getIdDirector() = "+ testaa1y1DirectorClerkVO.getIdDirector());
            log.info("testaa1y1DirectorClerkVO.getIdSalesManager() = "+ testaa1y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1y1DirectorClerkVO.getIdSalesDivision() = "+ testaa1y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1y1DirectorClerkVO.getIdClerk() = "+ testaa1y1DirectorClerkVO.getIdClerk());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1y1DirectorClerkVO.getDirectorDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1y1DirectorClerkVO.getClerkDescription2() = "+ testaa1y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getNote1() = "+ testaa1y1DirectorClerkVO.getNote1());
            log.info("testaa1y1DirectorClerkVO.getNote2() = "+ testaa1y1DirectorClerkVO.getNote2());
            assertEquals("testaa1y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa1y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1y1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a1SalesDivisionDescription1", "a1SalesDivisionDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be ySalesAssistantDescription1", "ySalesAssistantDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() is expected to be y1ClerkDescription1", "y1ClerkDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa1y1DirectorClerkVO.getClerkDescription2());
            assertNull("testaa1y1DirectorClerkVO.getNote1() is expected to be null", testaa1y1DirectorClerkVO.getNote1());
            assertNull("testaa1y1DirectorClerkVO.getNote2() is expected to be null", testaa1y1DirectorClerkVO.getNote2());



            log.info("testaa2y1DirectorClerkVO.getIdDirector() = "+ testaa2y1DirectorClerkVO.getIdDirector());
            log.info("testaa2y1DirectorClerkVO.getIdSalesManager() = "+ testaa2y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2y1DirectorClerkVO.getIdSalesDivision() = "+ testaa2y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2y1DirectorClerkVO.getIdClerk() = "+ testaa2y1DirectorClerkVO.getIdClerk());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2y1DirectorClerkVO.getDirectorDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2y1DirectorClerkVO.getClerkDescription2() = "+ testaa2y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getNote1() = "+ testaa2y1DirectorClerkVO.getNote1());
            log.info("testaa2y1DirectorClerkVO.getNote2() = "+ testaa2y1DirectorClerkVO.getNote2());
            assertEquals("testaa2y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa2y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2y1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be ySalesAssistantDescription1", "ySalesAssistantDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() is expected to be y1ClerkDescription1", "y1ClerkDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa2y1DirectorClerkVO.getClerkDescription2());
            assertNull("testaa2y1DirectorClerkVO.getNote1() is expected to be null", testaa2y1DirectorClerkVO.getNote1());
            assertNull("testaa2y1DirectorClerkVO.getNote2() is expected to be null", testaa2y1DirectorClerkVO.getNote2());



            log.info("testaa2z1DirectorClerkVO.getIdDirector() = "+ testaa2z1DirectorClerkVO.getIdDirector());
            log.info("testaa2z1DirectorClerkVO.getIdSalesManager() = "+ testaa2z1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z1DirectorClerkVO.getIdSalesDivision() = "+ testaa2z1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z1DirectorClerkVO.getIdClerk() = "+ testaa2z1DirectorClerkVO.getIdClerk());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z1DirectorClerkVO.getDirectorDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z1DirectorClerkVO.getClerkDescription2() = "+ testaa2z1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getNote1() = "+ testaa2z1DirectorClerkVO.getNote1());
            log.info("testaa2z1DirectorClerkVO.getNote2() = "+ testaa2z1DirectorClerkVO.getNote2());
            assertEquals("testaa2z1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2z1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() is expected to be zSalesAssistantDescription1", "zSalesAssistantDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() is expected to be z1ClerkDescription1", "z1ClerkDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2z1DirectorClerkVO.getClerkDescription2() is expected to be z1ClerkDescription2", "z1ClerkDescription2",testaa2z1DirectorClerkVO.getClerkDescription2());
            assertNull("testaa2z1DirectorClerkVO.getNote1() is expected to be null", testaa2z1DirectorClerkVO.getNote1());
            assertNull("testaa2z1DirectorClerkVO.getNote2() is expected to be null", testaa2z1DirectorClerkVO.getNote2());


            log.info("testaa2z2DirectorClerkVO.getIdDirector() = "+ testaa2z2DirectorClerkVO.getIdDirector());
            log.info("testaa2z2DirectorClerkVO.getIdSalesManager() = "+ testaa2z2DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z2DirectorClerkVO.getIdSalesDivision() = "+ testaa2z2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z2DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z2DirectorClerkVO.getIdClerk() = "+ testaa2z2DirectorClerkVO.getIdClerk());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z2DirectorClerkVO.getDirectorDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z2DirectorClerkVO.getClerkDescription2() = "+ testaa2z2DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getNote1() = "+ testaa2z2DirectorClerkVO.getNote1());
            log.info("testaa2z2DirectorClerkVO.getNote2() = "+ testaa2z2DirectorClerkVO.getNote2());
            assertEquals("testaa2z2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z2DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa2z2DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z2DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() is expected to be zSalesAssistantDescription1", "zSalesAssistantDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() is expected to be z2ClerkDescription1", "z2ClerkDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2z2DirectorClerkVO.getClerkDescription2() is expected to be z2ClerkDescription2", "z2ClerkDescription2",testaa2z2DirectorClerkVO.getClerkDescription2());
            assertNull("testaa2z2DirectorClerkVO.getNote1() is expected to be null", testaa2z2DirectorClerkVO.getNote1());
            assertNull("testaa2z2DirectorClerkVO.getNote2() is expected to be null", testaa2z2DirectorClerkVO.getNote2());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoValues() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoValues() **************");
    }

    @Test public void testAddToRetainInCollectionTreeNodesNoTargetNoValues(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoTargetNoValues() ***************");
        try{
            BD bd = getBD();

            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorDescription1("aDirectorDescription1");
            aDirectorVO.setDirectorDescription2("aDirectorDescription2");

            SalesManagerVO aSalesManagerVO = new SalesManagerVO();
            aSalesManagerVO.setIdSalesManager("aSalesManager");
            aSalesManagerVO.setSalesManagerDescription1("aSalesManagerDescription1");
            aSalesManagerVO.setSalesManagerDescription2("aSalesManagerDescription2");
            aDirectorVO.setSalesManagerVO(aSalesManagerVO);

            Collection<SalesDivisionVO> aSalesDivisionVOs = new ArrayList<SalesDivisionVO>();
            SalesDivisionVO a1SalesDivisionVO = new SalesDivisionVO();
            a1SalesDivisionVO.setIdSalesManager("aSalesManager");
            a1SalesDivisionVO.setIdSalesDivision("1");
            a1SalesDivisionVO.setSalesDivisionDescription1("a1SalesDivisionDescription1");
            a1SalesDivisionVO.setSalesDivisionDescription2("a1SalesDivisionDescription2");

            SalesDivisionVO a2SalesDivisionVO = new SalesDivisionVO();
            a2SalesDivisionVO.setIdSalesManager("aSalesManager");
            a2SalesDivisionVO.setIdSalesDivision("2");
            a2SalesDivisionVO.setSalesDivisionDescription1("a2SalesDivisionDescription1");
            a2SalesDivisionVO.setSalesDivisionDescription2("a2SalesDivisionDescription2");

            aSalesDivisionVOs.add(a1SalesDivisionVO);
            aSalesDivisionVOs.add(a2SalesDivisionVO);
            aSalesManagerVO.setSalesDivisionVOs(aSalesDivisionVOs);

            SalesAssistantVO xSalesAssistantVO = new SalesAssistantVO();
            xSalesAssistantVO.setIdSalesAssistant("xSalesAssistant");
            xSalesAssistantVO.setSalesAssistantDescription1("xSalesAssistantDescription1");
            xSalesAssistantVO.setSalesAssistantDescription2("xSalesAssistantDescription2");

            SalesAssistantVO ySalesAssistantVO = new SalesAssistantVO();
            ySalesAssistantVO.setIdSalesAssistant("ySalesAssistant");
            ySalesAssistantVO.setSalesAssistantDescription1("ySalesAssistantDescription1");
            ySalesAssistantVO.setSalesAssistantDescription2("ySalesAssistantDescription2");

            SalesAssistantVO zSalesAssistantVO = new SalesAssistantVO();
            zSalesAssistantVO.setIdSalesAssistant("zSalesAssistant");
            zSalesAssistantVO.setSalesAssistantDescription1("zSalesAssistantDescription1");
            zSalesAssistantVO.setSalesAssistantDescription2("zSalesAssistantDescription2");


            Collection<SalesAssistantVO> a1SalesAssistantVOs = new ArrayList<SalesAssistantVO>();
            Collection<SalesAssistantVO> a2SalesAssistantVOs = new ArrayList<SalesAssistantVO>();

            a1SalesAssistantVOs.add(xSalesAssistantVO);
            a1SalesAssistantVOs.add(ySalesAssistantVO);
            a1SalesDivisionVO.setSalesAssistantVOs(a1SalesAssistantVOs);

            a2SalesAssistantVOs.add(ySalesAssistantVO);
            a2SalesAssistantVOs.add(zSalesAssistantVO);
            a2SalesDivisionVO.setSalesAssistantVOs(a2SalesAssistantVOs);

            ClerkVO x1ClerkVO = new ClerkVO();
            x1ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x1ClerkVO.setIdClerk("1");
            x1ClerkVO.setClerkDescription1("x1ClerkDescription1");
            x1ClerkVO.setClerkDescription2("x1ClerkDescription2");

            ClerkVO x2ClerkVO = new ClerkVO();
            x2ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x2ClerkVO.setIdClerk("2");
            x2ClerkVO.setClerkDescription1("x2ClerkDescription1");
            x2ClerkVO.setClerkDescription2("x2ClerkDescription2");

            Collection<ClerkVO> xClerkVOs = new ArrayList<ClerkVO>();
            xClerkVOs.add(x1ClerkVO);
            xClerkVOs.add(x2ClerkVO);
            xSalesAssistantVO.setClerkVOs(xClerkVOs);

            ClerkVO y1ClerkVO = new ClerkVO();
            y1ClerkVO.setIdSalesAssistant("ySalesAssistant");
            y1ClerkVO.setIdClerk("1");
            y1ClerkVO.setClerkDescription1("y1ClerkDescription1");
            y1ClerkVO.setClerkDescription2("y1ClerkDescription2");

            Collection<ClerkVO> yClerkVOs = new ArrayList<ClerkVO>();
            yClerkVOs.add(y1ClerkVO);
            ySalesAssistantVO.setClerkVOs(yClerkVOs);

            ClerkVO z1ClerkVO = new ClerkVO();
            z1ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z1ClerkVO.setIdClerk("1");
            z1ClerkVO.setClerkDescription1("z1ClerkDescription1");
            z1ClerkVO.setClerkDescription2("z1ClerkDescription2");

            ClerkVO z2ClerkVO = new ClerkVO();
            z2ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z2ClerkVO.setIdClerk("2");
            z2ClerkVO.setClerkDescription1("z2ClerkDescription1");
            z2ClerkVO.setClerkDescription2("z2ClerkDescription2");

            Collection<ClerkVO> zClerkVOs = new ArrayList<ClerkVO>();
            zClerkVOs.add(z1ClerkVO);
            zClerkVOs.add(z2ClerkVO);
            zSalesAssistantVO.setClerkVOs(zClerkVOs);

            bd.retrieveReference(aDirectorVO,"directorClerkVOs");


            String[] pkNames = {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};
            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String[][] nodeSourcePAttributeNames = new  String[5][];
            nodeSourcePAttributeNames[0] = new String[]{"directorDescription2"};
            nodeSourcePAttributeNames[1] = new String[]{"salesManagerDescription2"};
            nodeSourcePAttributeNames[2] = new String[]{"salesDivisionDescription2"};
            nodeSourcePAttributeNames[3] = new String[]{"salesAssistantDescription2"};
            nodeSourcePAttributeNames[4] = new String[]{"clerkDescription2"};




            bd.addToRetainInCollectionTreeNodes(aDirectorVO, "directorClerkVOs", pkNames, path, nodeSourcePAttributeNames);

            Collection<DirectorClerkVO> directorClerkVOs = aDirectorVO.getDirectorClerkVOs();
            log.info("directorClerkVOs.size() = "+directorClerkVOs.size());
            assertEquals("directorClerkVOs.size() expected is 6",6,directorClerkVOs.size());
            Iterator<DirectorClerkVO> directorClerkVOsIterator = directorClerkVOs.iterator();

            DirectorClerkVO testaa1x1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1x2DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z2DirectorClerkVO = directorClerkVOsIterator.next();


            log.info("testaa1x1DirectorClerkVO.getIdDirector() = "+ testaa1x1DirectorClerkVO.getIdDirector());
            log.info("testaa1x1DirectorClerkVO.getIdSalesManager() = "+ testaa1x1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x1DirectorClerkVO.getIdSalesDivision() = "+ testaa1x1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x1DirectorClerkVO.getIdClerk() = "+ testaa1x1DirectorClerkVO.getIdClerk());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x1DirectorClerkVO.getDirectorDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x1DirectorClerkVO.getClerkDescription2() = "+ testaa1x1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getNote1() = "+ testaa1x1DirectorClerkVO.getNote1());
            log.info("testaa1x1DirectorClerkVO.getNote2() = "+ testaa1x1DirectorClerkVO.getNote2());
            assertEquals("testaa1x1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1x1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() is expected to be 'DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorDescription2() is expected to be 'DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() is expected to be 'DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getSalesManagerDescription2() is expected to be 'SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() is expected to be 'DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() is expected to be 'SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() is expected to be 'DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() is expected to be 'DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x1DirectorClerkVO.getClerkDescription2() is expected to be 'CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getNote1() is expected to be 'NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote1());
            assertEquals("testaa1x1DirectorClerkVO.getNote2() is expected to be 'NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote2());



            log.info("testaa1x2DirectorClerkVO.getIdDirector() = "+ testaa1x2DirectorClerkVO.getIdDirector());
            log.info("testaa1x2DirectorClerkVO.getIdSalesManager() = "+ testaa1x2DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x2DirectorClerkVO.getIdSalesDivision() = "+ testaa1x2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x2DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x2DirectorClerkVO.getIdClerk() = "+ testaa1x2DirectorClerkVO.getIdClerk());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x2DirectorClerkVO.getDirectorDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x2DirectorClerkVO.getClerkDescription2() = "+ testaa1x2DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getNote1() = "+ testaa1x2DirectorClerkVO.getNote1());
            log.info("testaa1x2DirectorClerkVO.getNote2() = "+ testaa1x2DirectorClerkVO.getNote2());
            assertEquals("testaa1x2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x2DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa1x2DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1x2DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'xSalesAssistantDescription2'", "xSalesAssistantDescription2",testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getClerkDescription2() is expected to be x2ClerkDescription2", "x2ClerkDescription2",testaa1x2DirectorClerkVO.getClerkDescription2());
            assertNull("testaa1x2DirectorClerkVO.getNote1() is expected to be null", testaa1x2DirectorClerkVO.getNote1());
            assertNull("testaa1x2DirectorClerkVO.getNote2() is expected to be null", testaa1x2DirectorClerkVO.getNote2());


            log.info("testaa1y1DirectorClerkVO.getIdDirector() = "+ testaa1y1DirectorClerkVO.getIdDirector());
            log.info("testaa1y1DirectorClerkVO.getIdSalesManager() = "+ testaa1y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1y1DirectorClerkVO.getIdSalesDivision() = "+ testaa1y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1y1DirectorClerkVO.getIdClerk() = "+ testaa1y1DirectorClerkVO.getIdClerk());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1y1DirectorClerkVO.getDirectorDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1y1DirectorClerkVO.getClerkDescription2() = "+ testaa1y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getNote1() = "+ testaa1y1DirectorClerkVO.getNote1());
            log.info("testaa1y1DirectorClerkVO.getNote2() = "+ testaa1y1DirectorClerkVO.getNote2());
            assertEquals("testaa1y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa1y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1y1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa1y1DirectorClerkVO.getClerkDescription2());
            assertNull("testaa1y1DirectorClerkVO.getNote1() is expected to be null", testaa1y1DirectorClerkVO.getNote1());
            assertNull("testaa1y1DirectorClerkVO.getNote2() is expected to be null", testaa1y1DirectorClerkVO.getNote2());



            log.info("testaa2y1DirectorClerkVO.getIdDirector() = "+ testaa2y1DirectorClerkVO.getIdDirector());
            log.info("testaa2y1DirectorClerkVO.getIdSalesManager() = "+ testaa2y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2y1DirectorClerkVO.getIdSalesDivision() = "+ testaa2y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2y1DirectorClerkVO.getIdClerk() = "+ testaa2y1DirectorClerkVO.getIdClerk());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2y1DirectorClerkVO.getDirectorDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2y1DirectorClerkVO.getClerkDescription2() = "+ testaa2y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getNote1() = "+ testaa2y1DirectorClerkVO.getNote1());
            log.info("testaa2y1DirectorClerkVO.getNote2() = "+ testaa2y1DirectorClerkVO.getNote2());
            assertEquals("testaa2y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa2y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2y1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa2y1DirectorClerkVO.getClerkDescription2());
            assertNull("testaa2y1DirectorClerkVO.getNote1() is expected to be null", testaa2y1DirectorClerkVO.getNote1());
            assertNull("testaa2y1DirectorClerkVO.getNote2() is expected to be null", testaa2y1DirectorClerkVO.getNote2());



            log.info("testaa2z1DirectorClerkVO.getIdDirector() = "+ testaa2z1DirectorClerkVO.getIdDirector());
            log.info("testaa2z1DirectorClerkVO.getIdSalesManager() = "+ testaa2z1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z1DirectorClerkVO.getIdSalesDivision() = "+ testaa2z1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z1DirectorClerkVO.getIdClerk() = "+ testaa2z1DirectorClerkVO.getIdClerk());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z1DirectorClerkVO.getDirectorDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z1DirectorClerkVO.getClerkDescription2() = "+ testaa2z1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getNote1() = "+ testaa2z1DirectorClerkVO.getNote1());
            log.info("testaa2z1DirectorClerkVO.getNote2() = "+ testaa2z1DirectorClerkVO.getNote2());
            assertEquals("testaa2z1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2z1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getClerkDescription2() is expected to be z1ClerkDescription2", "z1ClerkDescription2",testaa2z1DirectorClerkVO.getClerkDescription2());
            assertNull("testaa2z1DirectorClerkVO.getNote1() is expected to be null", testaa2z1DirectorClerkVO.getNote1());
            assertNull("testaa2z1DirectorClerkVO.getNote2() is expected to be null", testaa2z1DirectorClerkVO.getNote2());


            log.info("testaa2z2DirectorClerkVO.getIdDirector() = "+ testaa2z2DirectorClerkVO.getIdDirector());
            log.info("testaa2z2DirectorClerkVO.getIdSalesManager() = "+ testaa2z2DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z2DirectorClerkVO.getIdSalesDivision() = "+ testaa2z2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z2DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z2DirectorClerkVO.getIdClerk() = "+ testaa2z2DirectorClerkVO.getIdClerk());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z2DirectorClerkVO.getDirectorDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z2DirectorClerkVO.getClerkDescription2() = "+ testaa2z2DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getNote1() = "+ testaa2z2DirectorClerkVO.getNote1());
            log.info("testaa2z2DirectorClerkVO.getNote2() = "+ testaa2z2DirectorClerkVO.getNote2());
            assertEquals("testaa2z2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z2DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa2z2DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z2DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getClerkDescription2() is expected to be z2ClerkDescription2", "z2ClerkDescription2",testaa2z2DirectorClerkVO.getClerkDescription2());
            assertNull("testaa2z2DirectorClerkVO.getNote1() is expected to be null", testaa2z2DirectorClerkVO.getNote1());
            assertNull("testaa2z2DirectorClerkVO.getNote2() is expected to be null", testaa2z2DirectorClerkVO.getNote2());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoTargetNoValues() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoTargetNoValues() **************");
    }


    @Test public void testAddToRetainInCollectionTreeNodesNoSourceNoTargetNoValues(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoSourceNoTargetNoValues() ***************");
        try{
            BD bd = getBD();

            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorDescription1("aDirectorDescription1");
            aDirectorVO.setDirectorDescription2("aDirectorDescription2");

            SalesManagerVO aSalesManagerVO = new SalesManagerVO();
            aSalesManagerVO.setIdSalesManager("aSalesManager");
            aSalesManagerVO.setSalesManagerDescription1("aSalesManagerDescription1");
            aSalesManagerVO.setSalesManagerDescription2("aSalesManagerDescription2");
            aDirectorVO.setSalesManagerVO(aSalesManagerVO);

            Collection<SalesDivisionVO> aSalesDivisionVOs = new ArrayList<SalesDivisionVO>();
            SalesDivisionVO a1SalesDivisionVO = new SalesDivisionVO();
            a1SalesDivisionVO.setIdSalesManager("aSalesManager");
            a1SalesDivisionVO.setIdSalesDivision("1");
            a1SalesDivisionVO.setSalesDivisionDescription1("a1SalesDivisionDescription1");
            a1SalesDivisionVO.setSalesDivisionDescription2("a1SalesDivisionDescription2");

            SalesDivisionVO a2SalesDivisionVO = new SalesDivisionVO();
            a2SalesDivisionVO.setIdSalesManager("aSalesManager");
            a2SalesDivisionVO.setIdSalesDivision("2");
            a2SalesDivisionVO.setSalesDivisionDescription1("a2SalesDivisionDescription1");
            a2SalesDivisionVO.setSalesDivisionDescription2("a2SalesDivisionDescription2");

            aSalesDivisionVOs.add(a1SalesDivisionVO);
            aSalesDivisionVOs.add(a2SalesDivisionVO);
            aSalesManagerVO.setSalesDivisionVOs(aSalesDivisionVOs);

            SalesAssistantVO xSalesAssistantVO = new SalesAssistantVO();
            xSalesAssistantVO.setIdSalesAssistant("xSalesAssistant");
            xSalesAssistantVO.setSalesAssistantDescription1("xSalesAssistantDescription1");
            xSalesAssistantVO.setSalesAssistantDescription2("xSalesAssistantDescription2");

            SalesAssistantVO ySalesAssistantVO = new SalesAssistantVO();
            ySalesAssistantVO.setIdSalesAssistant("ySalesAssistant");
            ySalesAssistantVO.setSalesAssistantDescription1("ySalesAssistantDescription1");
            ySalesAssistantVO.setSalesAssistantDescription2("ySalesAssistantDescription2");

            SalesAssistantVO zSalesAssistantVO = new SalesAssistantVO();
            zSalesAssistantVO.setIdSalesAssistant("zSalesAssistant");
            zSalesAssistantVO.setSalesAssistantDescription1("zSalesAssistantDescription1");
            zSalesAssistantVO.setSalesAssistantDescription2("zSalesAssistantDescription2");


            Collection<SalesAssistantVO> a1SalesAssistantVOs = new ArrayList<SalesAssistantVO>();
            Collection<SalesAssistantVO> a2SalesAssistantVOs = new ArrayList<SalesAssistantVO>();

            a1SalesAssistantVOs.add(xSalesAssistantVO);
            a1SalesAssistantVOs.add(ySalesAssistantVO);
            a1SalesDivisionVO.setSalesAssistantVOs(a1SalesAssistantVOs);

            a2SalesAssistantVOs.add(ySalesAssistantVO);
            a2SalesAssistantVOs.add(zSalesAssistantVO);
            a2SalesDivisionVO.setSalesAssistantVOs(a2SalesAssistantVOs);

            ClerkVO x1ClerkVO = new ClerkVO();
            x1ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x1ClerkVO.setIdClerk("1");
            x1ClerkVO.setClerkDescription1("x1ClerkDescription1");
            x1ClerkVO.setClerkDescription2("x1ClerkDescription2");

            ClerkVO x2ClerkVO = new ClerkVO();
            x2ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x2ClerkVO.setIdClerk("2");
            x2ClerkVO.setClerkDescription1("x2ClerkDescription1");
            x2ClerkVO.setClerkDescription2("x2ClerkDescription2");

            Collection<ClerkVO> xClerkVOs = new ArrayList<ClerkVO>();
            xClerkVOs.add(x1ClerkVO);
            xClerkVOs.add(x2ClerkVO);
            xSalesAssistantVO.setClerkVOs(xClerkVOs);

            ClerkVO y1ClerkVO = new ClerkVO();
            y1ClerkVO.setIdSalesAssistant("ySalesAssistant");
            y1ClerkVO.setIdClerk("1");
            y1ClerkVO.setClerkDescription1("y1ClerkDescription1");
            y1ClerkVO.setClerkDescription2("y1ClerkDescription2");

            Collection<ClerkVO> yClerkVOs = new ArrayList<ClerkVO>();
            yClerkVOs.add(y1ClerkVO);
            ySalesAssistantVO.setClerkVOs(yClerkVOs);

            ClerkVO z1ClerkVO = new ClerkVO();
            z1ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z1ClerkVO.setIdClerk("1");
            z1ClerkVO.setClerkDescription1("z1ClerkDescription1");
            z1ClerkVO.setClerkDescription2("z1ClerkDescription2");

            ClerkVO z2ClerkVO = new ClerkVO();
            z2ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z2ClerkVO.setIdClerk("2");
            z2ClerkVO.setClerkDescription1("z2ClerkDescription1");
            z2ClerkVO.setClerkDescription2("z2ClerkDescription2");

            Collection<ClerkVO> zClerkVOs = new ArrayList<ClerkVO>();
            zClerkVOs.add(z1ClerkVO);
            zClerkVOs.add(z2ClerkVO);
            zSalesAssistantVO.setClerkVOs(zClerkVOs);

            bd.retrieveReference(aDirectorVO,"directorClerkVOs");


            String[] pkNames = {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};
            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";





            bd.addToRetainInCollectionTreeNodes(aDirectorVO, "directorClerkVOs", pkNames, path);

            Collection<DirectorClerkVO> directorClerkVOs = aDirectorVO.getDirectorClerkVOs();
            log.info("directorClerkVOs.size() = "+directorClerkVOs.size());
            assertEquals("directorClerkVOs.size() expected is 6",6,directorClerkVOs.size());
            Iterator<DirectorClerkVO> directorClerkVOsIterator = directorClerkVOs.iterator();

            DirectorClerkVO testaa1x1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1x2DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z2DirectorClerkVO = directorClerkVOsIterator.next();


            log.info("testaa1x1DirectorClerkVO.getIdDirector() = "+ testaa1x1DirectorClerkVO.getIdDirector());
            log.info("testaa1x1DirectorClerkVO.getIdSalesManager() = "+ testaa1x1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x1DirectorClerkVO.getIdSalesDivision() = "+ testaa1x1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x1DirectorClerkVO.getIdClerk() = "+ testaa1x1DirectorClerkVO.getIdClerk());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x1DirectorClerkVO.getDirectorDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x1DirectorClerkVO.getClerkDescription2() = "+ testaa1x1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getNote1() = "+ testaa1x1DirectorClerkVO.getNote1());
            log.info("testaa1x1DirectorClerkVO.getNote2() = "+ testaa1x1DirectorClerkVO.getNote2());
            assertEquals("testaa1x1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1x1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() is expected to be 'DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorDescription2() is expected to be 'DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() is expected to be 'DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getSalesManagerDescription2() is expected to be 'SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() is expected to be 'DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() is expected to be 'SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() is expected to be 'DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() is expected to be 'DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x1DirectorClerkVO.getClerkDescription2() is expected to be 'CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getNote1() is expected to be 'NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote1());
            assertEquals("testaa1x1DirectorClerkVO.getNote2() is expected to be 'NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote2());



            log.info("testaa1x2DirectorClerkVO.getIdDirector() = "+ testaa1x2DirectorClerkVO.getIdDirector());
            log.info("testaa1x2DirectorClerkVO.getIdSalesManager() = "+ testaa1x2DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x2DirectorClerkVO.getIdSalesDivision() = "+ testaa1x2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x2DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x2DirectorClerkVO.getIdClerk() = "+ testaa1x2DirectorClerkVO.getIdClerk());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x2DirectorClerkVO.getDirectorDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x2DirectorClerkVO.getClerkDescription2() = "+ testaa1x2DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getNote1() = "+ testaa1x2DirectorClerkVO.getNote1());
            log.info("testaa1x2DirectorClerkVO.getNote2() = "+ testaa1x2DirectorClerkVO.getNote2());
            assertEquals("testaa1x2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x2DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa1x2DirectorClerkVO.getIdClerk());
            assertNull("testaa1x2DirectorClerkVO.getNote1() is expected to be null", testaa1x2DirectorClerkVO.getNote1());
            assertNull("testaa1x2DirectorClerkVO.getNote2() is expected to be null", testaa1x2DirectorClerkVO.getNote2());


            log.info("testaa1y1DirectorClerkVO.getIdDirector() = "+ testaa1y1DirectorClerkVO.getIdDirector());
            log.info("testaa1y1DirectorClerkVO.getIdSalesManager() = "+ testaa1y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1y1DirectorClerkVO.getIdSalesDivision() = "+ testaa1y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1y1DirectorClerkVO.getIdClerk() = "+ testaa1y1DirectorClerkVO.getIdClerk());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1y1DirectorClerkVO.getDirectorDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1y1DirectorClerkVO.getClerkDescription2() = "+ testaa1y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getNote1() = "+ testaa1y1DirectorClerkVO.getNote1());
            log.info("testaa1y1DirectorClerkVO.getNote2() = "+ testaa1y1DirectorClerkVO.getNote2());
            assertEquals("testaa1y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa1y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1y1DirectorClerkVO.getIdClerk());
            assertNull("testaa1y1DirectorClerkVO.getNote1() is expected to be null", testaa1y1DirectorClerkVO.getNote1());
            assertNull("testaa1y1DirectorClerkVO.getNote2() is expected to be null", testaa1y1DirectorClerkVO.getNote2());



            log.info("testaa2y1DirectorClerkVO.getIdDirector() = "+ testaa2y1DirectorClerkVO.getIdDirector());
            log.info("testaa2y1DirectorClerkVO.getIdSalesManager() = "+ testaa2y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2y1DirectorClerkVO.getIdSalesDivision() = "+ testaa2y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2y1DirectorClerkVO.getIdClerk() = "+ testaa2y1DirectorClerkVO.getIdClerk());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2y1DirectorClerkVO.getDirectorDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2y1DirectorClerkVO.getClerkDescription2() = "+ testaa2y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getNote1() = "+ testaa2y1DirectorClerkVO.getNote1());
            log.info("testaa2y1DirectorClerkVO.getNote2() = "+ testaa2y1DirectorClerkVO.getNote2());
            assertEquals("testaa2y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa2y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2y1DirectorClerkVO.getIdClerk());
            assertNull("testaa2y1DirectorClerkVO.getNote1() is expected to be null", testaa2y1DirectorClerkVO.getNote1());
            assertNull("testaa2y1DirectorClerkVO.getNote2() is expected to be null", testaa2y1DirectorClerkVO.getNote2());



            log.info("testaa2z1DirectorClerkVO.getIdDirector() = "+ testaa2z1DirectorClerkVO.getIdDirector());
            log.info("testaa2z1DirectorClerkVO.getIdSalesManager() = "+ testaa2z1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z1DirectorClerkVO.getIdSalesDivision() = "+ testaa2z1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z1DirectorClerkVO.getIdClerk() = "+ testaa2z1DirectorClerkVO.getIdClerk());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z1DirectorClerkVO.getDirectorDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z1DirectorClerkVO.getClerkDescription2() = "+ testaa2z1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getNote1() = "+ testaa2z1DirectorClerkVO.getNote1());
            log.info("testaa2z1DirectorClerkVO.getNote2() = "+ testaa2z1DirectorClerkVO.getNote2());
            assertEquals("testaa2z1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2z1DirectorClerkVO.getIdClerk());
            assertNull("testaa2z1DirectorClerkVO.getNote1() is expected to be null", testaa2z1DirectorClerkVO.getNote1());
            assertNull("testaa2z1DirectorClerkVO.getNote2() is expected to be null", testaa2z1DirectorClerkVO.getNote2());


            log.info("testaa2z2DirectorClerkVO.getIdDirector() = "+ testaa2z2DirectorClerkVO.getIdDirector());
            log.info("testaa2z2DirectorClerkVO.getIdSalesManager() = "+ testaa2z2DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z2DirectorClerkVO.getIdSalesDivision() = "+ testaa2z2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z2DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z2DirectorClerkVO.getIdClerk() = "+ testaa2z2DirectorClerkVO.getIdClerk());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z2DirectorClerkVO.getDirectorDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z2DirectorClerkVO.getClerkDescription2() = "+ testaa2z2DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getNote1() = "+ testaa2z2DirectorClerkVO.getNote1());
            log.info("testaa2z2DirectorClerkVO.getNote2() = "+ testaa2z2DirectorClerkVO.getNote2());
            assertEquals("testaa2z2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z2DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa2z2DirectorClerkVO.getIdClerk());
            assertNull("testaa2z2DirectorClerkVO.getNote1() is expected to be null", testaa2z2DirectorClerkVO.getNote1());
            assertNull("testaa2z2DirectorClerkVO.getNote2() is expected to be null", testaa2z2DirectorClerkVO.getNote2());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoSourceNoTargetNoValues() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoSourceNoTargetNoValues() **************");
    }


    @Test public void testAddToRetainInCollectionTreeNodesNoPkNames(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoPkNames() ***************");
        try{
            BD bd = getBD();

            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorDescription1("aDirectorDescription1");
            aDirectorVO.setDirectorDescription2("aDirectorDescription2");

            SalesManagerVO aSalesManagerVO = new SalesManagerVO();
            aSalesManagerVO.setIdSalesManager("aSalesManager");
            aSalesManagerVO.setSalesManagerDescription1("aSalesManagerDescription1");
            aSalesManagerVO.setSalesManagerDescription2("aSalesManagerDescription2");
            aDirectorVO.setSalesManagerVO(aSalesManagerVO);

            Collection<SalesDivisionVO> aSalesDivisionVOs = new ArrayList<SalesDivisionVO>();
            SalesDivisionVO a1SalesDivisionVO = new SalesDivisionVO();
            a1SalesDivisionVO.setIdSalesManager("aSalesManager");
            a1SalesDivisionVO.setIdSalesDivision("1");
            a1SalesDivisionVO.setSalesDivisionDescription1("a1SalesDivisionDescription1");
            a1SalesDivisionVO.setSalesDivisionDescription2("a1SalesDivisionDescription2");

            SalesDivisionVO a2SalesDivisionVO = new SalesDivisionVO();
            a2SalesDivisionVO.setIdSalesManager("aSalesManager");
            a2SalesDivisionVO.setIdSalesDivision("2");
            a2SalesDivisionVO.setSalesDivisionDescription1("a2SalesDivisionDescription1");
            a2SalesDivisionVO.setSalesDivisionDescription2("a2SalesDivisionDescription2");

            aSalesDivisionVOs.add(a1SalesDivisionVO);
            aSalesDivisionVOs.add(a2SalesDivisionVO);
            aSalesManagerVO.setSalesDivisionVOs(aSalesDivisionVOs);

            SalesAssistantVO xSalesAssistantVO = new SalesAssistantVO();
            xSalesAssistantVO.setIdSalesAssistant("xSalesAssistant");
            xSalesAssistantVO.setSalesAssistantDescription1("xSalesAssistantDescription1");
            xSalesAssistantVO.setSalesAssistantDescription2("xSalesAssistantDescription2");

            SalesAssistantVO ySalesAssistantVO = new SalesAssistantVO();
            ySalesAssistantVO.setIdSalesAssistant("ySalesAssistant");
            ySalesAssistantVO.setSalesAssistantDescription1("ySalesAssistantDescription1");
            ySalesAssistantVO.setSalesAssistantDescription2("ySalesAssistantDescription2");

            SalesAssistantVO zSalesAssistantVO = new SalesAssistantVO();
            zSalesAssistantVO.setIdSalesAssistant("zSalesAssistant");
            zSalesAssistantVO.setSalesAssistantDescription1("zSalesAssistantDescription1");
            zSalesAssistantVO.setSalesAssistantDescription2("zSalesAssistantDescription2");


            Collection<SalesAssistantVO> a1SalesAssistantVOs = new ArrayList<SalesAssistantVO>();
            Collection<SalesAssistantVO> a2SalesAssistantVOs = new ArrayList<SalesAssistantVO>();

            a1SalesAssistantVOs.add(xSalesAssistantVO);
            a1SalesAssistantVOs.add(ySalesAssistantVO);
            a1SalesDivisionVO.setSalesAssistantVOs(a1SalesAssistantVOs);

            a2SalesAssistantVOs.add(ySalesAssistantVO);
            a2SalesAssistantVOs.add(zSalesAssistantVO);
            a2SalesDivisionVO.setSalesAssistantVOs(a2SalesAssistantVOs);

            ClerkVO x1ClerkVO = new ClerkVO();
            x1ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x1ClerkVO.setIdClerk("1");
            x1ClerkVO.setClerkDescription1("x1ClerkDescription1");
            x1ClerkVO.setClerkDescription2("x1ClerkDescription2");

            ClerkVO x2ClerkVO = new ClerkVO();
            x2ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x2ClerkVO.setIdClerk("2");
            x2ClerkVO.setClerkDescription1("x2ClerkDescription1");
            x2ClerkVO.setClerkDescription2("x2ClerkDescription2");

            Collection<ClerkVO> xClerkVOs = new ArrayList<ClerkVO>();
            xClerkVOs.add(x1ClerkVO);
            xClerkVOs.add(x2ClerkVO);
            xSalesAssistantVO.setClerkVOs(xClerkVOs);

            ClerkVO y1ClerkVO = new ClerkVO();
            y1ClerkVO.setIdSalesAssistant("ySalesAssistant");
            y1ClerkVO.setIdClerk("1");
            y1ClerkVO.setClerkDescription1("y1ClerkDescription1");
            y1ClerkVO.setClerkDescription2("y1ClerkDescription2");

            Collection<ClerkVO> yClerkVOs = new ArrayList<ClerkVO>();
            yClerkVOs.add(y1ClerkVO);
            ySalesAssistantVO.setClerkVOs(yClerkVOs);

            ClerkVO z1ClerkVO = new ClerkVO();
            z1ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z1ClerkVO.setIdClerk("1");
            z1ClerkVO.setClerkDescription1("z1ClerkDescription1");
            z1ClerkVO.setClerkDescription2("z1ClerkDescription2");

            ClerkVO z2ClerkVO = new ClerkVO();
            z2ClerkVO.setIdSalesAssistant("zSalesAssistant");
            z2ClerkVO.setIdClerk("2");
            z2ClerkVO.setClerkDescription1("z2ClerkDescription1");
            z2ClerkVO.setClerkDescription2("z2ClerkDescription2");

            Collection<ClerkVO> zClerkVOs = new ArrayList<ClerkVO>();
            zClerkVOs.add(z1ClerkVO);
            zClerkVOs.add(z2ClerkVO);
            zSalesAssistantVO.setClerkVOs(zClerkVOs);

            bd.retrieveReference(aDirectorVO,"directorClerkVOs");


            //String[] pkNames = {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};
            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String[][] nodeSourcePAttributeNames = new  String[5][];
            nodeSourcePAttributeNames[0] = new String[]{"directorDescription1","directorDescription2"};
            nodeSourcePAttributeNames[1] = new String[]{"salesManagerDescription1","salesManagerDescription2"};
            nodeSourcePAttributeNames[2] = new String[]{"salesDivisionDescription1","salesDivisionDescription2"};
            nodeSourcePAttributeNames[3] = new String[]{"salesAssistantDescription1","salesAssistantDescription2"};
            nodeSourcePAttributeNames[4] = new String[]{"clerkDescription1","clerkDescription2"};


            String[][] nodeTargetPAttributeNames = new  String[5][];
            nodeTargetPAttributeNames[0] = new String[]{"directorClerkDescription1","directorDescription2"};
            nodeTargetPAttributeNames[1] = new String[]{"directorClerkDescription2","salesManagerDescription2"};
            nodeTargetPAttributeNames[2] = new String[]{"directorClerkDescription3","salesDivisionDescription2"};
            nodeTargetPAttributeNames[3] = new String[]{"directorClerkDescription4","salesAssistantDescription2"};
            nodeTargetPAttributeNames[4] = new String[]{"directorClerkDescription5","clerkDescription2"};

            String[] pAttributeNames =   {"note1","note2"};
            Object[] valuesArray =   {"Note1","Note2"};
            bd.addToRetainInCollectionTreeNodes(aDirectorVO, "directorClerkVOs",  path, nodeSourcePAttributeNames,  nodeTargetPAttributeNames,   pAttributeNames,valuesArray);

            Collection<DirectorClerkVO> directorClerkVOs = aDirectorVO.getDirectorClerkVOs();
            log.info("directorClerkVOs.size() = "+directorClerkVOs.size());
            assertEquals("directorClerkVOs.size() expected is 6",6,directorClerkVOs.size());
            Iterator<DirectorClerkVO> directorClerkVOsIterator = directorClerkVOs.iterator();

            DirectorClerkVO testaa1x1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1x2DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa1y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2y1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z1DirectorClerkVO = directorClerkVOsIterator.next();
            DirectorClerkVO testaa2z2DirectorClerkVO = directorClerkVOsIterator.next();


            log.info("testaa1x1DirectorClerkVO.getIdDirector() = "+ testaa1x1DirectorClerkVO.getIdDirector());
            log.info("testaa1x1DirectorClerkVO.getIdSalesManager() = "+ testaa1x1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x1DirectorClerkVO.getIdSalesDivision() = "+ testaa1x1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x1DirectorClerkVO.getIdClerk() = "+ testaa1x1DirectorClerkVO.getIdClerk());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x1DirectorClerkVO.getDirectorDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x1DirectorClerkVO.getClerkDescription2() = "+ testaa1x1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x1DirectorClerkVO.getNote1() = "+ testaa1x1DirectorClerkVO.getNote1());
            log.info("testaa1x1DirectorClerkVO.getNote2() = "+ testaa1x1DirectorClerkVO.getNote2());
            assertEquals("testaa1x1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x1DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1x1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription1() is expected to be 'DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorDescription2() is expected to be 'DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription2() is expected to be 'DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getSalesManagerDescription2() is expected to be 'SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESMANAGERDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription3() is expected to be 'DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION3 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1x1DirectorClerkVO.getSalesDivisionDescription2() is expected to be 'SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESDIVISIONDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription4() is expected to be 'DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION4 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1x1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "SALESASSISTANTDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getDirectorClerkDescription5() is expected to be 'DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "DIRECTORCLERKDESCRIPTION5 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x1DirectorClerkVO.getClerkDescription2() is expected to be 'CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "CLERKDESCRIPTION2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1x1DirectorClerkVO.getNote1() is expected to be 'NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE1 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote1());
            assertEquals("testaa1x1DirectorClerkVO.getNote2() is expected to be 'NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)'", "NOTE2 of (aDirector,aSalesManager,1,xSalesAssistant,1)",testaa1x1DirectorClerkVO.getNote2());



            log.info("testaa1x2DirectorClerkVO.getIdDirector() = "+ testaa1x2DirectorClerkVO.getIdDirector());
            log.info("testaa1x2DirectorClerkVO.getIdSalesManager() = "+ testaa1x2DirectorClerkVO.getIdSalesManager());
            log.info("testaa1x2DirectorClerkVO.getIdSalesDivision() = "+ testaa1x2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1x2DirectorClerkVO.getIdSalesAssistant() = "+ testaa1x2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1x2DirectorClerkVO.getIdClerk() = "+ testaa1x2DirectorClerkVO.getIdClerk());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1x2DirectorClerkVO.getDirectorDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1x2DirectorClerkVO.getClerkDescription2() = "+ testaa1x2DirectorClerkVO.getClerkDescription2());
            log.info("testaa1x2DirectorClerkVO.getNote1() = "+ testaa1x2DirectorClerkVO.getNote1());
            log.info("testaa1x2DirectorClerkVO.getNote2() = "+ testaa1x2DirectorClerkVO.getNote2());
            assertEquals("testaa1x2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1x2DirectorClerkVO.getIdDirector());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1x2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1x2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1x2DirectorClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant", "xSalesAssistant",testaa1x2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1x2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa1x2DirectorClerkVO.getIdClerk());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1x2DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1x2DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription3() is expected to be a1SalesDivisionDescription1", "a1SalesDivisionDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1x2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1x2DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription4() is expected to be xSalesAssistantDescription1", "xSalesAssistantDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1x2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'xSalesAssistantDescription2'", "xSalesAssistantDescription2",testaa1x2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getDirectorClerkDescription5() is expected to be x2ClerkDescription1", "x2ClerkDescription1",testaa1x2DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1x2DirectorClerkVO.getClerkDescription2() is expected to be x2ClerkDescription2", "x2ClerkDescription2",testaa1x2DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1x2DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa1x2DirectorClerkVO.getNote1());
            assertEquals("testaa1x2DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa1x2DirectorClerkVO.getNote2());


            log.info("testaa1y1DirectorClerkVO.getIdDirector() = "+ testaa1y1DirectorClerkVO.getIdDirector());
            log.info("testaa1y1DirectorClerkVO.getIdSalesManager() = "+ testaa1y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa1y1DirectorClerkVO.getIdSalesDivision() = "+ testaa1y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa1y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa1y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa1y1DirectorClerkVO.getIdClerk() = "+ testaa1y1DirectorClerkVO.getIdClerk());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa1y1DirectorClerkVO.getDirectorDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa1y1DirectorClerkVO.getClerkDescription2() = "+ testaa1y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa1y1DirectorClerkVO.getNote1() = "+ testaa1y1DirectorClerkVO.getNote1());
            log.info("testaa1y1DirectorClerkVO.getNote2() = "+ testaa1y1DirectorClerkVO.getNote2());
            assertEquals("testaa1y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa1y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa1y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testaa1y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa1y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa1y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa1y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa1y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa1y1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa1y1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a1SalesDivisionDescription1", "a1SalesDivisionDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa1y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2", "a1SalesDivisionDescription2",testaa1y1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be ySalesAssistantDescription1", "ySalesAssistantDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa1y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa1y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getDirectorClerkDescription5() is expected to be y1ClerkDescription1", "y1ClerkDescription1",testaa1y1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa1y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa1y1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa1y1DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa1y1DirectorClerkVO.getNote1());
            assertEquals("testaa1y1DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa1y1DirectorClerkVO.getNote2());



            log.info("testaa2y1DirectorClerkVO.getIdDirector() = "+ testaa2y1DirectorClerkVO.getIdDirector());
            log.info("testaa2y1DirectorClerkVO.getIdSalesManager() = "+ testaa2y1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2y1DirectorClerkVO.getIdSalesDivision() = "+ testaa2y1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2y1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2y1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2y1DirectorClerkVO.getIdClerk() = "+ testaa2y1DirectorClerkVO.getIdClerk());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2y1DirectorClerkVO.getDirectorDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2y1DirectorClerkVO.getClerkDescription2() = "+ testaa2y1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2y1DirectorClerkVO.getNote1() = "+ testaa2y1DirectorClerkVO.getNote1());
            log.info("testaa2y1DirectorClerkVO.getNote2() = "+ testaa2y1DirectorClerkVO.getNote2());
            assertEquals("testaa2y1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2y1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2y1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2y1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2y1DirectorClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant", "ySalesAssistant",testaa2y1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2y1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2y1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2y1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2y1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa2y1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2y1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription4() is expected to be ySalesAssistantDescription1", "ySalesAssistantDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa2y1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'ySalesAssistantDescription2'", "ySalesAssistantDescription2",testaa2y1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getDirectorClerkDescription5() is expected to be y1ClerkDescription1", "y1ClerkDescription1",testaa2y1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2y1DirectorClerkVO.getClerkDescription2() is expected to be y1ClerkDescription2", "y1ClerkDescription2",testaa2y1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa2y1DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa2y1DirectorClerkVO.getNote1());
            assertEquals("testaa2y1DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa2y1DirectorClerkVO.getNote2());



            log.info("testaa2z1DirectorClerkVO.getIdDirector() = "+ testaa2z1DirectorClerkVO.getIdDirector());
            log.info("testaa2z1DirectorClerkVO.getIdSalesManager() = "+ testaa2z1DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z1DirectorClerkVO.getIdSalesDivision() = "+ testaa2z1DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z1DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z1DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z1DirectorClerkVO.getIdClerk() = "+ testaa2z1DirectorClerkVO.getIdClerk());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z1DirectorClerkVO.getDirectorDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z1DirectorClerkVO.getClerkDescription2() = "+ testaa2z1DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z1DirectorClerkVO.getNote1() = "+ testaa2z1DirectorClerkVO.getNote1());
            log.info("testaa2z1DirectorClerkVO.getNote2() = "+ testaa2z1DirectorClerkVO.getNote2());
            assertEquals("testaa2z1DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z1DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z1DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z1DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z1DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z1DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z1DirectorClerkVO.getIdClerk() is expected to be 1", "1",testaa2z1DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z1DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z1DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa2z1DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z1DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription4() is expected to be zSalesAssistantDescription1", "zSalesAssistantDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa2z1DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z1DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getDirectorClerkDescription5() is expected to be z1ClerkDescription1", "z1ClerkDescription1",testaa2z1DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2z1DirectorClerkVO.getClerkDescription2() is expected to be z1ClerkDescription2", "z1ClerkDescription2",testaa2z1DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa2z1DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa2z1DirectorClerkVO.getNote1());
            assertEquals("testaa2z1DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa2z1DirectorClerkVO.getNote2());


            log.info("testaa2z2DirectorClerkVO.getIdDirector() = "+ testaa2z2DirectorClerkVO.getIdDirector());
            log.info("testaa2z2DirectorClerkVO.getIdSalesManager() = "+ testaa2z2DirectorClerkVO.getIdSalesManager());
            log.info("testaa2z2DirectorClerkVO.getIdSalesDivision() = "+ testaa2z2DirectorClerkVO.getIdSalesDivision());
            log.info("testaa2z2DirectorClerkVO.getIdSalesAssistant() = "+ testaa2z2DirectorClerkVO.getIdSalesAssistant());
            log.info("testaa2z2DirectorClerkVO.getIdClerk() = "+ testaa2z2DirectorClerkVO.getIdClerk());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testaa2z2DirectorClerkVO.getDirectorDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getSalesManagerDescription2() = "+ testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            log.info("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() = "+ testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            log.info("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() = "+ testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            log.info("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() = "+ testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            log.info("testaa2z2DirectorClerkVO.getClerkDescription2() = "+ testaa2z2DirectorClerkVO.getClerkDescription2());
            log.info("testaa2z2DirectorClerkVO.getNote1() = "+ testaa2z2DirectorClerkVO.getNote1());
            log.info("testaa2z2DirectorClerkVO.getNote2() = "+ testaa2z2DirectorClerkVO.getNote2());
            assertEquals("testaa2z2DirectorClerkVO.getIdDirector() is expected to be aDirector","aDirector", testaa2z2DirectorClerkVO.getIdDirector());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", testaa2z2DirectorClerkVO.getIdSalesManager());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesDivision() is expected to be 2","2", testaa2z2DirectorClerkVO.getIdSalesDivision());
            assertEquals("testaa2z2DirectorClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant", "zSalesAssistant",testaa2z2DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testaa2z2DirectorClerkVO.getIdClerk() is expected to be 2", "2",testaa2z2DirectorClerkVO.getIdClerk());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription1() is expected to be aDirectorDescription1", "aDirectorDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorDescription2() is expected to be aDirectorDescription2", "aDirectorDescription2",testaa2z2DirectorClerkVO.getDirectorDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription2() is expected to be aSalesManagerDescription1'", "aSalesManagerDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2", "aSalesManagerDescription2",testaa2z2DirectorClerkVO.getSalesManagerDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription3() is expected to be a2SalesDivisionDescription1", "a2SalesDivisionDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription3());
            assertEquals("testaa2z2DirectorClerkVO.getSalesDivisionDescription2() is expected to be a2SalesDivisionDescription2", "a2SalesDivisionDescription2",testaa2z2DirectorClerkVO.getSalesDivisionDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription4() is expected to be zSalesAssistantDescription1", "zSalesAssistantDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription4());
            assertEquals("testaa2z2DirectorClerkVO.getSalesAssistantDescription2() is expected to be 'zSalesAssistantDescription2'", "zSalesAssistantDescription2",testaa2z2DirectorClerkVO.getSalesAssistantDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getDirectorClerkDescription5() is expected to be z2ClerkDescription1", "z2ClerkDescription1",testaa2z2DirectorClerkVO.getDirectorClerkDescription5());
            assertEquals("testaa2z2DirectorClerkVO.getClerkDescription2() is expected to be z2ClerkDescription2", "z2ClerkDescription2",testaa2z2DirectorClerkVO.getClerkDescription2());
            assertEquals("testaa2z2DirectorClerkVO.getNote1() is expected to be Note1", "Note1",testaa2z2DirectorClerkVO.getNote1());
            assertEquals("testaa2z2DirectorClerkVO.getNote2() is expected to be Note2", "Note2",testaa2z2DirectorClerkVO.getNote2());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoPkNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionTreeNodesNoPkNames() **************");
    }



    protected Collection<DirectorClerkVO> buildDirectorClerkVOs() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildDirectorClerkVOs() ***************");
        Collection<DirectorClerkVO> directorClerkVOs =null;
        try{
            DirectorClerkVO aa1x1DirectorClerkVO = new DirectorClerkVO();
            aa1x1DirectorClerkVO.setIdDirector("aDirector");
            aa1x1DirectorClerkVO.setIdSalesManager("aSalesManager");
            aa1x1DirectorClerkVO.setIdSalesDivision("1");
            aa1x1DirectorClerkVO.setIdSalesAssistant("xSalesAssistant") ;
            aa1x1DirectorClerkVO.setIdClerk("1");


            DirectorClerkVO aa1x2DirectorClerkVO = new DirectorClerkVO();
            aa1x2DirectorClerkVO.setIdDirector("aDirector");
            aa1x2DirectorClerkVO.setIdSalesManager("aSalesManager");
            aa1x2DirectorClerkVO.setIdSalesDivision("1");
            aa1x2DirectorClerkVO.setIdSalesAssistant("xSalesAssistant");
            aa1x2DirectorClerkVO.setIdClerk("2");

            DirectorClerkVO aa1y1DirectorClerkVO = new DirectorClerkVO();
            aa1y1DirectorClerkVO.setIdDirector("aDirector");
            aa1y1DirectorClerkVO.setIdSalesManager("aSalesManager");
            aa1y1DirectorClerkVO.setIdSalesDivision("1");
            aa1y1DirectorClerkVO.setIdSalesAssistant("ySalesAssistant");
            aa1y1DirectorClerkVO.setIdClerk("1");

            DirectorClerkVO aa2y1DirectorClerkVO = new DirectorClerkVO();
            aa2y1DirectorClerkVO.setIdDirector("aDirector");
            aa2y1DirectorClerkVO.setIdSalesManager("aSalesManager");
            aa2y1DirectorClerkVO.setIdSalesDivision("2");
            aa2y1DirectorClerkVO.setIdSalesAssistant("ySalesAssistant");
            aa2y1DirectorClerkVO.setIdClerk("1");

            DirectorClerkVO aa2z1DirectorClerkVO = new DirectorClerkVO();
            aa2z1DirectorClerkVO.setIdDirector("aDirector");
            aa2z1DirectorClerkVO.setIdSalesManager("aSalesManager");
            aa2z1DirectorClerkVO.setIdSalesDivision("2");
            aa2z1DirectorClerkVO.setIdSalesAssistant("zSalesAssistant");
            aa2z1DirectorClerkVO.setIdClerk("1");

            DirectorClerkVO aa2z2DirectorClerkVO = new DirectorClerkVO();
            aa2z2DirectorClerkVO.setIdDirector("aDirector");
            aa2z2DirectorClerkVO.setIdSalesManager("aSalesManager");
            aa2z2DirectorClerkVO.setIdSalesDivision("2");
            aa2z2DirectorClerkVO.setIdSalesAssistant("zSalesAssistant");
            aa2z2DirectorClerkVO.setIdClerk("2");


            directorClerkVOs = new ArrayList<DirectorClerkVO>();
            directorClerkVOs.add(aa1x1DirectorClerkVO);
            directorClerkVOs.add(aa1x2DirectorClerkVO);
            directorClerkVOs.add(aa1y1DirectorClerkVO);
            directorClerkVOs.add(aa2y1DirectorClerkVO);
            directorClerkVOs.add(aa2z1DirectorClerkVO);
            directorClerkVOs.add(aa2z2DirectorClerkVO);
        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildDirectorClerkVOs() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildDirectorClerkVOs() **************");
        return directorClerkVOs;
    }

    protected void checkDirectorVO(DirectorVO aDirectorVO) throws Exception{
        log.info("************Entering the "+getThisClassName()+".checkDirectorVO(DirectorVO aDirectorVO) ***************");
        try{
            SalesManagerVO aSalesManagerVO = aDirectorVO.getSalesManagerVO();
            log.info("aSalesManagerVO.getIdSalesManager() = "+ aSalesManagerVO.getIdSalesManager());
            log.info("aSalesManagerVO.getSalesManagerDescription1() = "+ aSalesManagerVO.getSalesManagerDescription1());
            log.info("aSalesManagerVO.getSalesManagerDescription2() = "+ aSalesManagerVO.getSalesManagerDescription2());
            assertEquals("aSalesManagerVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aSalesManagerVO.getIdSalesManager());
            assertEquals("aSalesManagerVO.getSalesManagerDescription1() is expected to be SalesManagerDescription1","SalesManagerDescription1", aSalesManagerVO.getSalesManagerDescription1());
            assertEquals("aSalesManagerVO.getSalesManagerDescription2() is expected to be SalesManagerDescription2","SalesManagerDescription2", aSalesManagerVO.getSalesManagerDescription2());


            Collection<SalesDivisionVO> aSalesDivisionVOs = aSalesManagerVO.getSalesDivisionVOs();
            log.info("aSalesDivisionVOs.size() = "+aSalesDivisionVOs.size());
            assertEquals("aSalesDivisionVOs.size() expected is 2",2,aSalesDivisionVOs.size());
            Iterator<SalesDivisionVO> aSalesDivisionVOsIterator = aSalesDivisionVOs.iterator();

            SalesDivisionVO aa1SalesDivisionVO = aSalesDivisionVOsIterator.next();
            log.info("aa1SalesDivisionVO.getIdSalesManager() = "+ aa1SalesDivisionVO.getIdSalesManager());
            log.info("aa1SalesDivisionVO.getIdSalesDivision() = "+ aa1SalesDivisionVO.getIdSalesDivision());
            log.info("aa1SalesDivisionVO.getSalesDivisionDescription1() = "+ aa1SalesDivisionVO.getSalesDivisionDescription1());
            log.info("aa1SalesDivisionVO.getSalesDivisionDescription2() = "+ aa1SalesDivisionVO.getSalesDivisionDescription2());
            assertEquals("aa1SalesDivisionVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aa1SalesDivisionVO.getIdSalesManager());
            assertEquals("aa1SalesDivisionVO.getIdSalesDivision() is expected to be 1","1", aa1SalesDivisionVO.getIdSalesDivision());
            assertEquals("aa1SalesDivisionVO.getSalesDivisionDescription1() is expected to be SalesDivisionDescription1","SalesDivisionDescription1", aa1SalesDivisionVO.getSalesDivisionDescription1());
            assertEquals("aa1SalesDivisionVO.getSalesDivisionDescription2() is expected to be SalesDivisionDescription2","SalesDivisionDescription2", aa1SalesDivisionVO.getSalesDivisionDescription2());

            Collection<SalesAssistantVO> aa1SalesAssistantVOs = aa1SalesDivisionVO.getSalesAssistantVOs();
            log.info("aa1SalesAssistantVOs.size() = "+ aa1SalesAssistantVOs.size());
            assertEquals("aa1SalesAssistantVOs.size() expected is 2",2, aa1SalesAssistantVOs.size());
            Iterator<SalesAssistantVO> aa1SalesAssistantVOsIterator = aa1SalesAssistantVOs.iterator();

            SalesAssistantVO aa1xSalesAssistantVO =  aa1SalesAssistantVOsIterator.next();

            log.info("aa1xSalesAssistantVO.getIdSalesAssistant() = "+ aa1xSalesAssistantVO.getIdSalesAssistant());
            log.info("aa1xSalesAssistantVO.getSalesAssistantDescription1() = "+ aa1xSalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa1xSalesAssistantVO.getSalesAssistantDescription2() = "+ aa1xSalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa1xSalesAssistantVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1xSalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa1xSalesAssistantVO.getSalesAssistantDescription1() is expected to be SalesAssistantDescription1","SalesAssistantDescription1", aa1xSalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa1xSalesAssistantVO.getSalesAssistantDescription2() is expected to be SalesAssistantDescription2","SalesAssistantDescription2", aa1xSalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa1xClerkVOs = aa1xSalesAssistantVO.getClerkVOs();
            log.info("aa1xClerkVOs.size() = "+ aa1xClerkVOs.size());
            assertEquals("aa1xClerkVOs.size() expected is 2",2, aa1xClerkVOs.size());
            Iterator<ClerkVO> aa1xClerkVOsIterator = aa1xClerkVOs.iterator();

            ClerkVO aa1x1ClerkVO =  aa1xClerkVOsIterator.next();
            log.info("aa1x1ClerkVO.getIdSalesAssistant() = "+ aa1x1ClerkVO.getIdSalesAssistant());
            log.info("aa1x1ClerkVO.getIdClerk() = "+ aa1x1ClerkVO.getIdClerk());
            log.info("aa1x1ClerkVO.getClerkDescription1() = "+ aa1x1ClerkVO.getClerkDescription1());
            log.info("aa1x1ClerkVO.getClerkDescription2() = "+ aa1x1ClerkVO.getClerkDescription2());
            assertEquals("aa1x1ClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1x1ClerkVO.getIdSalesAssistant());
            assertEquals("aa1x1ClerkVO.getIdClerk() is expected to be 1","1", aa1x1ClerkVO.getIdClerk());
            assertEquals("aa1x1ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa1x1ClerkVO.getClerkDescription1());
            assertEquals("aa1x1ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa1x1ClerkVO.getClerkDescription2());

            ClerkVO aa1x2ClerkVO =  aa1xClerkVOsIterator.next();
            log.info("aa1x2ClerkVO.getIdSalesAssistant() = "+ aa1x2ClerkVO.getIdSalesAssistant());
            log.info("aa1x2ClerkVO.getIdClerk() = "+ aa1x2ClerkVO.getIdClerk());
            log.info("aa1x2ClerkVO.getClerkDescription1() = "+ aa1x2ClerkVO.getClerkDescription1());
            log.info("aa1x2ClerkVO.getClerkDescription2() = "+ aa1x2ClerkVO.getClerkDescription2());
            assertEquals("aa1x2ClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1x2ClerkVO.getIdSalesAssistant());
            assertEquals("aa1x2ClerkVO.getIdClerk() is expected to be 2","2", aa1x2ClerkVO.getIdClerk());
            assertEquals("aa1x2ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa1x2ClerkVO.getClerkDescription1());
            assertEquals("aa1x2ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa1x2ClerkVO.getClerkDescription2());


            SalesAssistantVO aa1ySalesAssistantVO =  aa1SalesAssistantVOsIterator.next();
            log.info("aa1ySalesAssistantVO.getIdSalesAssistant() = "+ aa1ySalesAssistantVO.getIdSalesAssistant());
            log.info("aa1ySalesAssistantVO.getSalesAssistantDescription1() = "+ aa1ySalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa1ySalesAssistantVO.getSalesAssistantDescription2() = "+ aa1ySalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa1ySalesAssistantVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa1ySalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa1ySalesAssistantVO.getSalesAssistantDescription1() is expected to be SalesAssistantDescription1","SalesAssistantDescription1", aa1ySalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa1ySalesAssistantVO.getSalesAssistantDescription2() is expected to be SalesAssistantDescription2","SalesAssistantDescription2", aa1ySalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa1yClerkVOs = aa1ySalesAssistantVO.getClerkVOs();
            log.info("aa1yClerkVOs.size() = "+ aa1yClerkVOs.size());
            assertEquals("aa1yClerkVOs.size() expected is 1", 1,aa1yClerkVOs.size());
            Iterator<ClerkVO> aa1yClerkVOsIterator = aa1yClerkVOs.iterator();

            ClerkVO aa1y1ClerkVO =  aa1yClerkVOsIterator.next();
            log.info("aa1y1ClerkVO.getIdSalesAssistant() = "+ aa1y1ClerkVO.getIdSalesAssistant());
            log.info("aa1y1ClerkVO.getIdClerk() = "+ aa1y1ClerkVO.getIdClerk());
            log.info("aa1y1ClerkVO.getClerkDescription1() = "+ aa1y1ClerkVO.getClerkDescription1());
            log.info("aa1y1ClerkVO.getClerkDescription2() = "+ aa1y1ClerkVO.getClerkDescription2());
            assertEquals("aa1y1ClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa1y1ClerkVO.getIdSalesAssistant());
            assertEquals("aa1y1ClerkVO.getIdClerk() is expected to be 1","1", aa1y1ClerkVO.getIdClerk());
            assertEquals("aa1y1ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa1y1ClerkVO.getClerkDescription1());
            assertEquals("aa1y1ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa1y1ClerkVO.getClerkDescription2());




            SalesDivisionVO aa2SalesDivisionVO = aSalesDivisionVOsIterator.next();

            log.info("aa2SalesDivisionVO.getIdSalesManager() = "+ aa2SalesDivisionVO.getIdSalesManager());
            log.info("aa2SalesDivisionVO.getIdSalesDivision() = "+ aa2SalesDivisionVO.getIdSalesDivision());
            log.info("aa2SalesDivisionVO.getSalesDivisionDescription1() = "+ aa2SalesDivisionVO.getSalesDivisionDescription1());
            log.info("aa2SalesDivisionVO.getSalesDivisionDescription2() = "+ aa2SalesDivisionVO.getSalesDivisionDescription2());
            assertEquals("aa2SalesDivisionVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aa1SalesDivisionVO.getIdSalesManager());
            assertEquals("aa2SalesDivisionVO.getIdSalesDivision() is expected to be 2","2", aa2SalesDivisionVO.getIdSalesDivision());
            assertEquals("aa2SalesDivisionVO.getSalesDivisionDescription1() is expected to be SalesDivisionDescription1","SalesDivisionDescription1", aa2SalesDivisionVO.getSalesDivisionDescription1());
            assertEquals("aa2SalesDivisionVO.getSalesDivisionDescription2() is expected to be SalesDivisionDescription2","SalesDivisionDescription2", aa2SalesDivisionVO.getSalesDivisionDescription2());

            Collection<SalesAssistantVO> aa2SalesAssistantVOs = aa2SalesDivisionVO.getSalesAssistantVOs();
            log.info("aa2SalesAssistantVOs.size() = "+ aa2SalesAssistantVOs.size());
            assertEquals("aa2SalesAssistantVOs.size() expected is 2",2, aa2SalesAssistantVOs.size());
            Iterator<SalesAssistantVO> aa2SalesAssistantVOsIterator = aa2SalesAssistantVOs.iterator();


            SalesAssistantVO aa2ySalesAssistantVO =  aa2SalesAssistantVOsIterator.next();
            log.info("aa2ySalesAssistantVO.getIdSalesAssistant() = "+ aa2ySalesAssistantVO.getIdSalesAssistant());
            log.info("aa2ySalesAssistantVO.getSalesAssistantDescription1() = "+ aa2ySalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa2ySalesAssistantVO.getSalesAssistantDescription2() = "+ aa2ySalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa2ySalesAssistantVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa2ySalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa2ySalesAssistantVO.getSalesAssistantDescription1() is expected to be SalesAssistantDescription1","SalesAssistantDescription1", aa2ySalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa2ySalesAssistantVO.getSalesAssistantDescription2() is expected to be SalesAssistantDescription2","SalesAssistantDescription2", aa2ySalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa2yClerkVOs = aa2ySalesAssistantVO.getClerkVOs();
            log.info("aa2yClerkVOs.size() = "+ aa2yClerkVOs.size());
            assertEquals("aa2yClerkVOs.size() expected is 1", 1,aa1yClerkVOs.size());
            Iterator<ClerkVO> aa2yClerkVOsIterator = aa2yClerkVOs.iterator();

            ClerkVO aa2y1ClerkVO =  aa2yClerkVOsIterator.next();
            log.info("aa2y1ClerkVO.getIdSalesAssistant() = "+ aa2y1ClerkVO.getIdSalesAssistant());
            log.info("aa2y1ClerkVO.getIdClerk() = "+ aa2y1ClerkVO.getIdClerk());
            log.info("aa2y1ClerkVO.getClerkDescription1() = "+ aa2y1ClerkVO.getClerkDescription1());
            log.info("aa2y1ClerkVO.getClerkDescription2() = "+ aa2y1ClerkVO.getClerkDescription2());
            assertEquals("aa2y1ClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa2y1ClerkVO.getIdSalesAssistant());
            assertEquals("aa2y1ClerkVO.getIdClerk() is expected to be 1","1", aa2y1ClerkVO.getIdClerk());
            assertEquals("aa2y1ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa2y1ClerkVO.getClerkDescription1());
            assertEquals("aa2y1ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa2y1ClerkVO.getClerkDescription2());



            SalesAssistantVO aa2zSalesAssistantVO =  aa2SalesAssistantVOsIterator.next();

            log.info("aa2zSalesAssistantVO.getIdSalesAssistant() = "+ aa2zSalesAssistantVO.getIdSalesAssistant());
            log.info("aa2zSalesAssistantVO.getSalesAssistantDescription1() = "+ aa2zSalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa2zSalesAssistantVO.getSalesAssistantDescription2() = "+ aa2zSalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa2zSalesAssistantVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2zSalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa2zSalesAssistantVO.getSalesAssistantDescription1() is expected to be SalesAssistantDescription1","SalesAssistantDescription1", aa2zSalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa2zSalesAssistantVO.getSalesAssistantDescription2() is expected to be SalesAssistantDescription2","SalesAssistantDescription2", aa2zSalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa2zClerkVOs = aa2zSalesAssistantVO.getClerkVOs();
            log.info("aa2zClerkVOs.size() = "+ aa2zClerkVOs.size());
            assertEquals("aa2zClerkVOs.size() expected is 2",2, aa2zClerkVOs.size());
            Iterator<ClerkVO> aa2zClerkVOsIterator = aa2zClerkVOs.iterator();

            ClerkVO aa2z1ClerkVO =  aa2zClerkVOsIterator.next();
            log.info("aa2z1ClerkVO.getIdSalesAssistant() = "+ aa2z1ClerkVO.getIdSalesAssistant());
            log.info("aa2z1ClerkVO.getIdClerk() = "+ aa2z1ClerkVO.getIdClerk());
            log.info("aa2z1ClerkVO.getClerkDescription1() = "+ aa2z1ClerkVO.getClerkDescription1());
            log.info("aa2z1ClerkVO.getClerkDescription2() = "+ aa2z1ClerkVO.getClerkDescription2());
            assertEquals("aa2z1ClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2z1ClerkVO.getIdSalesAssistant());
            assertEquals("aa2z1ClerkVO.getIdClerk() is expected to be 1","1", aa2z1ClerkVO.getIdClerk());
            assertEquals("aa2z1ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa2z1ClerkVO.getClerkDescription1());
            assertEquals("aa2z1ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa2z1ClerkVO.getClerkDescription2());

            ClerkVO aa2z2ClerkVO =  aa2zClerkVOsIterator.next();
            log.info("aa2z2ClerkVO.getIdSalesAssistant() = "+ aa2z2ClerkVO.getIdSalesAssistant());
            log.info("aa2z2ClerkVO.getIdClerk() = "+ aa2z2ClerkVO.getIdClerk());
            log.info("aa2z2ClerkVO.getClerkDescription1() = "+ aa2z2ClerkVO.getClerkDescription1());
            log.info("aa2z2ClerkVO.getClerkDescription2() = "+ aa2z2ClerkVO.getClerkDescription2());
            assertEquals("aa2z2ClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2z2ClerkVO.getIdSalesAssistant());
            assertEquals("aa2z2ClerkVO.getIdClerk() is expected to be 2","2", aa2z2ClerkVO.getIdClerk());
            assertEquals("aa2z2ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa2z2ClerkVO.getClerkDescription1());
            assertEquals("aa2z2ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa2z2ClerkVO.getClerkDescription2());


        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".checkDirectorVO(DirectorVO aDirectorVO) :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".checkDirectorVO(DirectorVO aDirectorVO) **************");

    }

    protected void checkDirectorVONoDescr(DirectorVO aDirectorVO) throws Exception{
        log.info("************Entering the "+getThisClassName()+".checkDirectorVONoDescr(DirectorVO aDirectorVO) ***************");
        try{
            SalesManagerVO aSalesManagerVO = aDirectorVO.getSalesManagerVO();
            log.info("aSalesManagerVO.getIdSalesManager() = "+ aSalesManagerVO.getIdSalesManager());
            assertEquals("aSalesManagerVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aSalesManagerVO.getIdSalesManager());


            Collection<SalesDivisionVO> aSalesDivisionVOs = aSalesManagerVO.getSalesDivisionVOs();
            log.info("aSalesDivisionVOs.size() = "+aSalesDivisionVOs.size());
            assertEquals("aSalesDivisionVOs.size() expected is 2",2,aSalesDivisionVOs.size());
            Iterator<SalesDivisionVO> aSalesDivisionVOsIterator = aSalesDivisionVOs.iterator();

            SalesDivisionVO aa1SalesDivisionVO = aSalesDivisionVOsIterator.next();
            log.info("aa1SalesDivisionVO.getIdSalesManager() = "+ aa1SalesDivisionVO.getIdSalesManager());
            log.info("aa1SalesDivisionVO.getIdSalesDivision() = "+ aa1SalesDivisionVO.getIdSalesDivision());
            assertEquals("aa1SalesDivisionVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aa1SalesDivisionVO.getIdSalesManager());
            assertEquals("aa1SalesDivisionVO.getIdSalesDivision() is expected to be 1","1", aa1SalesDivisionVO.getIdSalesDivision());

            Collection<SalesAssistantVO> aa1SalesAssistantVOs = aa1SalesDivisionVO.getSalesAssistantVOs();
            log.info("aa1SalesAssistantVOs.size() = "+ aa1SalesAssistantVOs.size());
            assertEquals("aa1SalesAssistantVOs.size() expected is 2",2, aa1SalesAssistantVOs.size());
            Iterator<SalesAssistantVO> aa1SalesAssistantVOsIterator = aa1SalesAssistantVOs.iterator();

            SalesAssistantVO aa1xSalesAssistantVO =  aa1SalesAssistantVOsIterator.next();

            log.info("aa1xSalesAssistantVO.getIdSalesAssistant() = "+ aa1xSalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa1xSalesAssistantVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1xSalesAssistantVO.getIdSalesAssistant());


            Collection<ClerkVO> aa1xClerkVOs = aa1xSalesAssistantVO.getClerkVOs();
            log.info("aa1xClerkVOs.size() = "+ aa1xClerkVOs.size());
            assertEquals("aa1xClerkVOs.size() expected is 2",2, aa1xClerkVOs.size());
            Iterator<ClerkVO> aa1xClerkVOsIterator = aa1xClerkVOs.iterator();

            ClerkVO aa1x1ClerkVO =  aa1xClerkVOsIterator.next();
            log.info("aa1x1ClerkVO.getIdSalesAssistant() = "+ aa1x1ClerkVO.getIdSalesAssistant());
            log.info("aa1x1ClerkVO.getIdClerk() = "+ aa1x1ClerkVO.getIdClerk());
            assertEquals("aa1x1ClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1x1ClerkVO.getIdSalesAssistant());
            assertEquals("aa1x1ClerkVO.getIdClerk() is expected to be 1","1", aa1x1ClerkVO.getIdClerk());

            ClerkVO aa1x2ClerkVO =  aa1xClerkVOsIterator.next();
            log.info("aa1x2ClerkVO.getIdSalesAssistant() = "+ aa1x2ClerkVO.getIdSalesAssistant());
            log.info("aa1x2ClerkVO.getIdClerk() = "+ aa1x2ClerkVO.getIdClerk());
            assertEquals("aa1x2ClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1x2ClerkVO.getIdSalesAssistant());
            assertEquals("aa1x2ClerkVO.getIdClerk() is expected to be 2","2", aa1x2ClerkVO.getIdClerk());


            SalesAssistantVO aa1ySalesAssistantVO =  aa1SalesAssistantVOsIterator.next();
            log.info("aa1ySalesAssistantVO.getIdSalesAssistant() = "+ aa1ySalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa1ySalesAssistantVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa1ySalesAssistantVO.getIdSalesAssistant());


            Collection<ClerkVO> aa1yClerkVOs = aa1ySalesAssistantVO.getClerkVOs();
            log.info("aa1yClerkVOs.size() = "+ aa1yClerkVOs.size());
            assertEquals("aa1yClerkVOs.size() expected is 1", 1,aa1yClerkVOs.size());
            Iterator<ClerkVO> aa1yClerkVOsIterator = aa1yClerkVOs.iterator();

            ClerkVO aa1y1ClerkVO =  aa1yClerkVOsIterator.next();
            log.info("aa1y1ClerkVO.getIdSalesAssistant() = "+ aa1y1ClerkVO.getIdSalesAssistant());
            log.info("aa1y1ClerkVO.getIdClerk() = "+ aa1y1ClerkVO.getIdClerk());
            assertEquals("aa1y1ClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa1y1ClerkVO.getIdSalesAssistant());
            assertEquals("aa1y1ClerkVO.getIdClerk() is expected to be 1","1", aa1y1ClerkVO.getIdClerk());




            SalesDivisionVO aa2SalesDivisionVO = aSalesDivisionVOsIterator.next();

            log.info("aa2SalesDivisionVO.getIdSalesManager() = "+ aa2SalesDivisionVO.getIdSalesManager());
            log.info("aa2SalesDivisionVO.getIdSalesDivision() = "+ aa2SalesDivisionVO.getIdSalesDivision());
            assertEquals("aa2SalesDivisionVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aa1SalesDivisionVO.getIdSalesManager());
            assertEquals("aa2SalesDivisionVO.getIdSalesDivision() is expected to be 2","2", aa2SalesDivisionVO.getIdSalesDivision());

            Collection<SalesAssistantVO> aa2SalesAssistantVOs = aa2SalesDivisionVO.getSalesAssistantVOs();
            log.info("aa2SalesAssistantVOs.size() = "+ aa2SalesAssistantVOs.size());
            assertEquals("aa2SalesAssistantVOs.size() expected is 2",2, aa2SalesAssistantVOs.size());
            Iterator<SalesAssistantVO> aa2SalesAssistantVOsIterator = aa2SalesAssistantVOs.iterator();


            SalesAssistantVO aa2ySalesAssistantVO =  aa2SalesAssistantVOsIterator.next();
            log.info("aa2ySalesAssistantVO.getIdSalesAssistant() = "+ aa2ySalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa2ySalesAssistantVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa2ySalesAssistantVO.getIdSalesAssistant());


            Collection<ClerkVO> aa2yClerkVOs = aa2ySalesAssistantVO.getClerkVOs();
            log.info("aa2yClerkVOs.size() = "+ aa2yClerkVOs.size());
            assertEquals("aa2yClerkVOs.size() expected is 1", 1,aa1yClerkVOs.size());
            Iterator<ClerkVO> aa2yClerkVOsIterator = aa2yClerkVOs.iterator();

            ClerkVO aa2y1ClerkVO =  aa2yClerkVOsIterator.next();
            log.info("aa2y1ClerkVO.getIdSalesAssistant() = "+ aa2y1ClerkVO.getIdSalesAssistant());
            log.info("aa2y1ClerkVO.getIdClerk() = "+ aa2y1ClerkVO.getIdClerk());
            assertEquals("aa2y1ClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa2y1ClerkVO.getIdSalesAssistant());
            assertEquals("aa2y1ClerkVO.getIdClerk() is expected to be 1","1", aa2y1ClerkVO.getIdClerk());


            SalesAssistantVO aa2zSalesAssistantVO =  aa2SalesAssistantVOsIterator.next();

            log.info("aa2zSalesAssistantVO.getIdSalesAssistant() = "+ aa2zSalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa2zSalesAssistantVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2zSalesAssistantVO.getIdSalesAssistant());


            Collection<ClerkVO> aa2zClerkVOs = aa2zSalesAssistantVO.getClerkVOs();
            log.info("aa2zClerkVOs.size() = "+ aa2zClerkVOs.size());
            assertEquals("aa2zClerkVOs.size() expected is 2",2, aa2zClerkVOs.size());
            Iterator<ClerkVO> aa2zClerkVOsIterator = aa2zClerkVOs.iterator();

            ClerkVO aa2z1ClerkVO =  aa2zClerkVOsIterator.next();
            log.info("aa2z1ClerkVO.getIdSalesAssistant() = "+ aa2z1ClerkVO.getIdSalesAssistant());
            log.info("aa2z1ClerkVO.getIdClerk() = "+ aa2z1ClerkVO.getIdClerk());
            assertEquals("aa2z1ClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2z1ClerkVO.getIdSalesAssistant());
            assertEquals("aa2z1ClerkVO.getIdClerk() is expected to be 1","1", aa2z1ClerkVO.getIdClerk());

            ClerkVO aa2z2ClerkVO =  aa2zClerkVOsIterator.next();
            log.info("aa2z2ClerkVO.getIdSalesAssistant() = "+ aa2z2ClerkVO.getIdSalesAssistant());
            log.info("aa2z2ClerkVO.getIdClerk() = "+ aa2z2ClerkVO.getIdClerk());
            assertEquals("aa2z2ClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2z2ClerkVO.getIdSalesAssistant());
            assertEquals("aa2z2ClerkVO.getIdClerk() is expected to be 2","2", aa2z2ClerkVO.getIdClerk());


        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".checkDirectorVONoDescr(DirectorVO aDirectorVO) :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".checkDirectorVONoDescr(DirectorVO aDirectorVO) **************");

    }

    @Test 
    public void testCreateValueObjectsTreeWithCollection(){
        log.info("************Entering the "+getThisClassName()+".testCreateValueObjectsTreeWithCollection() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorClerkVOs(buildDirectorClerkVOs());

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String [][] groupedPkNames = new String [4][] ;
            groupedPkNames[0] = new String []{"idSalesManager"};
            groupedPkNames[1] = new String []{"idSalesManager","idSalesDivision"};
            groupedPkNames[2] = new String []{"idSalesAssistant"};
            groupedPkNames[3] = new String []{"idSalesAssistant","idClerk"};

            String[][] nodePAttributeNames = new String [4][] ;
            nodePAttributeNames[0] = new String []{"salesManagerDescription1","salesManagerDescription2"};
            nodePAttributeNames[1] = new String []{"salesDivisionDescription1","salesDivisionDescription2"};
            nodePAttributeNames[2] = new String []{"salesAssistantDescription1","salesAssistantDescription2"};
            nodePAttributeNames[3] = new String []{"clerkDescription1","clerkDescription2"};

            Object[][] nodeValuesArray = new Object [4][] ;
            nodeValuesArray[0] = new Object []{"SalesManagerDescription1","SalesManagerDescription2"};
            nodeValuesArray[1] = new Object []{"SalesDivisionDescription1","SalesDivisionDescription2"};
            nodeValuesArray[2] = new Object []{"SalesAssistantDescription1","SalesAssistantDescription2"};
            nodeValuesArray[3] = new Object []{"ClerkDescription1","ClerkDescription2"};

            log.info("testCreateValueObjectsTreeWithCollection: before bd call");
            bd.createValueObjectsTreeWithCollection(aDirectorVO, "directorClerkVOs" ,path,  groupedPkNames,   nodePAttributeNames,nodeValuesArray);
            checkDirectorVO( aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateValueObjectsTreeWithCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateValueObjectsTreeWithCollection() **************");
    }

    @Test public void testCreateValueObjectsTreeWithCollectionNoGroupedPkNames(){
        log.info("************Entering the "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionNoGroupedPkNames() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorClerkVOs(buildDirectorClerkVOs());

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";


            String[][] nodePAttributeNames = new String [4][] ;
            nodePAttributeNames[0] = new String []{"salesManagerDescription1","salesManagerDescription2"};
            nodePAttributeNames[1] = new String []{"salesDivisionDescription1","salesDivisionDescription2"};
            nodePAttributeNames[2] = new String []{"salesAssistantDescription1","salesAssistantDescription2"};
            nodePAttributeNames[3] = new String []{"clerkDescription1","clerkDescription2"};

            Object[][] nodeValuesArray = new Object [4][] ;
            nodeValuesArray[0] = new Object []{"SalesManagerDescription1","SalesManagerDescription2"};
            nodeValuesArray[1] = new Object []{"SalesDivisionDescription1","SalesDivisionDescription2"};
            nodeValuesArray[2] = new Object []{"SalesAssistantDescription1","SalesAssistantDescription2"};
            nodeValuesArray[3] = new Object []{"ClerkDescription1","ClerkDescription2"};

            log.info("testCreateValueObjectsTreeWithCollection: before bd call");
            bd.createValueObjectsTreeWithCollection(aDirectorVO, "directorClerkVOs" ,path,     nodePAttributeNames,nodeValuesArray);
            checkDirectorVO( aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionNoGroupedPkNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionNoGroupedPkNames() **************");
    }

    @Test public void testCreateValueObjectsTreeWithCollectionNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionNoValueArray() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorClerkVOs(buildDirectorClerkVOs());

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String [][] groupedPkNames = new String [4][] ;
            groupedPkNames[0] = new String []{"idSalesManager"};
            groupedPkNames[1] = new String []{"idSalesManager","idSalesDivision"};
            groupedPkNames[2] = new String []{"idSalesAssistant"};
            groupedPkNames[3] = new String []{"idSalesAssistant","idClerk"};



            log.info("testCreateValueObjectsTreeWithCollection: before bd call");
            bd.createValueObjectsTreeWithCollection(aDirectorVO, "directorClerkVOs" ,path,  groupedPkNames);
            checkDirectorVONoDescr(aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionNoValueArray() **************");
    }

    @Test public void testCreateValueObjectsTreeWithCollectionNoGroupedPkNamesNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionNoGroupedPkNamesNoValueArray() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorClerkVOs(buildDirectorClerkVOs());

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";




            log.info("testCreateValueObjectsTreeWithCollection: before bd call");
            bd.createValueObjectsTreeWithCollection(aDirectorVO, "directorClerkVOs" ,path);
            checkDirectorVONoDescr(aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionNoGroupedPkNamesNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionNoGroupedPkNamesNoValueArray() **************");
    }


    @Test public void testCreateValueObjectsTreeWithCollectionValuesCollection(){
        log.info("************Entering the "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionValuesCollection() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");

            Collection directorClerkVOs =   buildDirectorClerkVOs();

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String [][] groupedPkNames = new String [4][] ;
            groupedPkNames[0] = new String []{"idSalesManager"};
            groupedPkNames[1] = new String []{"idSalesManager","idSalesDivision"};
            groupedPkNames[2] = new String []{"idSalesAssistant"};
            groupedPkNames[3] = new String []{"idSalesAssistant","idClerk"};

            String[][] nodePAttributeNames = new String [4][] ;
            nodePAttributeNames[0] = new String []{"salesManagerDescription1","salesManagerDescription2"};
            nodePAttributeNames[1] = new String []{"salesDivisionDescription1","salesDivisionDescription2"};
            nodePAttributeNames[2] = new String []{"salesAssistantDescription1","salesAssistantDescription2"};
            nodePAttributeNames[3] = new String []{"clerkDescription1","clerkDescription2"};

            Object[][] nodeValuesArray = new Object [4][] ;
            nodeValuesArray[0] = new Object []{"SalesManagerDescription1","SalesManagerDescription2"};
            nodeValuesArray[1] = new Object []{"SalesDivisionDescription1","SalesDivisionDescription2"};
            nodeValuesArray[2] = new Object []{"SalesAssistantDescription1","SalesAssistantDescription2"};
            nodeValuesArray[3] = new Object []{"ClerkDescription1","ClerkDescription2"};

            log.info("testCreateValueObjectsTreeWithCollection: before bd call");
            bd.createValueObjectsTreeWithCollection(directorClerkVOs, aDirectorVO, path,  groupedPkNames,   nodePAttributeNames,nodeValuesArray);
            checkDirectorVO( aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionValuesCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionValuesCollection() **************");
    }

    @Test public void testCreateValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNames(){
        log.info("************Entering the "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNames() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");

            Collection directorClerkVOs =   buildDirectorClerkVOs();

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";


            String[][] nodePAttributeNames = new String [4][] ;
            nodePAttributeNames[0] = new String []{"salesManagerDescription1","salesManagerDescription2"};
            nodePAttributeNames[1] = new String []{"salesDivisionDescription1","salesDivisionDescription2"};
            nodePAttributeNames[2] = new String []{"salesAssistantDescription1","salesAssistantDescription2"};
            nodePAttributeNames[3] = new String []{"clerkDescription1","clerkDescription2"};

            Object[][] nodeValuesArray = new Object [4][] ;
            nodeValuesArray[0] = new Object []{"SalesManagerDescription1","SalesManagerDescription2"};
            nodeValuesArray[1] = new Object []{"SalesDivisionDescription1","SalesDivisionDescription2"};
            nodeValuesArray[2] = new Object []{"SalesAssistantDescription1","SalesAssistantDescription2"};
            nodeValuesArray[3] = new Object []{"ClerkDescription1","ClerkDescription2"};

            log.info("testCreateValueObjectsTreeWithCollection: before bd call");
            bd.createValueObjectsTreeWithCollection(directorClerkVOs,aDirectorVO, path,     nodePAttributeNames,nodeValuesArray);
            checkDirectorVO( aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNames() **************");
    }

    @Test public void testCreateValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNamesNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNamesNoValueArray() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            Collection directorClerkVOs =   buildDirectorClerkVOs();

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";


            log.info("testCreateValueObjectsTreeWithCollection: before bd call");
            bd.createValueObjectsTreeWithCollection(directorClerkVOs, aDirectorVO, path);
            checkDirectorVONoDescr(aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNamesNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNamesNoValueArray() **************");
    }



    protected DirectorVO buildPartialDirectorVO() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildPartialDirectorVO() ***************");
        DirectorVO aDirectorVO =null;
        try{
            aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorDescription1("aDirectorDescription1");
            aDirectorVO.setDirectorDescription2("aDirectorDescription2");

            SalesManagerVO aSalesManagerVO = new SalesManagerVO();
            aSalesManagerVO.setIdSalesManager("aSalesManager");
            aSalesManagerVO.setSalesManagerDescription1("aSalesManagerDescription1");
            aSalesManagerVO.setSalesManagerDescription2("aSalesManagerDescription2");
            aDirectorVO.setSalesManagerVO(aSalesManagerVO);

            Collection<SalesDivisionVO> aSalesDivisionVOs = new ArrayList<SalesDivisionVO>();
            SalesDivisionVO a1SalesDivisionVO = new SalesDivisionVO();
            a1SalesDivisionVO.setIdSalesManager("aSalesManager");
            a1SalesDivisionVO.setIdSalesDivision("1");
            a1SalesDivisionVO.setSalesDivisionDescription1("a1SalesDivisionDescription1");
            a1SalesDivisionVO.setSalesDivisionDescription2("a1SalesDivisionDescription2");



            aSalesDivisionVOs.add(a1SalesDivisionVO);
            aSalesManagerVO.setSalesDivisionVOs(aSalesDivisionVOs);

            SalesAssistantVO xSalesAssistantVO = new SalesAssistantVO();
            xSalesAssistantVO.setIdSalesAssistant("xSalesAssistant");
            xSalesAssistantVO.setSalesAssistantDescription1("xSalesAssistantDescription1");
            xSalesAssistantVO.setSalesAssistantDescription2("xSalesAssistantDescription2");

            SalesAssistantVO ySalesAssistantVO = new SalesAssistantVO();
            ySalesAssistantVO.setIdSalesAssistant("ySalesAssistant");
            ySalesAssistantVO.setSalesAssistantDescription1("ySalesAssistantDescription1");
            ySalesAssistantVO.setSalesAssistantDescription2("ySalesAssistantDescription2");



            Collection<SalesAssistantVO> a1SalesAssistantVOs = new ArrayList<SalesAssistantVO>();

            a1SalesAssistantVOs.add(xSalesAssistantVO);
            a1SalesAssistantVOs.add(ySalesAssistantVO);
            a1SalesDivisionVO.setSalesAssistantVOs(a1SalesAssistantVOs);


            ClerkVO x1ClerkVO = new ClerkVO();
            x1ClerkVO.setIdSalesAssistant("xSalesAssistant");
            x1ClerkVO.setIdClerk("1");
            x1ClerkVO.setClerkDescription1("x1ClerkDescription1");
            x1ClerkVO.setClerkDescription2("x1ClerkDescription2");



            Collection<ClerkVO> xClerkVOs = new ArrayList<ClerkVO>();
            xClerkVOs.add(x1ClerkVO);

            xSalesAssistantVO.setClerkVOs(xClerkVOs);

        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildPartialDirectorVO() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildPartialDirectorVO() **************");
        return aDirectorVO;
    }

    protected void checkForAddDirectorVO(DirectorVO aDirectorVO) throws Exception{
        log.info("************Entering the "+getThisClassName()+".checkForAddDirectorVO(DirectorVO aDirectorVO) ***************");
        try{
            SalesManagerVO aSalesManagerVO = aDirectorVO.getSalesManagerVO();
            log.info("aSalesManagerVO.getIdSalesManager() = "+ aSalesManagerVO.getIdSalesManager());
            log.info("aSalesManagerVO.getSalesManagerDescription1() = "+ aSalesManagerVO.getSalesManagerDescription1());
            log.info("aSalesManagerVO.getSalesManagerDescription2() = "+ aSalesManagerVO.getSalesManagerDescription2());
            assertEquals("aSalesManagerVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aSalesManagerVO.getIdSalesManager());
            assertEquals("aSalesManagerVO.getSalesManagerDescription1() is expected to be aSalesManagerDescription1","aSalesManagerDescription1", aSalesManagerVO.getSalesManagerDescription1());
            assertEquals("aSalesManagerVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2","aSalesManagerDescription2", aSalesManagerVO.getSalesManagerDescription2());


            Collection<SalesDivisionVO> aSalesDivisionVOs = aSalesManagerVO.getSalesDivisionVOs();
            log.info("aSalesDivisionVOs.size() = "+aSalesDivisionVOs.size());
            assertEquals("aSalesDivisionVOs.size() expected is 2",2,aSalesDivisionVOs.size());
            Iterator<SalesDivisionVO> aSalesDivisionVOsIterator = aSalesDivisionVOs.iterator();

            SalesDivisionVO aa1SalesDivisionVO = aSalesDivisionVOsIterator.next();
            log.info("aa1SalesDivisionVO.getIdSalesManager() = "+ aa1SalesDivisionVO.getIdSalesManager());
            log.info("aa1SalesDivisionVO.getIdSalesDivision() = "+ aa1SalesDivisionVO.getIdSalesDivision());
            log.info("aa1SalesDivisionVO.getSalesDivisionDescription1() = "+ aa1SalesDivisionVO.getSalesDivisionDescription1());
            log.info("aa1SalesDivisionVO.getSalesDivisionDescription2() = "+ aa1SalesDivisionVO.getSalesDivisionDescription2());
            assertEquals("aa1SalesDivisionVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aa1SalesDivisionVO.getIdSalesManager());
            assertEquals("aa1SalesDivisionVO.getIdSalesDivision() is expected to be 1","1", aa1SalesDivisionVO.getIdSalesDivision());
            assertEquals("aa1SalesDivisionVO.getSalesDivisionDescription1() is expected to be a1SalesDivisionDescription1","a1SalesDivisionDescription1", aa1SalesDivisionVO.getSalesDivisionDescription1());
            assertEquals("aa1SalesDivisionVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2","a1SalesDivisionDescription2", aa1SalesDivisionVO.getSalesDivisionDescription2());

            Collection<SalesAssistantVO> aa1SalesAssistantVOs = aa1SalesDivisionVO.getSalesAssistantVOs();
            log.info("aa1SalesAssistantVOs.size() = "+ aa1SalesAssistantVOs.size());
            assertEquals("aa1SalesAssistantVOs.size() expected is 2",2, aa1SalesAssistantVOs.size());
            Iterator<SalesAssistantVO> aa1SalesAssistantVOsIterator = aa1SalesAssistantVOs.iterator();

            SalesAssistantVO aa1xSalesAssistantVO =  aa1SalesAssistantVOsIterator.next();

            log.info("aa1xSalesAssistantVO.getIdSalesAssistant() = "+ aa1xSalesAssistantVO.getIdSalesAssistant());
            log.info("aa1xSalesAssistantVO.getSalesAssistantDescription1() = "+ aa1xSalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa1xSalesAssistantVO.getSalesAssistantDescription2() = "+ aa1xSalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa1xSalesAssistantVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1xSalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa1xSalesAssistantVO.getSalesAssistantDescription1() is expected to be xSalesAssistantDescription1","xSalesAssistantDescription1", aa1xSalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa1xSalesAssistantVO.getSalesAssistantDescription2() is expected to be xSalesAssistantDescription2","xSalesAssistantDescription2", aa1xSalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa1xClerkVOs = aa1xSalesAssistantVO.getClerkVOs();
            log.info("aa1xClerkVOs.size() = "+ aa1xClerkVOs.size());
            assertEquals("aa1xClerkVOs.size() expected is 2",2, aa1xClerkVOs.size());
            Iterator<ClerkVO> aa1xClerkVOsIterator = aa1xClerkVOs.iterator();

            ClerkVO aa1x1ClerkVO =  aa1xClerkVOsIterator.next();
            log.info("aa1x1ClerkVO.getIdSalesAssistant() = "+ aa1x1ClerkVO.getIdSalesAssistant());
            log.info("aa1x1ClerkVO.getIdClerk() = "+ aa1x1ClerkVO.getIdClerk());
            log.info("aa1x1ClerkVO.getClerkDescription1() = "+ aa1x1ClerkVO.getClerkDescription1());
            log.info("aa1x1ClerkVO.getClerkDescription2() = "+ aa1x1ClerkVO.getClerkDescription2());
            assertEquals("aa1x1ClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1x1ClerkVO.getIdSalesAssistant());
            assertEquals("aa1x1ClerkVO.getIdClerk() is expected to be 1","1", aa1x1ClerkVO.getIdClerk());
            assertEquals("aa1x1ClerkVO.getClerkDescription1() is expected to be x1ClerkDescription1","x1ClerkDescription1", aa1x1ClerkVO.getClerkDescription1());
            assertEquals("aa1x1ClerkVO.getClerkDescription2() is expected to be x1ClerkDescription2","x1ClerkDescription2", aa1x1ClerkVO.getClerkDescription2());

            ClerkVO aa1x2ClerkVO =  aa1xClerkVOsIterator.next();
            log.info("aa1x2ClerkVO.getIdSalesAssistant() = "+ aa1x2ClerkVO.getIdSalesAssistant());
            log.info("aa1x2ClerkVO.getIdClerk() = "+ aa1x2ClerkVO.getIdClerk());
            log.info("aa1x2ClerkVO.getClerkDescription1() = "+ aa1x2ClerkVO.getClerkDescription1());
            log.info("aa1x2ClerkVO.getClerkDescription2() = "+ aa1x2ClerkVO.getClerkDescription2());
            assertEquals("aa1x2ClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1x2ClerkVO.getIdSalesAssistant());
            assertEquals("aa1x2ClerkVO.getIdClerk() is expected to be 2","2", aa1x2ClerkVO.getIdClerk());
            assertEquals("aa1x2ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa1x2ClerkVO.getClerkDescription1());
            assertEquals("aa1x2ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa1x2ClerkVO.getClerkDescription2());


            SalesAssistantVO aa1ySalesAssistantVO =  aa1SalesAssistantVOsIterator.next();
            log.info("aa1ySalesAssistantVO.getIdSalesAssistant() = "+ aa1ySalesAssistantVO.getIdSalesAssistant());
            log.info("aa1ySalesAssistantVO.getSalesAssistantDescription1() = "+ aa1ySalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa1ySalesAssistantVO.getSalesAssistantDescription2() = "+ aa1ySalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa1ySalesAssistantVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa1ySalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa1ySalesAssistantVO.getSalesAssistantDescription1() is expected to be ySalesAssistantDescription1","ySalesAssistantDescription1", aa1ySalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa1ySalesAssistantVO.getSalesAssistantDescription2() is expected to be ySalesAssistantDescription2","ySalesAssistantDescription2", aa1ySalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa1yClerkVOs = aa1ySalesAssistantVO.getClerkVOs();
            log.info("aa1yClerkVOs.size() = "+ aa1yClerkVOs.size());
            assertEquals("aa1yClerkVOs.size() expected is 1", 1,aa1yClerkVOs.size());
            Iterator<ClerkVO> aa1yClerkVOsIterator = aa1yClerkVOs.iterator();

            ClerkVO aa1y1ClerkVO =  aa1yClerkVOsIterator.next();
            log.info("aa1y1ClerkVO.getIdSalesAssistant() = "+ aa1y1ClerkVO.getIdSalesAssistant());
            log.info("aa1y1ClerkVO.getIdClerk() = "+ aa1y1ClerkVO.getIdClerk());
            log.info("aa1y1ClerkVO.getClerkDescription1() = "+ aa1y1ClerkVO.getClerkDescription1());
            log.info("aa1y1ClerkVO.getClerkDescription2() = "+ aa1y1ClerkVO.getClerkDescription2());
            assertEquals("aa1y1ClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa1y1ClerkVO.getIdSalesAssistant());
            assertEquals("aa1y1ClerkVO.getIdClerk() is expected to be 1","1", aa1y1ClerkVO.getIdClerk());
            assertEquals("aa1y1ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa1y1ClerkVO.getClerkDescription1());
            assertEquals("aa1y1ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa1y1ClerkVO.getClerkDescription2());




            SalesDivisionVO aa2SalesDivisionVO = aSalesDivisionVOsIterator.next();

            log.info("aa2SalesDivisionVO.getIdSalesManager() = "+ aa2SalesDivisionVO.getIdSalesManager());
            log.info("aa2SalesDivisionVO.getIdSalesDivision() = "+ aa2SalesDivisionVO.getIdSalesDivision());
            log.info("aa2SalesDivisionVO.getSalesDivisionDescription1() = "+ aa2SalesDivisionVO.getSalesDivisionDescription1());
            log.info("aa2SalesDivisionVO.getSalesDivisionDescription2() = "+ aa2SalesDivisionVO.getSalesDivisionDescription2());
            assertEquals("aa2SalesDivisionVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aa1SalesDivisionVO.getIdSalesManager());
            assertEquals("aa2SalesDivisionVO.getIdSalesDivision() is expected to be 2","2", aa2SalesDivisionVO.getIdSalesDivision());
            assertEquals("aa2SalesDivisionVO.getSalesDivisionDescription1() is expected to be SalesDivisionDescription1","SalesDivisionDescription1", aa2SalesDivisionVO.getSalesDivisionDescription1());
            assertEquals("aa2SalesDivisionVO.getSalesDivisionDescription2() is expected to be SalesDivisionDescription2","SalesDivisionDescription2", aa2SalesDivisionVO.getSalesDivisionDescription2());

            Collection<SalesAssistantVO> aa2SalesAssistantVOs = aa2SalesDivisionVO.getSalesAssistantVOs();
            log.info("aa2SalesAssistantVOs.size() = "+ aa2SalesAssistantVOs.size());
            assertEquals("aa2SalesAssistantVOs.size() expected is 2",2, aa2SalesAssistantVOs.size());
            Iterator<SalesAssistantVO> aa2SalesAssistantVOsIterator = aa2SalesAssistantVOs.iterator();


            SalesAssistantVO aa2ySalesAssistantVO =  aa2SalesAssistantVOsIterator.next();
            log.info("aa2ySalesAssistantVO.getIdSalesAssistant() = "+ aa2ySalesAssistantVO.getIdSalesAssistant());
            log.info("aa2ySalesAssistantVO.getSalesAssistantDescription1() = "+ aa2ySalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa2ySalesAssistantVO.getSalesAssistantDescription2() = "+ aa2ySalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa2ySalesAssistantVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa2ySalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa2ySalesAssistantVO.getSalesAssistantDescription1() is expected to be SalesAssistantDescription1","SalesAssistantDescription1", aa2ySalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa2ySalesAssistantVO.getSalesAssistantDescription2() is expected to be SalesAssistantDescription2","SalesAssistantDescription2", aa2ySalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa2yClerkVOs = aa2ySalesAssistantVO.getClerkVOs();
            log.info("aa2yClerkVOs.size() = "+ aa2yClerkVOs.size());
            assertEquals("aa2yClerkVOs.size() expected is 1", 1,aa1yClerkVOs.size());
            Iterator<ClerkVO> aa2yClerkVOsIterator = aa2yClerkVOs.iterator();

            ClerkVO aa2y1ClerkVO =  aa2yClerkVOsIterator.next();
            log.info("aa2y1ClerkVO.getIdSalesAssistant() = "+ aa2y1ClerkVO.getIdSalesAssistant());
            log.info("aa2y1ClerkVO.getIdClerk() = "+ aa2y1ClerkVO.getIdClerk());
            log.info("aa2y1ClerkVO.getClerkDescription1() = "+ aa2y1ClerkVO.getClerkDescription1());
            log.info("aa2y1ClerkVO.getClerkDescription2() = "+ aa2y1ClerkVO.getClerkDescription2());
            assertEquals("aa2y1ClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa2y1ClerkVO.getIdSalesAssistant());
            assertEquals("aa2y1ClerkVO.getIdClerk() is expected to be 1","1", aa2y1ClerkVO.getIdClerk());
            assertEquals("aa2y1ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa2y1ClerkVO.getClerkDescription1());
            assertEquals("aa2y1ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa2y1ClerkVO.getClerkDescription2());



            SalesAssistantVO aa2zSalesAssistantVO =  aa2SalesAssistantVOsIterator.next();

            log.info("aa2zSalesAssistantVO.getIdSalesAssistant() = "+ aa2zSalesAssistantVO.getIdSalesAssistant());
            log.info("aa2zSalesAssistantVO.getSalesAssistantDescription1() = "+ aa2zSalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa2zSalesAssistantVO.getSalesAssistantDescription2() = "+ aa2zSalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa2zSalesAssistantVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2zSalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa2zSalesAssistantVO.getSalesAssistantDescription1() is expected to be SalesAssistantDescription1","SalesAssistantDescription1", aa2zSalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa2zSalesAssistantVO.getSalesAssistantDescription2() is expected to be SalesAssistantDescription2","SalesAssistantDescription2", aa2zSalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa2zClerkVOs = aa2zSalesAssistantVO.getClerkVOs();
            log.info("aa2zClerkVOs.size() = "+ aa2zClerkVOs.size());
            assertEquals("aa2zClerkVOs.size() expected is 2",2, aa2zClerkVOs.size());
            Iterator<ClerkVO> aa2zClerkVOsIterator = aa2zClerkVOs.iterator();

            ClerkVO aa2z1ClerkVO =  aa2zClerkVOsIterator.next();
            log.info("aa2z1ClerkVO.getIdSalesAssistant() = "+ aa2z1ClerkVO.getIdSalesAssistant());
            log.info("aa2z1ClerkVO.getIdClerk() = "+ aa2z1ClerkVO.getIdClerk());
            log.info("aa2z1ClerkVO.getClerkDescription1() = "+ aa2z1ClerkVO.getClerkDescription1());
            log.info("aa2z1ClerkVO.getClerkDescription2() = "+ aa2z1ClerkVO.getClerkDescription2());
            assertEquals("aa2z1ClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2z1ClerkVO.getIdSalesAssistant());
            assertEquals("aa2z1ClerkVO.getIdClerk() is expected to be 1","1", aa2z1ClerkVO.getIdClerk());
            assertEquals("aa2z1ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa2z1ClerkVO.getClerkDescription1());
            assertEquals("aa2z1ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa2z1ClerkVO.getClerkDescription2());

            ClerkVO aa2z2ClerkVO =  aa2zClerkVOsIterator.next();
            log.info("aa2z2ClerkVO.getIdSalesAssistant() = "+ aa2z2ClerkVO.getIdSalesAssistant());
            log.info("aa2z2ClerkVO.getIdClerk() = "+ aa2z2ClerkVO.getIdClerk());
            log.info("aa2z2ClerkVO.getClerkDescription1() = "+ aa2z2ClerkVO.getClerkDescription1());
            log.info("aa2z2ClerkVO.getClerkDescription2() = "+ aa2z2ClerkVO.getClerkDescription2());
            assertEquals("aa2z2ClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2z2ClerkVO.getIdSalesAssistant());
            assertEquals("aa2z2ClerkVO.getIdClerk() is expected to be 2","2", aa2z2ClerkVO.getIdClerk());
            assertEquals("aa2z2ClerkVO.getClerkDescription1() is expected to be ClerkDescription1","ClerkDescription1", aa2z2ClerkVO.getClerkDescription1());
            assertEquals("aa2z2ClerkVO.getClerkDescription2() is expected to be ClerkDescription2","ClerkDescription2", aa2z2ClerkVO.getClerkDescription2());


        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".checkForAddDirectorVO(DirectorVO aDirectorVO) :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".checkForAddDirectorVO(DirectorVO aDirectorVO) **************");

    }

    protected void checkForAddDirectorVONoDescr(DirectorVO aDirectorVO) throws Exception{
        log.info("************Entering the "+getThisClassName()+".checkForAddDirectorVONoDescr(DirectorVO aDirectorVO) ***************");
        try{
            SalesManagerVO aSalesManagerVO = aDirectorVO.getSalesManagerVO();
            log.info("aSalesManagerVO.getIdSalesManager() = "+ aSalesManagerVO.getIdSalesManager());
            log.info("aSalesManagerVO.getSalesManagerDescription1() = "+ aSalesManagerVO.getSalesManagerDescription1());
            log.info("aSalesManagerVO.getSalesManagerDescription2() = "+ aSalesManagerVO.getSalesManagerDescription2());
            assertEquals("aSalesManagerVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aSalesManagerVO.getIdSalesManager());
            assertEquals("aSalesManagerVO.getSalesManagerDescription1() is expected to be aSalesManagerDescription1","aSalesManagerDescription1", aSalesManagerVO.getSalesManagerDescription1());
            assertEquals("aSalesManagerVO.getSalesManagerDescription2() is expected to be aSalesManagerDescription2","aSalesManagerDescription2", aSalesManagerVO.getSalesManagerDescription2());


            Collection<SalesDivisionVO> aSalesDivisionVOs = aSalesManagerVO.getSalesDivisionVOs();
            log.info("aSalesDivisionVOs.size() = "+aSalesDivisionVOs.size());
            assertEquals("aSalesDivisionVOs.size() expected is 2",2,aSalesDivisionVOs.size());
            Iterator<SalesDivisionVO> aSalesDivisionVOsIterator = aSalesDivisionVOs.iterator();

            SalesDivisionVO aa1SalesDivisionVO = aSalesDivisionVOsIterator.next();
            log.info("aa1SalesDivisionVO.getIdSalesManager() = "+ aa1SalesDivisionVO.getIdSalesManager());
            log.info("aa1SalesDivisionVO.getIdSalesDivision() = "+ aa1SalesDivisionVO.getIdSalesDivision());
            log.info("aa1SalesDivisionVO.getSalesDivisionDescription1() = "+ aa1SalesDivisionVO.getSalesDivisionDescription1());
            log.info("aa1SalesDivisionVO.getSalesDivisionDescription2() = "+ aa1SalesDivisionVO.getSalesDivisionDescription2());
            assertEquals("aa1SalesDivisionVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aa1SalesDivisionVO.getIdSalesManager());
            assertEquals("aa1SalesDivisionVO.getIdSalesDivision() is expected to be 1","1", aa1SalesDivisionVO.getIdSalesDivision());
            assertEquals("aa1SalesDivisionVO.getSalesDivisionDescription1() is expected to be a1SalesDivisionDescription1","a1SalesDivisionDescription1", aa1SalesDivisionVO.getSalesDivisionDescription1());
            assertEquals("aa1SalesDivisionVO.getSalesDivisionDescription2() is expected to be a1SalesDivisionDescription2","a1SalesDivisionDescription2", aa1SalesDivisionVO.getSalesDivisionDescription2());

            Collection<SalesAssistantVO> aa1SalesAssistantVOs = aa1SalesDivisionVO.getSalesAssistantVOs();
            log.info("aa1SalesAssistantVOs.size() = "+ aa1SalesAssistantVOs.size());
            assertEquals("aa1SalesAssistantVOs.size() expected is 2",2, aa1SalesAssistantVOs.size());
            Iterator<SalesAssistantVO> aa1SalesAssistantVOsIterator = aa1SalesAssistantVOs.iterator();

            SalesAssistantVO aa1xSalesAssistantVO =  aa1SalesAssistantVOsIterator.next();

            log.info("aa1xSalesAssistantVO.getIdSalesAssistant() = "+ aa1xSalesAssistantVO.getIdSalesAssistant());
            log.info("aa1xSalesAssistantVO.getSalesAssistantDescription1() = "+ aa1xSalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa1xSalesAssistantVO.getSalesAssistantDescription2() = "+ aa1xSalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa1xSalesAssistantVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1xSalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa1xSalesAssistantVO.getSalesAssistantDescription1() is expected to be xSalesAssistantDescription1","xSalesAssistantDescription1", aa1xSalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa1xSalesAssistantVO.getSalesAssistantDescription2() is expected to be xSalesAssistantDescription2","xSalesAssistantDescription2", aa1xSalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa1xClerkVOs = aa1xSalesAssistantVO.getClerkVOs();
            log.info("aa1xClerkVOs.size() = "+ aa1xClerkVOs.size());
            assertEquals("aa1xClerkVOs.size() expected is 2",2, aa1xClerkVOs.size());
            Iterator<ClerkVO> aa1xClerkVOsIterator = aa1xClerkVOs.iterator();

            ClerkVO aa1x1ClerkVO =  aa1xClerkVOsIterator.next();
            log.info("aa1x1ClerkVO.getIdSalesAssistant() = "+ aa1x1ClerkVO.getIdSalesAssistant());
            log.info("aa1x1ClerkVO.getIdClerk() = "+ aa1x1ClerkVO.getIdClerk());
            log.info("aa1x1ClerkVO.getClerkDescription1() = "+ aa1x1ClerkVO.getClerkDescription1());
            log.info("aa1x1ClerkVO.getClerkDescription2() = "+ aa1x1ClerkVO.getClerkDescription2());
            assertEquals("aa1x1ClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1x1ClerkVO.getIdSalesAssistant());
            assertEquals("aa1x1ClerkVO.getIdClerk() is expected to be 1","1", aa1x1ClerkVO.getIdClerk());
            assertEquals("aa1x1ClerkVO.getClerkDescription1() is expected to be x1ClerkDescription1","x1ClerkDescription1", aa1x1ClerkVO.getClerkDescription1());
            assertEquals("aa1x1ClerkVO.getClerkDescription2() is expected to be x1ClerkDescription2","x1ClerkDescription2", aa1x1ClerkVO.getClerkDescription2());

            ClerkVO aa1x2ClerkVO =  aa1xClerkVOsIterator.next();
            log.info("aa1x2ClerkVO.getIdSalesAssistant() = "+ aa1x2ClerkVO.getIdSalesAssistant());
            log.info("aa1x2ClerkVO.getIdClerk() = "+ aa1x2ClerkVO.getIdClerk());
            log.info("aa1x2ClerkVO.getClerkDescription1() = "+ aa1x2ClerkVO.getClerkDescription1());
            log.info("aa1x2ClerkVO.getClerkDescription2() = "+ aa1x2ClerkVO.getClerkDescription2());
            assertEquals("aa1x2ClerkVO.getIdSalesAssistant() is expected to be xSalesAssistant","xSalesAssistant", aa1x2ClerkVO.getIdSalesAssistant());
            assertEquals("aa1x2ClerkVO.getIdClerk() is expected to be 2","2", aa1x2ClerkVO.getIdClerk());
            assertNull("aa1x2ClerkVO.getClerkDescription1() is expected to be null", aa1x2ClerkVO.getClerkDescription1());
            assertNull("aa1x2ClerkVO.getClerkDescription2() is expected to be null", aa1x2ClerkVO.getClerkDescription2());


            SalesAssistantVO aa1ySalesAssistantVO =  aa1SalesAssistantVOsIterator.next();
            log.info("aa1ySalesAssistantVO.getIdSalesAssistant() = "+ aa1ySalesAssistantVO.getIdSalesAssistant());
            log.info("aa1ySalesAssistantVO.getSalesAssistantDescription1() = "+ aa1ySalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa1ySalesAssistantVO.getSalesAssistantDescription2() = "+ aa1ySalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa1ySalesAssistantVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa1ySalesAssistantVO.getIdSalesAssistant());
            assertEquals("aa1ySalesAssistantVO.getSalesAssistantDescription1() is expected to be ySalesAssistantDescription1","ySalesAssistantDescription1", aa1ySalesAssistantVO.getSalesAssistantDescription1());
            assertEquals("aa1ySalesAssistantVO.getSalesAssistantDescription2() is expected to be ySalesAssistantDescription2","ySalesAssistantDescription2", aa1ySalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa1yClerkVOs = aa1ySalesAssistantVO.getClerkVOs();
            log.info("aa1yClerkVOs.size() = "+ aa1yClerkVOs.size());
            assertEquals("aa1yClerkVOs.size() expected is 1", 1,aa1yClerkVOs.size());
            Iterator<ClerkVO> aa1yClerkVOsIterator = aa1yClerkVOs.iterator();

            ClerkVO aa1y1ClerkVO =  aa1yClerkVOsIterator.next();
            log.info("aa1y1ClerkVO.getIdSalesAssistant() = "+ aa1y1ClerkVO.getIdSalesAssistant());
            log.info("aa1y1ClerkVO.getIdClerk() = "+ aa1y1ClerkVO.getIdClerk());
            log.info("aa1y1ClerkVO.getClerkDescription1() = "+ aa1y1ClerkVO.getClerkDescription1());
            log.info("aa1y1ClerkVO.getClerkDescription2() = "+ aa1y1ClerkVO.getClerkDescription2());
            assertEquals("aa1y1ClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa1y1ClerkVO.getIdSalesAssistant());
            assertEquals("aa1y1ClerkVO.getIdClerk() is expected to be 1","1", aa1y1ClerkVO.getIdClerk());
            assertNull("aa1y1ClerkVO.getClerkDescription1() is expected to be null", aa1y1ClerkVO.getClerkDescription1());
            assertNull("aa1y1ClerkVO.getClerkDescription2() is expected to be null", aa1y1ClerkVO.getClerkDescription2());




            SalesDivisionVO aa2SalesDivisionVO = aSalesDivisionVOsIterator.next();

            log.info("aa2SalesDivisionVO.getIdSalesManager() = "+ aa2SalesDivisionVO.getIdSalesManager());
            log.info("aa2SalesDivisionVO.getIdSalesDivision() = "+ aa2SalesDivisionVO.getIdSalesDivision());
            log.info("aa2SalesDivisionVO.getSalesDivisionDescription1() = "+ aa2SalesDivisionVO.getSalesDivisionDescription1());
            log.info("aa2SalesDivisionVO.getSalesDivisionDescription2() = "+ aa2SalesDivisionVO.getSalesDivisionDescription2());
            assertEquals("aa2SalesDivisionVO.getIdSalesManager() is expected to be aSalesManager","aSalesManager", aa1SalesDivisionVO.getIdSalesManager());
            assertEquals("aa2SalesDivisionVO.getIdSalesDivision() is expected to be 2","2", aa2SalesDivisionVO.getIdSalesDivision());
            assertNull("aa2SalesDivisionVO.getSalesDivisionDescription1() is expected to be null", aa2SalesDivisionVO.getSalesDivisionDescription1());
            assertNull("aa2SalesDivisionVO.getSalesDivisionDescription2() is expected to be null", aa2SalesDivisionVO.getSalesDivisionDescription2());

            Collection<SalesAssistantVO> aa2SalesAssistantVOs = aa2SalesDivisionVO.getSalesAssistantVOs();
            log.info("aa2SalesAssistantVOs.size() = "+ aa2SalesAssistantVOs.size());
            assertEquals("aa2SalesAssistantVOs.size() expected is 2",2, aa2SalesAssistantVOs.size());
            Iterator<SalesAssistantVO> aa2SalesAssistantVOsIterator = aa2SalesAssistantVOs.iterator();


            SalesAssistantVO aa2ySalesAssistantVO =  aa2SalesAssistantVOsIterator.next();
            log.info("aa2ySalesAssistantVO.getIdSalesAssistant() = "+ aa2ySalesAssistantVO.getIdSalesAssistant());
            log.info("aa2ySalesAssistantVO.getSalesAssistantDescription1() = "+ aa2ySalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa2ySalesAssistantVO.getSalesAssistantDescription2() = "+ aa2ySalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa2ySalesAssistantVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa2ySalesAssistantVO.getIdSalesAssistant());
            assertNull("aa2ySalesAssistantVO.getSalesAssistantDescription1() is expected to be null", aa2ySalesAssistantVO.getSalesAssistantDescription1());
            assertNull("aa2ySalesAssistantVO.getSalesAssistantDescription2() is expected to be null", aa2ySalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa2yClerkVOs = aa2ySalesAssistantVO.getClerkVOs();
            log.info("aa2yClerkVOs.size() = "+ aa2yClerkVOs.size());
            assertEquals("aa2yClerkVOs.size() expected is 1", 1,aa1yClerkVOs.size());
            Iterator<ClerkVO> aa2yClerkVOsIterator = aa2yClerkVOs.iterator();

            ClerkVO aa2y1ClerkVO =  aa2yClerkVOsIterator.next();
            log.info("aa2y1ClerkVO.getIdSalesAssistant() = "+ aa2y1ClerkVO.getIdSalesAssistant());
            log.info("aa2y1ClerkVO.getIdClerk() = "+ aa2y1ClerkVO.getIdClerk());
            log.info("aa2y1ClerkVO.getClerkDescription1() = "+ aa2y1ClerkVO.getClerkDescription1());
            log.info("aa2y1ClerkVO.getClerkDescription2() = "+ aa2y1ClerkVO.getClerkDescription2());
            assertEquals("aa2y1ClerkVO.getIdSalesAssistant() is expected to be ySalesAssistant","ySalesAssistant", aa2y1ClerkVO.getIdSalesAssistant());
            assertEquals("aa2y1ClerkVO.getIdClerk() is expected to be 1","1", aa2y1ClerkVO.getIdClerk());
            assertNull("aa2y1ClerkVO.getClerkDescription1() is expected to be null", aa2y1ClerkVO.getClerkDescription1());
            assertNull("aa2y1ClerkVO.getClerkDescription2() is expected to be null", aa2y1ClerkVO.getClerkDescription2());



            SalesAssistantVO aa2zSalesAssistantVO =  aa2SalesAssistantVOsIterator.next();

            log.info("aa2zSalesAssistantVO.getIdSalesAssistant() = "+ aa2zSalesAssistantVO.getIdSalesAssistant());
            log.info("aa2zSalesAssistantVO.getSalesAssistantDescription1() = "+ aa2zSalesAssistantVO.getSalesAssistantDescription1());
            log.info("aa2zSalesAssistantVO.getSalesAssistantDescription2() = "+ aa2zSalesAssistantVO.getSalesAssistantDescription2());
            assertEquals("aa2zSalesAssistantVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2zSalesAssistantVO.getIdSalesAssistant());
            assertNull("aa2zSalesAssistantVO.getSalesAssistantDescription1() is expected to be null", aa2zSalesAssistantVO.getSalesAssistantDescription1());
            assertNull("aa2zSalesAssistantVO.getSalesAssistantDescription2() is expected to be null", aa2zSalesAssistantVO.getSalesAssistantDescription2());


            Collection<ClerkVO> aa2zClerkVOs = aa2zSalesAssistantVO.getClerkVOs();
            log.info("aa2zClerkVOs.size() = "+ aa2zClerkVOs.size());
            assertEquals("aa2zClerkVOs.size() expected is 2",2, aa2zClerkVOs.size());
            Iterator<ClerkVO> aa2zClerkVOsIterator = aa2zClerkVOs.iterator();

            ClerkVO aa2z1ClerkVO =  aa2zClerkVOsIterator.next();
            log.info("aa2z1ClerkVO.getIdSalesAssistant() = "+ aa2z1ClerkVO.getIdSalesAssistant());
            log.info("aa2z1ClerkVO.getIdClerk() = "+ aa2z1ClerkVO.getIdClerk());
            log.info("aa2z1ClerkVO.getClerkDescription1() = "+ aa2z1ClerkVO.getClerkDescription1());
            log.info("aa2z1ClerkVO.getClerkDescription2() = "+ aa2z1ClerkVO.getClerkDescription2());
            assertEquals("aa2z1ClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2z1ClerkVO.getIdSalesAssistant());
            assertEquals("aa2z1ClerkVO.getIdClerk() is expected to be 1","1", aa2z1ClerkVO.getIdClerk());
            assertNull("aa2z1ClerkVO.getClerkDescription1() is expected to be null", aa2z1ClerkVO.getClerkDescription1());
            assertNull("aa2z1ClerkVO.getClerkDescription2() is expected to be null", aa2z1ClerkVO.getClerkDescription2());

            ClerkVO aa2z2ClerkVO =  aa2zClerkVOsIterator.next();
            log.info("aa2z2ClerkVO.getIdSalesAssistant() = "+ aa2z2ClerkVO.getIdSalesAssistant());
            log.info("aa2z2ClerkVO.getIdClerk() = "+ aa2z2ClerkVO.getIdClerk());
            log.info("aa2z2ClerkVO.getClerkDescription1() = "+ aa2z2ClerkVO.getClerkDescription1());
            log.info("aa2z2ClerkVO.getClerkDescription2() = "+ aa2z2ClerkVO.getClerkDescription2());
            assertEquals("aa2z2ClerkVO.getIdSalesAssistant() is expected to be zSalesAssistant","zSalesAssistant", aa2z2ClerkVO.getIdSalesAssistant());
            assertEquals("aa2z2ClerkVO.getIdClerk() is expected to be 2","2", aa2z2ClerkVO.getIdClerk());
            assertNull("aa2z2ClerkVO.getClerkDescription1() is expected to be null", aa2z2ClerkVO.getClerkDescription1());
            assertNull("aa2z2ClerkVO.getClerkDescription2() is expected to be null", aa2z2ClerkVO.getClerkDescription2());


        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".checkForAddDirectorVONoDescr(DirectorVO aDirectorVO) :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".checkForAddDirectorVONoDescr(DirectorVO aDirectorVO) **************");

    }


    @Test public void testAddToValueObjectsTreeWithCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddToValueObjectsTreeWithCollection() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = buildPartialDirectorVO();
            aDirectorVO.setDirectorClerkVOs(buildDirectorClerkVOs());

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String [][] groupedPkNames = new String [4][] ;
            groupedPkNames[0] = new String []{"idSalesManager"};
            groupedPkNames[1] = new String []{"idSalesManager","idSalesDivision"};
            groupedPkNames[2] = new String []{"idSalesAssistant"};
            groupedPkNames[3] = new String []{"idSalesAssistant","idClerk"};

            String[][] nodePAttributeNames = new String [4][] ;
            nodePAttributeNames[0] = new String []{"salesManagerDescription1","salesManagerDescription2"};
            nodePAttributeNames[1] = new String []{"salesDivisionDescription1","salesDivisionDescription2"};
            nodePAttributeNames[2] = new String []{"salesAssistantDescription1","salesAssistantDescription2"};
            nodePAttributeNames[3] = new String []{"clerkDescription1","clerkDescription2"};

            Object[][] nodeValuesArray = new Object [4][] ;
            nodeValuesArray[0] = new Object []{"SalesManagerDescription1","SalesManagerDescription2"};
            nodeValuesArray[1] = new Object []{"SalesDivisionDescription1","SalesDivisionDescription2"};
            nodeValuesArray[2] = new Object []{"SalesAssistantDescription1","SalesAssistantDescription2"};
            nodeValuesArray[3] = new Object []{"ClerkDescription1","ClerkDescription2"};

            log.info("testAddToValueObjectsTreeWithCollection: before bd call");
            bd.addToValueObjectsTreeWithCollection(aDirectorVO, "directorClerkVOs" ,path,  groupedPkNames,   nodePAttributeNames,nodeValuesArray);
            checkForAddDirectorVO( aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToValueObjectsTreeWithCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToValueObjectsTreeWithCollection() **************");
    }

    @Test public void testAddToValueObjectsTreeWithCollectionNoGroupedPkNames(){
        log.info("************Entering the "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionNoGroupedPkNames() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = buildPartialDirectorVO();
            aDirectorVO.setDirectorClerkVOs(buildDirectorClerkVOs());

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";


            String[][] nodePAttributeNames = new String [4][] ;
            nodePAttributeNames[0] = new String []{"salesManagerDescription1","salesManagerDescription2"};
            nodePAttributeNames[1] = new String []{"salesDivisionDescription1","salesDivisionDescription2"};
            nodePAttributeNames[2] = new String []{"salesAssistantDescription1","salesAssistantDescription2"};
            nodePAttributeNames[3] = new String []{"clerkDescription1","clerkDescription2"};

            Object[][] nodeValuesArray = new Object [4][] ;
            nodeValuesArray[0] = new Object []{"SalesManagerDescription1","SalesManagerDescription2"};
            nodeValuesArray[1] = new Object []{"SalesDivisionDescription1","SalesDivisionDescription2"};
            nodeValuesArray[2] = new Object []{"SalesAssistantDescription1","SalesAssistantDescription2"};
            nodeValuesArray[3] = new Object []{"ClerkDescription1","ClerkDescription2"};

            log.info("testAddToValueObjectsTreeWithCollectionNoGroupedPkNames: before bd call");
            bd.addToValueObjectsTreeWithCollection(aDirectorVO, "directorClerkVOs" ,path,     nodePAttributeNames,nodeValuesArray);
            checkForAddDirectorVO( aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionNoGroupedPkNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionNoGroupedPkNames() **************");
    }

    @Test public void testAddToValueObjectsTreeWithCollectionNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionNoValueArray() ***************");
        try{
            BD bd = getBD();

            DirectorVO aDirectorVO = buildPartialDirectorVO();
            aDirectorVO.setDirectorClerkVOs(buildDirectorClerkVOs());

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String [][] groupedPkNames = new String [4][] ;
            groupedPkNames[0] = new String []{"idSalesManager"};
            groupedPkNames[1] = new String []{"idSalesManager","idSalesDivision"};
            groupedPkNames[2] = new String []{"idSalesAssistant"};
            groupedPkNames[3] = new String []{"idSalesAssistant","idClerk"};

            bd.addToValueObjectsTreeWithCollection(aDirectorVO, "directorClerkVOs" ,path,  groupedPkNames);
            checkForAddDirectorVONoDescr(aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionNoValueArray() **************");
    }

    @Test public void testAddToValueObjectsTreeWithCollectionNoGroupedPkNamesNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionNoGroupedPkNamesNoValueArray() ***************");
        try{
            BD bd = getBD();

            DirectorVO aDirectorVO = buildPartialDirectorVO();
            aDirectorVO.setDirectorClerkVOs(buildDirectorClerkVOs());
            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";

            bd.addToValueObjectsTreeWithCollection(aDirectorVO, "directorClerkVOs" ,path);
            checkForAddDirectorVONoDescr(aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionNoGroupedPkNamesNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionNoGroupedPkNamesNoValueArray() **************");
    }

    @Test public void testAddToValueObjectsTreeWithCollectionValuesCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionValuesCollection() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = buildPartialDirectorVO();

            Collection directorClerkVOs =   buildDirectorClerkVOs();

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String [][] groupedPkNames = new String [4][] ;
            groupedPkNames[0] = new String []{"idSalesManager"};
            groupedPkNames[1] = new String []{"idSalesManager","idSalesDivision"};
            groupedPkNames[2] = new String []{"idSalesAssistant"};
            groupedPkNames[3] = new String []{"idSalesAssistant","idClerk"};

            String[][] nodePAttributeNames = new String [4][] ;
            nodePAttributeNames[0] = new String []{"salesManagerDescription1","salesManagerDescription2"};
            nodePAttributeNames[1] = new String []{"salesDivisionDescription1","salesDivisionDescription2"};
            nodePAttributeNames[2] = new String []{"salesAssistantDescription1","salesAssistantDescription2"};
            nodePAttributeNames[3] = new String []{"clerkDescription1","clerkDescription2"};

            Object[][] nodeValuesArray = new Object [4][] ;
            nodeValuesArray[0] = new Object []{"SalesManagerDescription1","SalesManagerDescription2"};
            nodeValuesArray[1] = new Object []{"SalesDivisionDescription1","SalesDivisionDescription2"};
            nodeValuesArray[2] = new Object []{"SalesAssistantDescription1","SalesAssistantDescription2"};
            nodeValuesArray[3] = new Object []{"ClerkDescription1","ClerkDescription2"};

            log.info("testCreateValueObjectsTreeWithCollection: before bd call");
            bd.addToValueObjectsTreeWithCollection(directorClerkVOs, aDirectorVO, path,  groupedPkNames,   nodePAttributeNames,nodeValuesArray);
            checkForAddDirectorVO(aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionValuesCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionValuesCollection() **************");
    }

    @Test public void testAddToValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNames(){
        log.info("************Entering the "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNames() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = buildPartialDirectorVO();

            Collection directorClerkVOs =   buildDirectorClerkVOs();

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";


            String[][] nodePAttributeNames = new String [4][] ;
            nodePAttributeNames[0] = new String []{"salesManagerDescription1","salesManagerDescription2"};
            nodePAttributeNames[1] = new String []{"salesDivisionDescription1","salesDivisionDescription2"};
            nodePAttributeNames[2] = new String []{"salesAssistantDescription1","salesAssistantDescription2"};
            nodePAttributeNames[3] = new String []{"clerkDescription1","clerkDescription2"};

            Object[][] nodeValuesArray = new Object [4][] ;
            nodeValuesArray[0] = new Object []{"SalesManagerDescription1","SalesManagerDescription2"};
            nodeValuesArray[1] = new Object []{"SalesDivisionDescription1","SalesDivisionDescription2"};
            nodeValuesArray[2] = new Object []{"SalesAssistantDescription1","SalesAssistantDescription2"};
            nodeValuesArray[3] = new Object []{"ClerkDescription1","ClerkDescription2"};

            log.info("testCreateValueObjectsTreeWithCollection: before bd call");
            bd.addToValueObjectsTreeWithCollection(directorClerkVOs,aDirectorVO, path,     nodePAttributeNames,nodeValuesArray);
            checkForAddDirectorVO( aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNames() **************");
    }

    @Test public void testAddToValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNamesNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNamesNoValueArray() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = buildPartialDirectorVO();
            Collection directorClerkVOs =   buildDirectorClerkVOs();

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";


            bd.addToValueObjectsTreeWithCollection(directorClerkVOs, aDirectorVO, path);

            checkForAddDirectorVONoDescr(aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNamesNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionValuesCollectionNoGroupedPkNamesNoValueArray() **************");
    }

    @Test public void testAddToValueObjectsTreeWithCollectionAsCreate(){
        log.info("************Entering the "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionAsCreate() ***************");
        try{
            BD bd = getBD();


            DirectorVO aDirectorVO = new DirectorVO();
            aDirectorVO.setIdDirector("aDirector");
            aDirectorVO.setDirectorClerkVOs(buildDirectorClerkVOs());

            String path="salesManagerVO.salesDivisionVOs.salesAssistantVOs.clerkVOs";
            String [][] groupedPkNames = new String [4][] ;
            groupedPkNames[0] = new String []{"idSalesManager"};
            groupedPkNames[1] = new String []{"idSalesManager","idSalesDivision"};
            groupedPkNames[2] = new String []{"idSalesAssistant"};
            groupedPkNames[3] = new String []{"idSalesAssistant","idClerk"};

            String[][] nodePAttributeNames = new String [4][] ;
            nodePAttributeNames[0] = new String []{"salesManagerDescription1","salesManagerDescription2"};
            nodePAttributeNames[1] = new String []{"salesDivisionDescription1","salesDivisionDescription2"};
            nodePAttributeNames[2] = new String []{"salesAssistantDescription1","salesAssistantDescription2"};
            nodePAttributeNames[3] = new String []{"clerkDescription1","clerkDescription2"};

            Object[][] nodeValuesArray = new Object [4][] ;
            nodeValuesArray[0] = new Object []{"SalesManagerDescription1","SalesManagerDescription2"};
            nodeValuesArray[1] = new Object []{"SalesDivisionDescription1","SalesDivisionDescription2"};
            nodeValuesArray[2] = new Object []{"SalesAssistantDescription1","SalesAssistantDescription2"};
            nodeValuesArray[3] = new Object []{"ClerkDescription1","ClerkDescription2"};

            bd.addToValueObjectsTreeWithCollection(aDirectorVO, "directorClerkVOs" ,path,  groupedPkNames,   nodePAttributeNames,nodeValuesArray);
            checkDirectorVO( aDirectorVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionAsCreate() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToValueObjectsTreeWithCollectionAsCreate() **************");
    }


    protected Path8VO buildkkkPath8VO(){
        log.info("************Entering the "+getThisClassName()+".buildkkkPath8VO() ***************");
        Path8VO  kkkPath8VO = null ;
        try{
            kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");

            Collection<Path9VO> kkkPath8Path9VOs  = new ArrayList<Path9VO>();

            Path9VO kkk1Path9VO = new Path9VO();
            kkk1Path9VO.setIdPath8("kkkPath8");
            kkk1Path9VO.setIdPath9("kkk1Path9");
            kkk1Path9VO.setIdPath10("kkk11Path10");
            kkk1Path9VO.setDescription("oldDescription");

            Path10VO kkk11Path10VO = new Path10VO();
            kkk11Path10VO.setIdPath10("kkk11Path10");
            kkk1Path9VO.setPath10VO(kkk11Path10VO);


            Path9VO kkk2Path9VO = new Path9VO();
            kkk2Path9VO.setIdPath8("kkkPath8");
            kkk2Path9VO.setIdPath9("kkk2Path9");
            kkk2Path9VO.setIdPath10("kkk21Path10");
            kkk2Path9VO.setDescription("oldDescription");

            Path10VO kkk21Path10VO = new Path10VO();
            kkk21Path10VO.setIdPath10("kkk21Path10");
            kkk2Path9VO.setPath10VO(kkk21Path10VO);


            kkkPath8Path9VOs.add(kkk1Path9VO);
            kkkPath8Path9VOs.add(kkk2Path9VO);

            kkkPath8VO.setPath9VOs(kkkPath8Path9VOs);




        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildkkkPath8VO() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildkkkPath8VO() **************");
        return kkkPath8VO;
    }

    protected Path3VO buildkkkPath3VO(){
        log.info("************Entering the "+getThisClassName()+".buildkkkPath3VO() ***************");
        Path3VO  kkkPath3VO = null ;
        try{
            kkkPath3VO = new Path3VO();
            kkkPath3VO.setIdPath3("kkkPath3");

            Collection<Path4VO> kkkPath3Path4VOs  = new ArrayList<Path4VO>();

            Path4VO kkk1Path4VO = new Path4VO();
            kkk1Path4VO.setIdPath4("kkk1Path4");
            kkk1Path4VO.setIdPath5("kkk11Path5");
            kkk1Path4VO.setDescription("oldDescription");

            Path5VO kkk11Path5VO = new Path5VO();
            kkk11Path5VO.setIdPath5("kkk11Path5");
            kkk1Path4VO.setPath5VO(kkk11Path5VO);


            Path4VO kkk2Path4VO = new Path4VO();
            kkk2Path4VO.setIdPath4("kkk2Path4");
            kkk2Path4VO.setIdPath5("kkk21Path5");
            kkk2Path4VO.setDescription("oldDescription");

            Path5VO kkk21Path5VO = new Path5VO();
            kkk21Path5VO.setIdPath5("kkk21Path5");
            kkk2Path4VO.setPath5VO(kkk21Path5VO);


            kkkPath3Path4VOs.add(kkk1Path4VO);
            kkkPath3Path4VOs.add(kkk2Path4VO);

            kkkPath3VO.setPath4VOs(kkkPath3Path4VOs);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildkkkPath3VO() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildkkkPath3VO() **************");
        return kkkPath3VO;
    }

    protected Collection<Path10VO> buildPath10VOs(Path8VO path8VO){
        log.info("************Entering the "+getThisClassName()+".buildPath10VOs(Path8VO path8VO) ***************");
        Collection<Path10VO> path10VOs = null;
        try{
            Path10VO zz11Path10VO = new Path10VO();
            zz11Path10VO.setIdPath10("zz11Path10");

            Path10VO zz21Path10VO = new Path10VO();
            zz21Path10VO.setIdPath10("zz21Path10");

            path10VOs = new ArrayList<Path10VO>();
            Iterator<Path9VO> iterator = path8VO.getPath9VOs().iterator();
            path10VOs.add(iterator.next().getPath10VO());
            path10VOs.add(iterator.next().getPath10VO());
            path10VOs.add(zz11Path10VO);
            path10VOs.add(zz21Path10VO);
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildPath10VOs(Path8VO path8VO):"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildPath10VOs(Path8VO path8VO) **************");
        return path10VOs;
    }

    protected void checkPath9VOsRelationship(Path8VO kkkPath8VO){
        log.info("************Entering the "+getThisClassName()+".checkPath9VOsRelationship(Path8VO kkkPath8VO)***************");
        try{

            Collection<Path9VO> testkkkPath8Path9VOs = kkkPath8VO.getPath9VOs();
            log.info("testkkkPath8Path9VOs.size() = "+ testkkkPath8Path9VOs.size());
            assertEquals("testkkkPath8Path9VOs.size() expected is 4",4, testkkkPath8Path9VOs.size());
            Iterator<Path9VO> testkkkPath8Path9VOsIterator = testkkkPath8Path9VOs.iterator();


            Path9VO testkkk1Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testkkk2Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz1Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz2Path9VO = testkkkPath8Path9VOsIterator.next();

            log.info("testkkk1Path9VO.getIdPath9() = "+ testkkk1Path9VO.getIdPath9());
            log.info("testkkk1Path9VO.getIdPath8() = "+ testkkk1Path9VO.getIdPath8());
            log.info("testkkk1Path9VO.getIdPath10() = "+ testkkk1Path9VO.getIdPath10());
            log.info("testkkk1Path9VO.getDescription() = "+ testkkk1Path9VO.getDescription());
            assertEquals("testkkk1Path9VO.getIdPath9() is expected to be kkk1Path9","kkk1Path9", testkkk1Path9VO.getIdPath9());
            assertEquals("testkkk1Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testkkk1Path9VO.getIdPath8());
            assertEquals("testkkk1Path9VO.getIdPath10() is expected to be kkk11Path10", "kkk11Path10",testkkk1Path9VO.getIdPath10());
            assertEquals("testkkk1Path9VO.getDescription() is expected to be oldDescription","oldDescription", testkkk1Path9VO.getDescription());

            log.info("testkkk2Path9VO.getIdPath9() = "+ testkkk2Path9VO.getIdPath9());
            log.info("testkkk2Path9VO.getIdPath8() = "+ testkkk2Path9VO.getIdPath8());
            log.info("testkkk2Path9VO.getIdPath10() = "+ testkkk2Path9VO.getIdPath10());
            log.info("testkkk2Path9VO.getDescription() = "+ testkkk2Path9VO.getDescription());
            assertEquals("testkkk2Path9VO.getIdPath9() is expected to be kkk2Path9","kkk2Path9", testkkk2Path9VO.getIdPath9());
            assertEquals("testkkk2Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testkkk2Path9VO.getIdPath8());
            assertEquals("testkkk2Path9VO.getIdPath10() is expected to be kkk21Path10","kkk21Path10", testkkk2Path9VO.getIdPath10());
            assertEquals("testkkk2Path9VO.getDescription() is expected to be oldDescription","oldDescription", testkkk2Path9VO.getDescription());


            log.info("testzz1Path9VO.getIdPath9() = "+ testzz1Path9VO.getIdPath9());
            log.info("testzz1Path9VO.getIdPath8() = "+ testzz1Path9VO.getIdPath8());
            log.info("testzz1Path9VO.getIdPath10() = "+ testzz1Path9VO.getIdPath10());
            log.info("testzz1Path9VO.getDescription() = "+ testzz1Path9VO.getDescription());
            assertNull("testzz1Path9VO.getIdPath9() is expected to be null", testzz1Path9VO.getIdPath9());
            assertEquals("testzz1Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz1Path9VO.getIdPath8());
            assertEquals("testzz1Path9VO.getIdPath10() is expected to be zz11Path10","zz11Path10", testzz1Path9VO.getIdPath10());
            assertEquals("testzz1Path9VO.getDescription() is expected to be newDescription","newDescription", testzz1Path9VO.getDescription());

            Path10VO testzz11Path10VO = testzz1Path9VO.getPath10VO();
            log.info("testzz11Path10VO.getIdPath10() = "+ testzz11Path10VO.getIdPath10());
            assertEquals("testzz11Path10VO.getIdPath10() is expected to be zz11Path10","zz11Path10", testzz11Path10VO.getIdPath10());


            log.info("testzz2Path9VO.getIdPath9() = "+ testzz2Path9VO.getIdPath9());
            log.info("testzz2Path9VO.getIdPath8() = "+ testzz2Path9VO.getIdPath8());
            log.info("testzz2Path9VO.getIdPath10() = "+ testzz2Path9VO.getIdPath10());
            log.info("testzz2Path9VO.getDescription() = "+ testzz2Path9VO.getDescription());
            assertNull("testzz2Path9VO.getIdPath9() is expected to be null", testzz2Path9VO.getIdPath9());
            assertEquals("testzz2Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz2Path9VO.getIdPath8());
            assertEquals("testzz2Path9VO.getIdPath10() is expected to be zz21Path10","zz21Path10", testzz2Path9VO.getIdPath10());
            assertEquals("testzz2Path9VO.getDescription() is expected to be newDescription","newDescription", testzz2Path9VO.getDescription());

            Path10VO testzz21Path10VO = testzz2Path9VO.getPath10VO();
            log.info("testzz21Path10VO.getIdPath10() = "+ testzz21Path10VO.getIdPath10());
            assertEquals("testzz21Path10VO.getIdPath10() is expected to be zz21Path10","zz21Path10", testzz21Path10VO.getIdPath10());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath9VOsRelationship(Path8VO kkkPath8VO) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath9VOsRelationship(Path8VO kkkPath8VO) **************");
    }

    private void checkPath9VOsRelationshipNoNewDescr(Path8VO kkkPath8VO){
        log.info("************Entering the "+getThisClassName()+".checkPath9VOsRelationshipNoNewDescr(Path8VO kkkPath8VO)***************");
        try{

            Collection<Path9VO> testkkkPath8Path9VOs = kkkPath8VO.getPath9VOs();
            log.info("testkkkPath8Path9VOs.size() = "+ testkkkPath8Path9VOs.size());
            assertEquals("testkkkPath8Path9VOs.size() expected is 4",4, testkkkPath8Path9VOs.size());
            Iterator<Path9VO> testkkkPath8Path9VOsIterator = testkkkPath8Path9VOs.iterator();


            Path9VO testkkk1Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testkkk2Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz1Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz2Path9VO = testkkkPath8Path9VOsIterator.next();

            log.info("testkkk1Path9VO.getIdPath9() = "+ testkkk1Path9VO.getIdPath9());
            log.info("testkkk1Path9VO.getIdPath8() = "+ testkkk1Path9VO.getIdPath8());
            log.info("testkkk1Path9VO.getIdPath10() = "+ testkkk1Path9VO.getIdPath10());
            log.info("testkkk1Path9VO.getDescription() = "+ testkkk1Path9VO.getDescription());
            assertEquals("testkkk1Path9VO.getIdPath9() is expected to be kkk1Path9","kkk1Path9", testkkk1Path9VO.getIdPath9());
            assertEquals("testkkk1Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testkkk1Path9VO.getIdPath8());
            assertEquals("testkkk1Path9VO.getIdPath10() is expected to be kkk11Path10", "kkk11Path10",testkkk1Path9VO.getIdPath10());
            assertEquals("testkkk1Path9VO.getDescription() is expected to be oldDescription","oldDescription", testkkk1Path9VO.getDescription());

            log.info("testkkk2Path9VO.getIdPath9() = "+ testkkk2Path9VO.getIdPath9());
            log.info("testkkk2Path9VO.getIdPath8() = "+ testkkk2Path9VO.getIdPath8());
            log.info("testkkk2Path9VO.getIdPath10() = "+ testkkk2Path9VO.getIdPath10());
            log.info("testkkk2Path9VO.getDescription() = "+ testkkk2Path9VO.getDescription());
            assertEquals("testkkk2Path9VO.getIdPath9() is expected to be kkk2Path9","kkk2Path9", testkkk2Path9VO.getIdPath9());
            assertEquals("testkkk2Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testkkk2Path9VO.getIdPath8());
            assertEquals("testkkk2Path9VO.getIdPath10() is expected to be kkk21Path10","kkk21Path10", testkkk2Path9VO.getIdPath10());
            assertEquals("testkkk2Path9VO.getDescription() is expected to be oldDescription","oldDescription", testkkk2Path9VO.getDescription());


            log.info("testzz1Path9VO.getIdPath9() = "+ testzz1Path9VO.getIdPath9());
            log.info("testzz1Path9VO.getIdPath8() = "+ testzz1Path9VO.getIdPath8());
            log.info("testzz1Path9VO.getIdPath10() = "+ testzz1Path9VO.getIdPath10());
            log.info("testzz1Path9VO.getDescription() = "+ testzz1Path9VO.getDescription());
            assertNull("testzz1Path9VO.getIdPath9() is expected to be null", testzz1Path9VO.getIdPath9());
            assertEquals("testzz1Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz1Path9VO.getIdPath8());
            assertEquals("testzz1Path9VO.getIdPath10() is expected to be zz11Path10","zz11Path10", testzz1Path9VO.getIdPath10());
            assertNull("testzz1Path9VO.getDescription() is expected to be null",testzz1Path9VO.getDescription());

            Path10VO testzz11Path10VO = testzz1Path9VO.getPath10VO();
            log.info("testzz11Path10VO.getIdPath10() = "+ testzz11Path10VO.getIdPath10());
            assertEquals("testzz11Path10VO.getIdPath10() is expected to be zz11Path10","zz11Path10", testzz11Path10VO.getIdPath10());


            log.info("testzz2Path9VO.getIdPath9() = "+ testzz2Path9VO.getIdPath9());
            log.info("testzz2Path9VO.getIdPath8() = "+ testzz2Path9VO.getIdPath8());
            log.info("testzz2Path9VO.getIdPath10() = "+ testzz2Path9VO.getIdPath10());
            log.info("testzz2Path9VO.getDescription() = "+ testzz2Path9VO.getDescription());
            assertNull("testzz2Path9VO.getIdPath9() is expected to be null", testzz2Path9VO.getIdPath9());
            assertEquals("testzz2Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz2Path9VO.getIdPath8());
            assertEquals("testzz2Path9VO.getIdPath10() is expected to be zz21Path10","zz21Path10", testzz2Path9VO.getIdPath10());
            assertNull("testzz2Path9VO.getDescription() is expected to be null", testzz2Path9VO.getDescription());

            Path10VO testzz21Path10VO = testzz2Path9VO.getPath10VO();
            log.info("testzz21Path10VO.getIdPath10() = "+ testzz21Path10VO.getIdPath10());
            assertEquals("testzz21Path10VO.getIdPath10() is expected to be zz21Path10","zz21Path10", testzz21Path10VO.getIdPath10());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath9VOsRelationship(Path8VO kkkPath8VO) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath9VOsRelationshipNoNewDescr(Path8VO kkkPath8VO) **************");
    }

    @Test public void testAddToRelationshipCollectionMissingElements(){
        log.info("************Entering the "+getThisClassName()+".testAddToRelationshipCollectionMissingElements() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = buildkkkPath8VO();

            Collection<Path10VO> path10VOs = buildPath10VOs(kkkPath8VO);

            bd.addToRelationshipCollectionMissingElements(kkkPath8VO, "path9VOs", "path10VO", path10VOs, new String[]{"description"},  new Object[]{"newDescription"});

            checkPath9VOsRelationship(kkkPath8VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRelationshipCollectionMissingElements() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRelationshipCollectionMissingElements() **************");
    }

    @Test public void testAddToRelationshipCollectionMissingElementsNoValuesArray(){
        log.info("************Entering the "+getThisClassName()+".testAddToRelationshipCollectionMissingElementsNoValuesArray() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = buildkkkPath8VO();

            Collection<Path10VO> path10VOs = buildPath10VOs(kkkPath8VO);

            bd.addToRelationshipCollectionMissingElements(kkkPath8VO, "path9VOs", "path10VO", path10VOs);

            checkPath9VOsRelationshipNoNewDescr(kkkPath8VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRelationshipCollectionMissingElementsNoValuesArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRelationshipCollectionMissingElementsNoValuesArray() **************");
    }


    @Test public void testAddToRelationshipCollectionMissingElementsNoValueObjectCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddToRelationshipCollectionMissingElementsNoValueObjectCollection() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = buildkkkPath8VO();


            bd.addToRelationshipCollectionMissingElements(kkkPath8VO, "path9VOs", "path10VO", new String[]{"description"},  new Object[]{"newDescription"});

            Collection loadedPath10VOs = bd.findCollectionByTemplate(new Path10VO());

            Collection<Path9VO> testkkkPath8Path9VOs = kkkPath8VO.getPath9VOs();
            log.info("testkkkPath8Path9VOs.size() = "+ testkkkPath8Path9VOs.size());
            assertEquals("testkkkPath8Path9VOs.size() expected is "+(2+loadedPath10VOs.size()),2+loadedPath10VOs.size(), testkkkPath8Path9VOs.size());
            Iterator<Path9VO> testkkkPath8Path9VOsIterator = testkkkPath8Path9VOs.iterator();


            Path9VO testkkk1Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testkkk2Path9VO = testkkkPath8Path9VOsIterator.next();


            log.info("testkkk1Path9VO.getIdPath9() = "+ testkkk1Path9VO.getIdPath9());
            log.info("testkkk1Path9VO.getIdPath8() = "+ testkkk1Path9VO.getIdPath8());
            log.info("testkkk1Path9VO.getIdPath10() = "+ testkkk1Path9VO.getIdPath10());
            log.info("testkkk1Path9VO.getDescription() = "+ testkkk1Path9VO.getDescription());
            assertEquals("testkkk1Path9VO.getIdPath9() is expected to be kkk1Path9","kkk1Path9", testkkk1Path9VO.getIdPath9());
            assertEquals("testkkk1Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testkkk1Path9VO.getIdPath8());
            assertEquals("testkkk1Path9VO.getIdPath10() is expected to be kkk11Path10", "kkk11Path10",testkkk1Path9VO.getIdPath10());
            assertEquals("testkkk1Path9VO.getDescription() is expected to be oldDescription","oldDescription", testkkk1Path9VO.getDescription());

            log.info("testkkk2Path9VO.getIdPath9() = "+ testkkk2Path9VO.getIdPath9());
            log.info("testkkk2Path9VO.getIdPath8() = "+ testkkk2Path9VO.getIdPath8());
            log.info("testkkk2Path9VO.getIdPath10() = "+ testkkk2Path9VO.getIdPath10());
            log.info("testkkk2Path9VO.getDescription() = "+ testkkk2Path9VO.getDescription());
            assertEquals("testkkk2Path9VO.getIdPath9() is expected to be kkk2Path9","kkk2Path9", testkkk2Path9VO.getIdPath9());
            assertEquals("testkkk2Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testkkk2Path9VO.getIdPath8());
            assertEquals("testkkk2Path9VO.getIdPath10() is expected to be kkk21Path10","kkk21Path10", testkkk2Path9VO.getIdPath10());
            assertEquals("testkkk2Path9VO.getDescription() is expected to be oldDescription","oldDescription", testkkk2Path9VO.getDescription());

            Iterator loadedPath10VOsIterator = loadedPath10VOs.iterator();

            while(loadedPath10VOsIterator.hasNext()) {
                Path9VO path9VO = testkkkPath8Path9VOsIterator.next();
                Path10VO path10VO = (Path10VO) loadedPath10VOsIterator.next();

                log.info("path9VO.getIdPath9() = "+ path9VO.getIdPath9());
                log.info("path9VO.getIdPath8() = "+ path9VO.getIdPath8());
                log.info("path9VO.getIdPath10() = "+ path9VO.getIdPath10());
                log.info("path9VO.getDescription() = "+ path9VO.getDescription());
                assertNull("path9VO.getIdPath9() is expected to be null", path9VO.getIdPath9());
                assertEquals("path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", path9VO.getIdPath8());
                assertEquals("path9VO.getIdPath10() is expected to be "+path10VO.getIdPath10(),path10VO.getIdPath10(), path9VO.getIdPath10());
                assertEquals("path9VO.getDescription() is expected to be newDescription","newDescription",path9VO.getDescription());

                Path10VO path9Path10VO = path9VO.getPath10VO();
                log.info("path9Path10VO.getIdPath10() = "+ path9Path10VO.getIdPath10());
                assertEquals("path9Path10VO.getIdPath10() is expected to be "+path10VO.getIdPath10(),path10VO.getIdPath10(), path9Path10VO.getIdPath10());
            }

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRelationshipCollectionMissingElementsNoValueObjectCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRelationshipCollectionMissingElementsNoValueObjectCollection() **************");
    }

    @Test 
    public void testAddToRelationshipCollectionMissingElementsM2NNoValueObjectCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddToRelationshipCollectionMissingElementsM2NNoValueObjectCollection() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = buildkkkPath3VO();


            bd.addToRelationshipCollectionMissingElements(kkkPath3VO, "path4VOs", "path5VO", new String[]{"description"},  new Object[]{"newDescription"});

            Collection loadedPath5VOs = bd.findCollectionByTemplate(new Path5VO());

            Collection<Path4VO> testkkkPath3Path4VOs = kkkPath3VO.getPath4VOs();
            log.info("testkkkPath3Path4VOs.size() = "+ testkkkPath3Path4VOs.size());
            assertEquals("testkkkPath3Path4VOs.size() expected is "+(2+loadedPath5VOs.size()),2+loadedPath5VOs.size(), testkkkPath3Path4VOs.size());
            Iterator<Path4VO> testkkkPath3Path4VOsIterator = testkkkPath3Path4VOs.iterator();


            Path4VO testkkk1Path4VO = testkkkPath3Path4VOsIterator.next();
            Path4VO testkkk2Path4VO = testkkkPath3Path4VOsIterator.next();


            log.info("testkkk1Path4VO.getIdPath4() = "+ testkkk1Path4VO.getIdPath4());
            log.info("testkkk1Path4VO.getIdPath5() = "+ testkkk1Path4VO.getIdPath5());
            log.info("testkkk1Path4VO.getDescription() = "+ testkkk1Path4VO.getDescription());
            assertEquals("testkkk1Path4VO.getIdPath4() is expected to be kkk1Path4","kkk1Path4", testkkk1Path4VO.getIdPath4());
            assertEquals("testkkk1Path4VO.getIdPath5() is expected to be kkk11Path5", "kkk11Path5",testkkk1Path4VO.getIdPath5());
            assertEquals("testkkk1Path4VO.getDescription() is expected to be oldDescription","oldDescription", testkkk1Path4VO.getDescription());

            log.info("testkkk2Path4VO.getIdPath4() = "+ testkkk2Path4VO.getIdPath4());
            log.info("testkkk2Path4VO.getIdPath5() = "+ testkkk2Path4VO.getIdPath5());
            log.info("testkkk2Path4VO.getDescription() = "+ testkkk2Path4VO.getDescription());
            assertEquals("testkkk2Path4VO.getIdPath4() is expected to be kkk2Path4","kkk2Path4", testkkk2Path4VO.getIdPath4());
            assertEquals("testkkk2Path4VO.getIdPath5() is expected to be kkk21Path5","kkk21Path5", testkkk2Path4VO.getIdPath5());
            assertEquals("testkkk2Path4VO.getDescription() is expected to be oldDescription","oldDescription", testkkk2Path4VO.getDescription());

            Iterator loadedPath5VOsIterator = loadedPath5VOs.iterator();

            while(loadedPath5VOsIterator.hasNext()) {
                Path4VO Path4VO = testkkkPath3Path4VOsIterator.next();
                Path5VO Path5VO = (Path5VO) loadedPath5VOsIterator.next();

                log.info("Path4VO.getIdPath4() = "+ Path4VO.getIdPath4());
                log.info("Path4VO.getIdPath5() = "+ Path4VO.getIdPath5());
                log.info("Path4VO.getDescription() = "+ Path4VO.getDescription());
                assertNull("Path4VO.getIdPath4() is expected to be null", Path4VO.getIdPath4());
                assertEquals("Path4VO.getIdPath5() is expected to be "+Path5VO.getIdPath5(),Path5VO.getIdPath5(), Path4VO.getIdPath5());
                assertEquals("Path4VO.getDescription() is expected to be newDescription","newDescription",Path4VO.getDescription());

                Path5VO Path4Path5VO = Path4VO.getPath5VO();
                log.info("Path4Path5VO.getIdPath5() = "+ Path4Path5VO.getIdPath5());
                assertEquals("Path4Path5VO.getIdPath5() is expected to be "+Path5VO.getIdPath5(),Path5VO.getIdPath5(), Path4Path5VO.getIdPath5());
            }

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRelationshipCollectionMissingElementsM2NNoValueObjectCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRelationshipCollectionMissingElementsM2NNoValueObjectCollection() **************");
    }




    private Collection<Path10VO> buildPath10VOs(){
        log.info("************Entering the "+getThisClassName()+".buildPath10VOs() ***************");
        Collection<Path10VO> path10VOs = null;
        try{
            Path10VO zz11Path10VO = new Path10VO();
            zz11Path10VO.setIdPath10("zz11Path10");

            Path10VO zz21Path10VO = new Path10VO();
            zz21Path10VO.setIdPath10("zz21Path10");

            Path10VO zz31Path10VO = new Path10VO();
            zz31Path10VO.setIdPath10("zz31Path10");

            Path10VO zz41Path10VO = new Path10VO();
            zz41Path10VO.setIdPath10("zz41Path10");

            path10VOs = new ArrayList<Path10VO>();

            path10VOs.add(zz11Path10VO);
            path10VOs.add(zz21Path10VO);
            path10VOs.add(zz31Path10VO);
            path10VOs.add(zz41Path10VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildPath10VOs():"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildPath10VOs() **************");
        return path10VOs;
    }

    private void checkPath9VOsRelationshipForCreateRelationship(Path8VO kkkPath8VO){
        log.info("************Entering the "+getThisClassName()+".checkPath9VOsRelationshipForCreateRelationship(Path8VO kkkPath8VO)***************");
        try{

            Collection<Path9VO> testkkkPath8Path9VOs = kkkPath8VO.getPath9VOs();
            log.info("testkkkPath8Path9VOs.size() = "+ testkkkPath8Path9VOs.size());
            assertEquals("testkkkPath8Path9VOs.size() expected is 4",4, testkkkPath8Path9VOs.size());
            Iterator<Path9VO> testkkkPath8Path9VOsIterator = testkkkPath8Path9VOs.iterator();

            Path9VO testzz1Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz2Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz3Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz4Path9VO = testkkkPath8Path9VOsIterator.next();

            log.info("testzz1Path9VO.getIdPath9() = "+ testzz1Path9VO.getIdPath9());
            log.info("testzz1Path9VO.getIdPath8() = "+ testzz1Path9VO.getIdPath8());
            log.info("testzz1Path9VO.getIdPath10() = "+ testzz1Path9VO.getIdPath10());
            log.info("testzz1Path9VO.getDescription() = "+ testzz1Path9VO.getDescription());
            assertNull("testzz1Path9VO.getIdPath9() is expected to be null", testzz1Path9VO.getIdPath9());
            assertEquals("testzz1Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz1Path9VO.getIdPath8());
            assertEquals("testzz1Path9VO.getIdPath10() is expected to be zz11Path10","zz11Path10", testzz1Path9VO.getIdPath10());
            assertEquals("testzz1Path9VO.getDescription() is expected to be newDescription","newDescription", testzz1Path9VO.getDescription());

            Path10VO testzz11Path10VO = testzz1Path9VO.getPath10VO();
            log.info("testzz11Path10VO.getIdPath10() = "+ testzz11Path10VO.getIdPath10());
            assertEquals("testzz11Path10VO.getIdPath10() is expected to be zz11Path10","zz11Path10", testzz11Path10VO.getIdPath10());


            log.info("testzz2Path9VO.getIdPath9() = "+ testzz2Path9VO.getIdPath9());
            log.info("testzz2Path9VO.getIdPath8() = "+ testzz2Path9VO.getIdPath8());
            log.info("testzz2Path9VO.getIdPath10() = "+ testzz2Path9VO.getIdPath10());
            log.info("testzz2Path9VO.getDescription() = "+ testzz2Path9VO.getDescription());
            assertNull("testzz2Path9VO.getIdPath9() is expected to be null", testzz2Path9VO.getIdPath9());
            assertEquals("testzz2Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz2Path9VO.getIdPath8());
            assertEquals("testzz2Path9VO.getIdPath10() is expected to be zz21Path10","zz21Path10", testzz2Path9VO.getIdPath10());
            assertEquals("testzz2Path9VO.getDescription() is expected to be newDescription","newDescription", testzz2Path9VO.getDescription());

            Path10VO testzz21Path10VO = testzz2Path9VO.getPath10VO();
            log.info("testzz21Path10VO.getIdPath10() = "+ testzz21Path10VO.getIdPath10());
            assertEquals("testzz21Path10VO.getIdPath10() is expected to be zz21Path10","zz21Path10", testzz21Path10VO.getIdPath10());



            log.info("testzz3Path9VO.getIdPath9() = "+ testzz3Path9VO.getIdPath9());
            log.info("testzz3Path9VO.getIdPath8() = "+ testzz3Path9VO.getIdPath8());
            log.info("testzz3Path9VO.getIdPath10() = "+ testzz3Path9VO.getIdPath10());
            log.info("testzz3Path9VO.getDescription() = "+ testzz3Path9VO.getDescription());
            assertNull("testzz3Path9VO.getIdPath9() is expected to be null", testzz3Path9VO.getIdPath9());
            assertEquals("testzz3Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz3Path9VO.getIdPath8());
            assertEquals("testzz3Path9VO.getIdPath10() is expected to be zz31Path10","zz31Path10", testzz3Path9VO.getIdPath10());
            assertEquals("testzz3Path9VO.getDescription() is expected to be newDescription","newDescription", testzz3Path9VO.getDescription());

            Path10VO testzz31Path10VO = testzz3Path9VO.getPath10VO();
            log.info("testzz31Path10VO.getIdPath10() = "+ testzz31Path10VO.getIdPath10());
            assertEquals("testzz31Path10VO.getIdPath10() is expected to be zz31Path10","zz31Path10", testzz31Path10VO.getIdPath10());



            log.info("testzz4Path9VO.getIdPath9() = "+ testzz4Path9VO.getIdPath9());
            log.info("testzz4Path9VO.getIdPath8() = "+ testzz4Path9VO.getIdPath8());
            log.info("testzz4Path9VO.getIdPath10() = "+ testzz4Path9VO.getIdPath10());
            log.info("testzz4Path9VO.getDescription() = "+ testzz4Path9VO.getDescription());
            assertNull("testzz4Path9VO.getIdPath9() is expected to be null", testzz4Path9VO.getIdPath9());
            assertEquals("testzz4Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz4Path9VO.getIdPath8());
            assertEquals("testzz4Path9VO.getIdPath10() is expected to be zz41Path10","zz41Path10", testzz4Path9VO.getIdPath10());
            assertEquals("testzz4Path9VO.getDescription() is expected to be newDescription","newDescription", testzz4Path9VO.getDescription());

            Path10VO testzz41Path10VO = testzz4Path9VO.getPath10VO();
            log.info("testzz41Path10VO.getIdPath10() = "+ testzz41Path10VO.getIdPath10());
            assertEquals("testzz41Path10VO.getIdPath10() is expected to be zz41Path10","zz41Path10", testzz41Path10VO.getIdPath10());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath9VOsRelationshipForCreateRelationship(Path8VO kkkPath8VO) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath9VOsRelationshipForCreateRelationship(Path8VO kkkPath8VO) **************");
    }

    private void checkPath9VOsRelationshipForCreateRelationshipNoDescr(Path8VO kkkPath8VO){
        log.info("************Entering the "+getThisClassName()+".checkPath9VOsRelationshipForCreateRelationshipNoDescr(Path8VO kkkPath8VO)***************");
        try{

            Collection<Path9VO> testkkkPath8Path9VOs = kkkPath8VO.getPath9VOs();
            log.info("testkkkPath8Path9VOs.size() = "+ testkkkPath8Path9VOs.size());
            assertEquals("testkkkPath8Path9VOs.size() expected is 4",4, testkkkPath8Path9VOs.size());
            Iterator<Path9VO> testkkkPath8Path9VOsIterator = testkkkPath8Path9VOs.iterator();

            Path9VO testzz1Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz2Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz3Path9VO = testkkkPath8Path9VOsIterator.next();
            Path9VO testzz4Path9VO = testkkkPath8Path9VOsIterator.next();

            log.info("testzz1Path9VO.getIdPath9() = "+ testzz1Path9VO.getIdPath9());
            log.info("testzz1Path9VO.getIdPath8() = "+ testzz1Path9VO.getIdPath8());
            log.info("testzz1Path9VO.getIdPath10() = "+ testzz1Path9VO.getIdPath10());
            log.info("testzz1Path9VO.getDescription() = "+ testzz1Path9VO.getDescription());
            assertNull("testzz1Path9VO.getIdPath9() is expected to be null", testzz1Path9VO.getIdPath9());
            assertEquals("testzz1Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz1Path9VO.getIdPath8());
            assertEquals("testzz1Path9VO.getIdPath10() is expected to be zz11Path10","zz11Path10", testzz1Path9VO.getIdPath10());

            Path10VO testzz11Path10VO = testzz1Path9VO.getPath10VO();
            log.info("testzz11Path10VO.getIdPath10() = "+ testzz11Path10VO.getIdPath10());
            assertEquals("testzz11Path10VO.getIdPath10() is expected to be zz11Path10","zz11Path10", testzz11Path10VO.getIdPath10());


            log.info("testzz2Path9VO.getIdPath9() = "+ testzz2Path9VO.getIdPath9());
            log.info("testzz2Path9VO.getIdPath8() = "+ testzz2Path9VO.getIdPath8());
            log.info("testzz2Path9VO.getIdPath10() = "+ testzz2Path9VO.getIdPath10());
            log.info("testzz2Path9VO.getDescription() = "+ testzz2Path9VO.getDescription());
            assertNull("testzz2Path9VO.getIdPath9() is expected to be null", testzz2Path9VO.getIdPath9());
            assertEquals("testzz2Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz2Path9VO.getIdPath8());
            assertEquals("testzz2Path9VO.getIdPath10() is expected to be zz21Path10","zz21Path10", testzz2Path9VO.getIdPath10());

            Path10VO testzz21Path10VO = testzz2Path9VO.getPath10VO();
            log.info("testzz21Path10VO.getIdPath10() = "+ testzz21Path10VO.getIdPath10());
            assertEquals("testzz21Path10VO.getIdPath10() is expected to be zz21Path10","zz21Path10", testzz21Path10VO.getIdPath10());



            log.info("testzz3Path9VO.getIdPath9() = "+ testzz3Path9VO.getIdPath9());
            log.info("testzz3Path9VO.getIdPath8() = "+ testzz3Path9VO.getIdPath8());
            log.info("testzz3Path9VO.getIdPath10() = "+ testzz3Path9VO.getIdPath10());
            log.info("testzz3Path9VO.getDescription() = "+ testzz3Path9VO.getDescription());
            assertNull("testzz3Path9VO.getIdPath9() is expected to be null", testzz3Path9VO.getIdPath9());
            assertEquals("testzz3Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz3Path9VO.getIdPath8());
            assertEquals("testzz3Path9VO.getIdPath10() is expected to be zz31Path10","zz31Path10", testzz3Path9VO.getIdPath10());

            Path10VO testzz31Path10VO = testzz3Path9VO.getPath10VO();
            log.info("testzz31Path10VO.getIdPath10() = "+ testzz31Path10VO.getIdPath10());
            assertEquals("testzz31Path10VO.getIdPath10() is expected to be zz31Path10","zz31Path10", testzz31Path10VO.getIdPath10());



            log.info("testzz4Path9VO.getIdPath9() = "+ testzz4Path9VO.getIdPath9());
            log.info("testzz4Path9VO.getIdPath8() = "+ testzz4Path9VO.getIdPath8());
            log.info("testzz4Path9VO.getIdPath10() = "+ testzz4Path9VO.getIdPath10());
            log.info("testzz4Path9VO.getDescription() = "+ testzz4Path9VO.getDescription());
            assertNull("testzz4Path9VO.getIdPath9() is expected to be null", testzz4Path9VO.getIdPath9());
            assertEquals("testzz4Path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", testzz4Path9VO.getIdPath8());
            assertEquals("testzz4Path9VO.getIdPath10() is expected to be zz41Path10","zz41Path10", testzz4Path9VO.getIdPath10());

            Path10VO testzz41Path10VO = testzz4Path9VO.getPath10VO();
            log.info("testzz41Path10VO.getIdPath10() = "+ testzz41Path10VO.getIdPath10());
            assertEquals("testzz41Path10VO.getIdPath10() is expected to be zz41Path10","zz41Path10", testzz41Path10VO.getIdPath10());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath9VOsRelationshipForCreateRelationshipNoDescr(Path8VO kkkPath8VO) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath9VOsRelationshipForCreateRelationshipNoDescr(Path8VO kkkPath8VO) **************");
    }


    @Test public void testCreateRelationshipCollection(){
        log.info("************Entering the "+getThisClassName()+".CreateRelationshipCollection() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");

            Collection<Path10VO> path10VOs = buildPath10VOs();

            bd.createRelationshipCollection(kkkPath8VO, "path9VOs", "path10VO", path10VOs, new String[]{"description"},  new Object[]{"newDescription"});

            checkPath9VOsRelationshipForCreateRelationship(kkkPath8VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".CreateRelationshipCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".CreateRelationshipCollection() **************");
    }


    @Test public void testCreateRelationshipCollectionNoValuesArray(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionNoValuesArray() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");

            Collection<Path10VO> path10VOs = buildPath10VOs();

            bd.createRelationshipCollection(kkkPath8VO, "path9VOs", "path10VO", path10VOs,null,null);

            checkPath9VOsRelationshipForCreateRelationshipNoDescr(kkkPath8VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionNoValuesArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionNoValuesArray() **************");
    }


    @Test public void testCreateRelationshipCollectionNoValueObjectCollection(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionNoValueObjectCollection() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");


            bd.createRelationshipCollection(kkkPath8VO, "path9VOs", "path10VO",null, new String[]{"description"},  new Object[]{"newDescription"});

            Collection loadedPath10VOs = bd.findCollectionByTemplate(new Path10VO());

            Collection<Path9VO> testkkkPath8Path9VOs = kkkPath8VO.getPath9VOs();
            log.info("testkkkPath8Path9VOs.size() = "+ testkkkPath8Path9VOs.size());
            assertEquals("testkkkPath8Path9VOs.size() expected is "+loadedPath10VOs.size(),loadedPath10VOs.size(), testkkkPath8Path9VOs.size());
            Iterator<Path9VO> testkkkPath8Path9VOsIterator = testkkkPath8Path9VOs.iterator();

            Iterator loadedPath10VOsIterator = loadedPath10VOs.iterator();

            while(loadedPath10VOsIterator.hasNext()) {
                Path9VO path9VO = testkkkPath8Path9VOsIterator.next();
                Path10VO path10VO = (Path10VO) loadedPath10VOsIterator.next();

                log.info("path9VO.getIdPath9() = "+ path9VO.getIdPath9());
                log.info("path9VO.getIdPath8() = "+ path9VO.getIdPath8());
                log.info("path9VO.getIdPath10() = "+ path9VO.getIdPath10());
                log.info("path9VO.getDescription() = "+ path9VO.getDescription());
                assertNull("path9VO.getIdPath9() is expected to be null", path9VO.getIdPath9());
                assertEquals("path9VO.getIdPath8() is expected to be kkkPath8","kkkPath8", path9VO.getIdPath8());
                assertEquals("path9VO.getIdPath10() is expected to be "+path10VO.getIdPath10(),path10VO.getIdPath10(), path9VO.getIdPath10());
                assertEquals("path9VO.getDescription() is expected to be newDescription","newDescription",path9VO.getDescription());

                Path10VO path9Path10VO = path9VO.getPath10VO();
                log.info("path9Path10VO.getIdPath10() = "+ path9Path10VO.getIdPath10());
                assertEquals("path9Path10VO.getIdPath10() is expected to be "+path10VO.getIdPath10(),path10VO.getIdPath10(), path9Path10VO.getIdPath10());
            }

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionNoValueObjectCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionNoValueObjectCollection() **************");
    }

    @Test public void testCreateRelationshipCollectionM2NNoValueObjectCollection(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionM2NNoValueObjectCollection() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = new Path3VO();
            kkkPath3VO.setIdPath3("kkkPath3");


            bd.createRelationshipCollection(kkkPath3VO, "path4VOs", "path5VO", null, new String[]{"description"},  new Object[]{"newDescription"});

            Collection loadedPath5VOs = bd.findCollectionByTemplate(new Path5VO());

            Collection<Path4VO> testkkkPath3Path4VOs = kkkPath3VO.getPath4VOs();
            log.info("testkkkPath3Path4VOs.size() = "+ testkkkPath3Path4VOs.size());
            assertEquals("testkkkPath3Path4VOs.size() expected is "+loadedPath5VOs.size(),loadedPath5VOs.size(), testkkkPath3Path4VOs.size());
            Iterator<Path4VO> testkkkPath3Path4VOsIterator = testkkkPath3Path4VOs.iterator();




            Iterator loadedPath5VOsIterator = loadedPath5VOs.iterator();

            while(loadedPath5VOsIterator.hasNext()) {
                Path4VO Path4VO = testkkkPath3Path4VOsIterator.next();
                Path5VO Path5VO = (Path5VO) loadedPath5VOsIterator.next();

                log.info("Path4VO.getIdPath4() = "+ Path4VO.getIdPath4());
                log.info("Path4VO.getIdPath5() = "+ Path4VO.getIdPath5());
                log.info("Path4VO.getDescription() = "+ Path4VO.getDescription());
                assertNull("Path4VO.getIdPath4() is expected to be null", Path4VO.getIdPath4());
                assertEquals("Path4VO.getIdPath5() is expected to be "+Path5VO.getIdPath5(),Path5VO.getIdPath5(), Path4VO.getIdPath5());
                assertEquals("Path4VO.getDescription() is expected to be newDescription","newDescription",Path4VO.getDescription());

                Path5VO Path4Path5VO = Path4VO.getPath5VO();
                log.info("Path4Path5VO.getIdPath5() = "+ Path4Path5VO.getIdPath5());
                assertEquals("Path4Path5VO.getIdPath5() is expected to be "+Path5VO.getIdPath5(),Path5VO.getIdPath5(), Path4Path5VO.getIdPath5());
            }

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionM2NNoValueObjectCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionM2NNoValueObjectCollection() **************");
    }


    private Collection<Path5VO> buildPath5VOs(){
        log.info("************Entering the "+getThisClassName()+".buildPath5VOs() ***************");
        Collection<Path5VO> Path5VOs = null;
        try{
            Path5VO zz11Path5VO = new Path5VO();
            zz11Path5VO.setIdPath5("zz11Path5");

            Path5VO zz21Path5VO = new Path5VO();
            zz21Path5VO.setIdPath5("zz21Path5");

            Path5VO zz31Path5VO = new Path5VO();
            zz31Path5VO.setIdPath5("zz31Path5");

            Path5VO zz41Path5VO = new Path5VO();
            zz41Path5VO.setIdPath5("zz41Path5");

            Path5VOs = new ArrayList<Path5VO>();

            Path5VOs.add(zz11Path5VO);
            Path5VOs.add(zz21Path5VO);
            Path5VOs.add(zz31Path5VO);
            Path5VOs.add(zz41Path5VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildPath5VOs():"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildPath5VOs() **************");
        return Path5VOs;
    }

    protected void checkPath4VOsRelationshipForCreateRelationship(Path3VO kkkPath3VO){
        log.info("************Entering the "+getThisClassName()+".checkPath4VOsRelationshipForCreateRelationship(Path3VO kkkPath3VO)***************");
        try{

            Collection<Path4VO> testkkkPath3Path4VOs = kkkPath3VO.getPath4VOs();
            log.info("testkkkPath3Path4VOs.size() = "+ testkkkPath3Path4VOs.size());
            assertEquals("testkkkPath3Path4VOs.size() expected is 4",4, testkkkPath3Path4VOs.size());
            Iterator<Path4VO> testkkkPath3Path4VOsIterator = testkkkPath3Path4VOs.iterator();

            Path4VO testzz1Path4VO = testkkkPath3Path4VOsIterator.next();
            Path4VO testzz2Path4VO = testkkkPath3Path4VOsIterator.next();
            Path4VO testzz3Path4VO = testkkkPath3Path4VOsIterator.next();
            Path4VO testzz4Path4VO = testkkkPath3Path4VOsIterator.next();

            log.info("testzz1Path4VO.getIdPath4() = "+ testzz1Path4VO.getIdPath4());
            log.info("testzz1Path4VO.getIdPath5() = "+ testzz1Path4VO.getIdPath5());
            log.info("testzz1Path4VO.getDescription() = "+ testzz1Path4VO.getDescription());
            assertNull("testzz1Path4VO.getIdPath4() is expected to be null", testzz1Path4VO.getIdPath4());
            assertEquals("testzz1Path4VO.getIdPath5() is expected to be zz11Path5","zz11Path5", testzz1Path4VO.getIdPath5());
            assertEquals("testzz1Path4VO.getDescription() is expected to be newDescription","newDescription", testzz1Path4VO.getDescription());

            Path5VO testzz11Path5VO = testzz1Path4VO.getPath5VO();
            log.info("testzz11Path5VO.getIdPath5() = "+ testzz11Path5VO.getIdPath5());
            assertEquals("testzz11Path5VO.getIdPath5() is expected to be zz11Path5","zz11Path5", testzz11Path5VO.getIdPath5());


            log.info("testzz2Path4VO.getIdPath4() = "+ testzz2Path4VO.getIdPath4());
            log.info("testzz2Path4VO.getIdPath5() = "+ testzz2Path4VO.getIdPath5());
            log.info("testzz2Path4VO.getDescription() = "+ testzz2Path4VO.getDescription());
            assertNull("testzz2Path4VO.getIdPath4() is expected to be null", testzz2Path4VO.getIdPath4());
            assertEquals("testzz2Path4VO.getIdPath5() is expected to be zz21Path5","zz21Path5", testzz2Path4VO.getIdPath5());
            assertEquals("testzz2Path4VO.getDescription() is expected to be newDescription","newDescription", testzz2Path4VO.getDescription());

            Path5VO testzz21Path5VO = testzz2Path4VO.getPath5VO();
            log.info("testzz21Path5VO.getIdPath5() = "+ testzz21Path5VO.getIdPath5());
            assertEquals("testzz21Path5VO.getIdPath5() is expected to be zz21Path5","zz21Path5", testzz21Path5VO.getIdPath5());



            log.info("testzz3Path4VO.getIdPath4() = "+ testzz3Path4VO.getIdPath4());
            log.info("testzz3Path4VO.getIdPath5() = "+ testzz3Path4VO.getIdPath5());
            log.info("testzz3Path4VO.getDescription() = "+ testzz3Path4VO.getDescription());
            assertNull("testzz3Path4VO.getIdPath4() is expected to be null", testzz3Path4VO.getIdPath4());
            assertEquals("testzz3Path4VO.getIdPath5() is expected to be zz31Path5","zz31Path5", testzz3Path4VO.getIdPath5());
            assertEquals("testzz3Path4VO.getDescription() is expected to be newDescription","newDescription", testzz3Path4VO.getDescription());

            Path5VO testzz31Path5VO = testzz3Path4VO.getPath5VO();
            log.info("testzz31Path5VO.getIdPath5() = "+ testzz31Path5VO.getIdPath5());
            assertEquals("testzz31Path5VO.getIdPath5() is expected to be zz31Path5","zz31Path5", testzz31Path5VO.getIdPath5());



            log.info("testzz4Path4VO.getIdPath4() = "+ testzz4Path4VO.getIdPath4());
            log.info("testzz4Path4VO.getIdPath5() = "+ testzz4Path4VO.getIdPath5());
            log.info("testzz4Path4VO.getDescription() = "+ testzz4Path4VO.getDescription());
            assertNull("testzz4Path4VO.getIdPath4() is expected to be null", testzz4Path4VO.getIdPath4());
            assertEquals("testzz4Path4VO.getIdPath5() is expected to be zz41Path5","zz41Path5", testzz4Path4VO.getIdPath5());
            assertEquals("testzz4Path4VO.getDescription() is expected to be newDescription","newDescription", testzz4Path4VO.getDescription());

            Path5VO testzz41Path5VO = testzz4Path4VO.getPath5VO();
            log.info("testzz41Path5VO.getIdPath5() = "+ testzz41Path5VO.getIdPath5());
            assertEquals("testzz41Path5VO.getIdPath5() is expected to be zz41Path5","zz41Path5", testzz41Path5VO.getIdPath5());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath4VOsRelationshipForCreateRelationship(Path3VO kkkPath3VO) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath4VOsRelationshipForCreateRelationship(Path3VO kkkPath3VO) **************");
    }

    @Test public void testCreateRelationshipCollectionByOrValues(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionByOrValues() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");

            Collection<Path10VO> path10VOs = buildPath10VOs();
            bd.updateCollection(path10VOs);

            Collection valuesCollection = new ArrayList();
            valuesCollection.add("zz11Path10");
            valuesCollection.add("zz21Path10");
            valuesCollection.add("zz31Path10");
            valuesCollection.add("zz41Path10");


            bd.createRelationshipCollectionByOrValues(kkkPath8VO, "path9VOs", "path10VO", "idPath10",valuesCollection, new String[]{"description"},  new Object[]{"newDescription"});

            checkPath9VOsRelationshipForCreateRelationship(kkkPath8VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionByOrValues() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionByOrValues() **************");
    }

    @Test public void testCreateRelationshipCollectionByOrValuesNoValuesArray(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesNoValuesArray() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");

            Collection<Path10VO> path10VOs = buildPath10VOs();
            bd.updateCollection(path10VOs);

            Collection valuesCollection = new ArrayList();
            valuesCollection.add("zz11Path10");
            valuesCollection.add("zz21Path10");
            valuesCollection.add("zz31Path10");
            valuesCollection.add("zz41Path10");

            bd.createRelationshipCollectionByOrValues(kkkPath8VO, "path9VOs", "path10VO" ,"idPath10", valuesCollection,null,null);

            checkPath9VOsRelationshipForCreateRelationshipNoDescr(kkkPath8VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesNoValuesArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesNoValuesArray() **************");
    }

    @Test public void testCreateRelationshipCollectionByOrValuesNoValuesCollection(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesNoValuesCollection() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");

            bd.createRelationshipCollectionByOrValues(kkkPath8VO, "path9VOs", "path10VO","idPath10",null, new String[]{"description"},  new Object[]{"newDescription"});
            Collection<Path9VO> testkkkPath8Path9VOs = kkkPath8VO.getPath9VOs();
            assertNull("testkkkPath8Path9VOs expected is null ", testkkkPath8Path9VOs);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesNoValuesCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesNoValuesCollection() **************");
    }

    @Test public void testCreateRelationshipCollectionByOrValuesM2N(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesM2N() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = new Path3VO();
            kkkPath3VO.setIdPath3("kkkPath3");

            Collection<Path5VO> path5VOs = buildPath5VOs();
            bd.updateCollection(path5VOs);

            Collection valuesCollection = new ArrayList();
            valuesCollection.add("zz11Path5");
            valuesCollection.add("zz21Path5");
            valuesCollection.add("zz31Path5");
            valuesCollection.add("zz41Path5");

            bd.createRelationshipCollectionByOrValues(kkkPath3VO, "path4VOs", "path5VO","idPath5", valuesCollection, new String[]{"description"},  new Object[]{"newDescription"});

            checkPath4VOsRelationshipForCreateRelationship(kkkPath3VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesM2N() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesM2N() **************");
    }


    //createRelationshipCollectionBySearchValueInFields

    @Test public void testCreateRelationshipCollectionBySearchValueInFields(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFields() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");

            Collection<Path10VO> path10VOs = buildPath10VOs();
            bd.updateCollection(path10VOs);

            Collection valuesCollection = new ArrayList();
            valuesCollection.add("zz11Path10");
            valuesCollection.add("zz21Path10");
            valuesCollection.add("zz31Path10");
            valuesCollection.add("zz41Path10");


            bd.createRelationshipCollectionBySearchValueInFields(kkkPath8VO, "path9VOs", "path10VO", new String[]{"idPath10"},"zz", new String[]{"description"},  new Object[]{"newDescription"});

            checkPath9VOsRelationshipForCreateRelationship(kkkPath8VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFields() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFields() **************");
    }

    @Test public void testCreateRelationshipCollectionBySearchValueInFieldsNoValuesArray(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionByOrValuesNoValuesArray() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");

            Collection<Path10VO> path10VOs = buildPath10VOs();
            bd.updateCollection(path10VOs);

            Collection valuesCollection = new ArrayList();
            valuesCollection.add("zz11Path10");
            valuesCollection.add("zz21Path10");
            valuesCollection.add("zz31Path10");
            valuesCollection.add("zz41Path10");

            bd.createRelationshipCollectionBySearchValueInFields(kkkPath8VO, "path9VOs", "path10VO", new String[]{"idPath10"},"zz",null,null);

            checkPath9VOsRelationshipForCreateRelationshipNoDescr(kkkPath8VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFieldsNoValuesArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFieldsNoValuesArray() **************");
    }

    @Test public void testCreateRelationshipCollectionBySearchValueInFieldsNoToSearch(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFieldsNoToSearch() ***************");
        try{
            BD bd = getBD();

            Path8VO kkkPath8VO = new Path8VO();
            kkkPath8VO.setIdPath8("kkkPath8");

            bd.createRelationshipCollectionBySearchValueInFields(kkkPath8VO, "path9VOs", "path10VO",null,"zz", new String[]{"description"},  new Object[]{"newDescription"});
            Collection<Path9VO> testkkkPath8Path9VOs = kkkPath8VO.getPath9VOs();
            assertNull("testkkkPath8Path9VOs expected is null ", testkkkPath8Path9VOs);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFieldsNoToSearch() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFieldsNoToSearch() **************");
    }



    @Test public void testCreateRelationshipCollectionBySearchValueInFieldsM2N(){
        log.info("************Entering the "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFieldsM2N() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = new Path3VO();
            kkkPath3VO.setIdPath3("kkkPath3");

            Collection<Path5VO> path5VOs = buildPath5VOs();
            bd.updateCollection(path5VOs);

            Collection valuesCollection = new ArrayList();
            valuesCollection.add("zz11Path5");
            valuesCollection.add("zz21Path5");
            valuesCollection.add("zz31Path5");
            valuesCollection.add("zz41Path5");

            bd.createRelationshipCollectionBySearchValueInFields(kkkPath3VO, "path4VOs", "path5VO",new String[]{"idPath5"}, "zz", new String[]{"description"},  new Object[]{"newDescription"});

            checkPath4VOsRelationshipForCreateRelationship(kkkPath3VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFieldsM2N() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateRelationshipCollectionBySearchValueInFieldsM2N() **************");
    }



    protected Path4VO buildkkkPath4VO(){
        log.info("************Entering the "+getThisClassName()+".buildkkkPath4VO() ***************");
        Path4VO  kkkPath4VO = null ;
        try{
            kkkPath4VO = new Path4VO();
            kkkPath4VO.setIdPath4("kkkPath4");

            Path5VO kkk1Path5VO = new Path5VO();
            kkk1Path5VO.setIdPath5("kkk1Path5");
            kkkPath4VO.setPath5VO(kkk1Path5VO);

            Path6VO kkk11Path6VO = new Path6VO();
            kkk11Path6VO.setIdPath6("kkk11Path6");
            kkk1Path5VO.setPath6VO(kkk11Path6VO);

            Collection<Path7VO> kkk11Path6Path7VOs  = new ArrayList<Path7VO>();

            Path7VO kkk111Path7VO = new Path7VO();
            kkk111Path7VO.setIdPath7("kkk111Path7");
            kkk111Path7VO.setIdPath6("kkk11Path6");
            kkk111Path7VO.setDescription("oldDescription");

            Path7VO kkk112Path7VO = new Path7VO();
            kkk112Path7VO.setIdPath7("kkk112Path7");
            kkk112Path7VO.setIdPath6("kkk11Path6");
            kkk112Path7VO.setDescription("oldDescription");

            Path7VO kkk113Path7VO = new Path7VO();
            kkk113Path7VO.setIdPath7("kkk113Path7");
            kkk113Path7VO.setIdPath6("kkk11Path6");
            kkk113Path7VO.setDescription("oldDescription");

            Path7VO kkk114Path7VO = new Path7VO();
            kkk114Path7VO.setIdPath7("kkk114Path7");
            kkk114Path7VO.setIdPath6("kkk11Path6");
            kkk114Path7VO.setDescription("oldDescription");

            kkk11Path6Path7VOs.add(kkk111Path7VO);
            kkk11Path6Path7VOs.add(kkk112Path7VO);
            kkk11Path6Path7VOs.add(kkk113Path7VO);
            kkk11Path6Path7VOs.add(kkk114Path7VO);


            kkk11Path6VO.setPath7VOs(kkk11Path6Path7VOs);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildkkkPath4VO() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildkkkPath4VO() **************");
        return kkkPath4VO;
    }

    protected void checkPath7VOsAdded(Path4VO kkkPath4VO){
        log.info("************Entering the "+getThisClassName()+".checkPath7VOsAdded(Path4VO kkkPath4VO)**************");
        try{

            Collection<Path7VO> testpath7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();
            log.info("testpath7VOs.size() = "+ testpath7VOs.size());
            assertEquals("testpath7VOs.size() expected is 5",5, testpath7VOs.size());
            Iterator<Path7VO> testpath7VOsIterator = testpath7VOs.iterator();

            Path7VO testkkk111Path7VO = testpath7VOsIterator.next();
            Path7VO testkkk112Path7VO = testpath7VOsIterator.next();
            Path7VO testkkk113Path7VO = testpath7VOsIterator.next();
            Path7VO testkkk114Path7VO = testpath7VOsIterator.next();
            Path7VO testkkk115Path7VO = testpath7VOsIterator.next();

            log.info("testkkk111Path7VO.getIdPath7() = "+ testkkk111Path7VO.getIdPath7());
            log.info("testkkk111Path7VO.getIdPath6() = "+ testkkk111Path7VO.getIdPath6());
            log.info("testkkk111Path7VO.getDescription() = "+ testkkk111Path7VO.getDescription());
            assertEquals("testkkk111Path7VO.getIdPath7() is expected to be kkk111Path7","kkk111Path7", testkkk111Path7VO.getIdPath7());
            assertEquals("testkkk111Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk111Path7VO.getIdPath6());
            assertEquals("testkkk111Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk111Path7VO.getDescription());

            log.info("testkkk112Path7VO.getIdPath7() = "+ testkkk112Path7VO.getIdPath7());
            log.info("testkkk112Path7VO.getIdPath6() = "+ testkkk112Path7VO.getIdPath6());
            log.info("testkkk112Path7VO.getDescription() = "+ testkkk112Path7VO.getDescription());
            assertEquals("testkkk112Path7VO.getIdPath7() is expected to be kkk112Path7","kkk112Path7", testkkk112Path7VO.getIdPath7());
            assertEquals("testkkk112Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk112Path7VO.getIdPath6());
            assertEquals("testkkk112Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk112Path7VO.getDescription());

            log.info("testkkk113Path7VO.getIdPath7() = "+ testkkk113Path7VO.getIdPath7());
            log.info("testkkk113Path7VO.getIdPath6() = "+ testkkk113Path7VO.getIdPath6());
            log.info("testkkk113Path7VO.getDescription() = "+ testkkk113Path7VO.getDescription());
            assertEquals("testkkk113Path7VO.getIdPath7() is expected to be kkk113Path7","kkk113Path7", testkkk113Path7VO.getIdPath7());
            assertEquals("testkkk113Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk113Path7VO.getIdPath6());
            assertEquals("testkkk113Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk113Path7VO.getDescription());

            log.info("testkkk114Path7VO.getIdPath7() = "+ testkkk114Path7VO.getIdPath7());
            log.info("testkkk114Path7VO.getIdPath6() = "+ testkkk114Path7VO.getIdPath6());
            log.info("testkkk114Path7VO.getDescription() = "+ testkkk114Path7VO.getDescription());
            assertEquals("testkkk114Path7VO.getIdPath7() is expected to be kkk114Path7","kkk114Path7", testkkk114Path7VO.getIdPath7());
            assertEquals("testkkk114Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk114Path7VO.getIdPath6());
            assertEquals("testkkk114Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk114Path7VO.getDescription());

            log.info("testkkk115Path7VO.getIdPath7() = "+ testkkk115Path7VO.getIdPath7());
            log.info("testkkk115Path7VO.getIdPath6() = "+ testkkk115Path7VO.getIdPath6());
            log.info("testkkk115Path7VO.getDescription() = "+ testkkk115Path7VO.getDescription());
            assertEquals("testkkk115Path7VO.getIdPath7() is expected to be kkk115Path7","kkk115Path7", testkkk115Path7VO.getIdPath7());
            assertEquals("testkkk115Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk115Path7VO.getIdPath6());
            assertEquals("testkkk115Path7VO.getDescription() is expected to be newDescription","newDescription", testkkk115Path7VO.getDescription());



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath7VOsAdded(Path4VO kkkPath4VO) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath7VOsAdded(Path4VO kkkPath4VO) **************");
    }

    protected void checkPath7VOsNoAdded(Path4VO kkkPath4VO){
        log.info("************Entering the "+getThisClassName()+".checkPath7VOsNoAdded(Path4VO kkkPath4VO)**************");
        try{

            Collection<Path7VO> testpath7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();
            log.info("testpath7VOs.size() = "+ testpath7VOs.size());
            assertEquals("testpath7VOs.size() expected is 4",4, testpath7VOs.size());
            Iterator<Path7VO> testpath7VOsIterator = testpath7VOs.iterator();

            Path7VO testkkk111Path7VO = testpath7VOsIterator.next();
            Path7VO testkkk112Path7VO = testpath7VOsIterator.next();
            Path7VO testkkk113Path7VO = testpath7VOsIterator.next();
            Path7VO testkkk114Path7VO = testpath7VOsIterator.next();

            log.info("testkkk111Path7VO.getIdPath7() = "+ testkkk111Path7VO.getIdPath7());
            log.info("testkkk111Path7VO.getIdPath6() = "+ testkkk111Path7VO.getIdPath6());
            log.info("testkkk111Path7VO.getDescription() = "+ testkkk111Path7VO.getDescription());
            assertEquals("testkkk111Path7VO.getIdPath7() is expected to be kkk111Path7","kkk111Path7", testkkk111Path7VO.getIdPath7());
            assertEquals("testkkk111Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk111Path7VO.getIdPath6());
            assertEquals("testkkk111Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk111Path7VO.getDescription());

            log.info("testkkk112Path7VO.getIdPath7() = "+ testkkk112Path7VO.getIdPath7());
            log.info("testkkk112Path7VO.getIdPath6() = "+ testkkk112Path7VO.getIdPath6());
            log.info("testkkk112Path7VO.getDescription() = "+ testkkk112Path7VO.getDescription());
            assertEquals("testkkk112Path7VO.getIdPath7() is expected to be kkk112Path7","kkk112Path7", testkkk112Path7VO.getIdPath7());
            assertEquals("testkkk112Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk112Path7VO.getIdPath6());
            assertEquals("testkkk112Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk112Path7VO.getDescription());

            log.info("testkkk113Path7VO.getIdPath7() = "+ testkkk113Path7VO.getIdPath7());
            log.info("testkkk113Path7VO.getIdPath6() = "+ testkkk113Path7VO.getIdPath6());
            log.info("testkkk113Path7VO.getDescription() = "+ testkkk113Path7VO.getDescription());
            assertEquals("testkkk113Path7VO.getIdPath7() is expected to be kkk113Path7","kkk113Path7", testkkk113Path7VO.getIdPath7());
            assertEquals("testkkk113Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk113Path7VO.getIdPath6());
            assertEquals("testkkk113Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk113Path7VO.getDescription());

            log.info("testkkk114Path7VO.getIdPath7() = "+ testkkk114Path7VO.getIdPath7());
            log.info("testkkk114Path7VO.getIdPath6() = "+ testkkk114Path7VO.getIdPath6());
            log.info("testkkk114Path7VO.getDescription() = "+ testkkk114Path7VO.getDescription());
            assertEquals("testkkk114Path7VO.getIdPath7() is expected to be kkk114Path7","kkk114Path7", testkkk114Path7VO.getIdPath7());
            assertEquals("testkkk114Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk114Path7VO.getIdPath6());
            assertEquals("testkkk114Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk114Path7VO.getDescription());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath7VOsNoAdded(Path4VO kkkPath4VO) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath7VOsNoAdded(Path4VO kkkPath4VO) **************");
    }

    private void checkPath4VOsAdded(Path3VO kkkPath3VO){
        log.info("************Entering the "+getThisClassName()+".checkPath4VOsAdded(Path3VO kkkPath3VO)**************");
        try{

            Collection<Path4VO> testpath4VOs = kkkPath3VO.getPath4VOs();
            log.info("testpath4VOs.size() = "+ testpath4VOs.size());
            assertEquals("testpath4VOs.size() expected is 3",3, testpath4VOs.size());
            Iterator<Path4VO> testpath4VOsIterator = testpath4VOs.iterator();

            Path4VO kkk1Path4VO = testpath4VOsIterator.next();
            Path4VO kkk2Path4VO = testpath4VOsIterator.next();
            Path4VO kkk3Path4VO = testpath4VOsIterator.next();


            log.info("kkk1Path4VO.getIdPath4() = "+ kkk1Path4VO.getIdPath4());
            log.info("kkk1Path4VO.getDescription() = "+ kkk1Path4VO.getDescription());
            assertEquals("kkk1Path4VO.getIdPath4() is expected to be kkk1Path4","kkk1Path4", kkk1Path4VO.getIdPath4());
            assertEquals("kkk1Path4VO.getDescription() is expected to be oldDescription","oldDescription", kkk1Path4VO.getDescription());

            log.info("kkk2Path4VO.getIdPath4() = "+ kkk2Path4VO.getIdPath4());
            log.info("kkk2Path4VO.getDescription() = "+ kkk2Path4VO.getDescription());
            assertEquals("kkk2Path4VO.getIdPath4() is expected to be kkk2Path4","kkk2Path4", kkk2Path4VO.getIdPath4());
            assertEquals("kkk2Path4VO.getDescription() is expected to be oldDescription","oldDescription", kkk2Path4VO.getDescription());

            log.info("kkk3Path4VO.getIdPath4() = "+ kkk3Path4VO.getIdPath4());
            log.info("kkk3Path4VO.getDescription() = "+ kkk3Path4VO.getDescription());
            assertEquals("kkk3Path4VO.getIdPath4() is expected to be kkk3Path4","kkk3Path4", kkk3Path4VO.getIdPath4());
            assertEquals("kkk3Path4VO.getDescription() is expected to be newDescription","newDescription", kkk3Path4VO.getDescription());



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath4VOsAdded(Path3VO kkkPath3VO) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath4VOsAdded(Path3VO kkkPath3VO)************");
    }


    @Test public void testAddToCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddToCollection() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Path7VO kkk115Path7VO = new Path7VO();
            kkk115Path7VO.setIdPath7("kkk115Path7");
            kkk115Path7VO.setDescription("newDescription");



            boolean added = bd.addToCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",kkk115Path7VO);
            assertTrue("added is expected to be true",added);
            checkPath7VOsAdded(kkkPath4VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToCollection() **************");
    }

    @Test public void testAddToCollectionNoAdded(){
        log.info("************Entering the "+getThisClassName()+".testAddToCollectionNoAdded() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Path7VO kkk113Path7VO = new Path7VO();
            kkk113Path7VO.setIdPath7("kkk113Path7");
            kkk113Path7VO.setDescription("newDescription");

            boolean added = bd.addToCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",kkk113Path7VO);
            assertTrue("added is expected to be false",!added);
            checkPath7VOsNoAdded(kkkPath4VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToCollectionNoAdded() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToCollectionNoAdded() **************");
    }

    @Test public void testAddToCollectioNulValueObjectsOnPath(){
        log.info("************Entering the "+getThisClassName()+".testAddToCollectioNulValueObjectsOnPath() ***************");
        try{
            BD bd = getBD();

            Path4VO hyzPath4VO = new Path4VO();
            hyzPath4VO.setIdPath4("hyzPath4");
            hyzPath4VO.setIdPath5("hyz1Path5");


            Path7VO kkk113Path7VO = new Path7VO();
            kkk113Path7VO.setIdPath7("kkk113Path7");
            kkk113Path7VO.setDescription("newDescription");

            boolean added = bd.addToCollection(hyzPath4VO, "path5VO.path6VO.path7VOs",kkk113Path7VO);
            assertTrue("added is expected to be false",!added);

            assertNull("hyzPath4VO.getPath5VO() is expected to be null",hyzPath4VO.getPath5VO());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToCollectioNulValueObjectsOnPath() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToCollectioNulValueObjectsOnPath() **************");
    }

    @Test public void testAddToCollectionM2N(){
        log.info("************Entering the "+getThisClassName()+".testAddToCollectionM2N() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = buildkkkPath3VO();

            Path4VO kkk3Path4VO = new Path4VO();
            kkk3Path4VO.setIdPath4("kkk3Path4");
            kkk3Path4VO.setDescription("newDescription");


            boolean added = bd.addToCollection(kkkPath3VO, "path4VOs",kkk3Path4VO);
            assertTrue("added is expected to be true",added);
            checkPath4VOsAdded(kkkPath3VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToCollectionM2N() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToCollectionM2N() **************");
    }




    protected Collection<DirectorClerkVO> buildValueObjectsCollectionOfDirectorClerkVO(){
        log.info("************Entering the "+getThisClassName()+".buildValueObjectsCollectionOfDirectorClerkVO()**************");
        Collection<DirectorClerkVO> valueObjectsCollection = new ArrayList<DirectorClerkVO>();
        try{

            DirectorClerkVO x1111DirectorClerkVO = new DirectorClerkVO();
            x1111DirectorClerkVO.setIdDirector("x");
            x1111DirectorClerkVO.setIdSalesManager("1");
            x1111DirectorClerkVO.setIdSalesDivision("1");
            x1111DirectorClerkVO.setIdSalesAssistant("1");
            x1111DirectorClerkVO.setIdClerk("1");
            x1111DirectorClerkVO.setDirectorClerkDescription1("clerkDescription1 x1111");
            x1111DirectorClerkVO.setDirectorClerkDescription2("clerkDescription2 x1111");
            x1111DirectorClerkVO.setNote1("note1 x1111");
            x1111DirectorClerkVO.setNote2("note2 x1111");

            DirectorClerkVO x1112DirectorClerkVO = new DirectorClerkVO();
            x1112DirectorClerkVO.setIdDirector("x");
            x1112DirectorClerkVO.setIdSalesManager("1");
            x1112DirectorClerkVO.setIdSalesDivision("1");
            x1112DirectorClerkVO.setIdSalesAssistant("1");
            x1112DirectorClerkVO.setIdClerk("2");
            x1112DirectorClerkVO.setDirectorClerkDescription1("clerkDescription1 x1112");
            x1112DirectorClerkVO.setDirectorClerkDescription2("clerkDescription2 x1112");
            x1112DirectorClerkVO.setNote1("note1 x1112");
            x1112DirectorClerkVO.setNote2("note2 x1112");


            valueObjectsCollection = new ArrayList<DirectorClerkVO>();
            valueObjectsCollection.add(x1111DirectorClerkVO);
            valueObjectsCollection.add(x1112DirectorClerkVO);



        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildValueObjectsCollectionOfDirectorClerkVO() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildValueObjectsCollectionOfDirectorClerkVO()************");
        return valueObjectsCollection;
    }

    protected Collection<DirectorClerkVO> buildValueObjectsCollectionToAddOfDirectorClerkVO(Collection<DirectorClerkVO> valueObjectsCollection){
        log.info("************Entering the "+getThisClassName()+".buildValueObjectsCollectionOfDirectorClerkVO(Collection<DirectorClerkVO> valueObjectsCollection )**************");
        Collection<DirectorClerkVO> valueObjectsCollectionToAdd = new ArrayList<DirectorClerkVO>();
        try{
            valueObjectsCollectionToAdd.addAll(valueObjectsCollection);

            DirectorClerkVO x1113DirectorClerkVO = new DirectorClerkVO();
            x1113DirectorClerkVO.setIdDirector("x");
            x1113DirectorClerkVO.setIdSalesManager("1");
            x1113DirectorClerkVO.setIdSalesDivision("1");
            x1113DirectorClerkVO.setIdSalesAssistant("1");
            x1113DirectorClerkVO.setIdClerk("3");
            x1113DirectorClerkVO.setDirectorClerkDescription1("clerkDescription1 x1113");
            x1113DirectorClerkVO.setDirectorClerkDescription2("clerkDescription2 x1113");
            x1113DirectorClerkVO.setNote1("note1 x1113");
            x1113DirectorClerkVO.setNote2("note2 x1113");

            valueObjectsCollectionToAdd.add(x1113DirectorClerkVO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildValueObjectsCollectionToAddOfDirectorClerkVO(Collection<DirectorClerkVO> valueObjectsCollection ) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildValueObjectsCollectionToAddOfDirectorClerkVO(Collection<DirectorClerkVO> valueObjectsCollection )************");
        return valueObjectsCollectionToAdd;
    }

    protected Collection<ClerkVO> buildValueObjectsCollectionToAddOfClerkVO(){
        log.info("************Entering the "+getThisClassName()+".buildValueObjectsCollectionToAddOfClerkVO()**************");
        Collection<ClerkVO> valueObjectsCollectionToAdd = new ArrayList<ClerkVO>();
        try{


            ClerkVO x1112ClerkVO = new ClerkVO();

            x1112ClerkVO.setIdSalesAssistant("1");
            x1112ClerkVO.setIdClerk("2");
            x1112ClerkVO.setClerkDescription1("clerkDescription1 x1112");
            x1112ClerkVO.setClerkDescription2("clerkDescription2 x1112");

            ClerkVO x1113ClerkVO = new ClerkVO();
            x1113ClerkVO.setIdSalesAssistant("1");
            x1113ClerkVO.setIdClerk("3");
            x1113ClerkVO.setClerkDescription1("clerkDescription1 x1113");
            x1113ClerkVO.setClerkDescription2("clerkDescription2 x1113");

            valueObjectsCollectionToAdd.add(x1112ClerkVO);
            valueObjectsCollectionToAdd.add(x1113ClerkVO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildValueObjectsCollectionToAddOfClerkVO() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildValueObjectsCollectionToAddOfClerkVO()************");
        return valueObjectsCollectionToAdd;
    }

    protected void checkValueObjectsCollectionOfDirectorClerkVO(Collection valueObjectsCollection, boolean checknote, boolean added ){
        log.info("************Entering the "+getThisClassName()+".checkValueObjectsCollectionOfDirectorClerkVO(Collection valueObjectsCollection, boolean checknote )**************");
        try{
            log.info("valueObjectsCollection.size() = "+ valueObjectsCollection.size());
            if(added)assertEquals("valueObjectsCollection.size() expected is 3",3, valueObjectsCollection.size());
            if(!added)assertEquals("valueObjectsCollection.size() expected is 2",2, valueObjectsCollection.size());
            Iterator valueObjectsCollectionIterator = valueObjectsCollection.iterator();

            DirectorClerkVO testx1111DirectorClerkVO = (DirectorClerkVO) valueObjectsCollectionIterator.next();
            DirectorClerkVO testx1112DirectorClerkVO = (DirectorClerkVO) valueObjectsCollectionIterator.next();


            log.info("testx1111DirectorClerkVO.getIdDirector() = "+ testx1111DirectorClerkVO.getIdDirector());
            log.info("testx1111DirectorClerkVO.getIdSalesManager() = "+ testx1111DirectorClerkVO.getIdSalesManager());
            log.info("testx1111DirectorClerkVO.getIdSalesDivision() = "+ testx1111DirectorClerkVO.getIdSalesDivision());
            log.info("testx1111DirectorClerkVO.getIdSalesAssistant() = "+ testx1111DirectorClerkVO.getIdSalesAssistant());
            log.info("testx1111DirectorClerkVO.getIdClerk() = "+ testx1111DirectorClerkVO.getIdClerk());
            log.info("testx1111DirectorClerkVO.getDirectorClerkDescription1() = "+ testx1111DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testx1111DirectorClerkVO.getDirectorClerkDescription12() = "+ testx1111DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testx1111DirectorClerkVO.getNote1() = "+ testx1111DirectorClerkVO.getNote1());
            assertEquals("testx1111DirectorClerkVO.getIdDirector() is expected to be x","x", testx1111DirectorClerkVO.getIdDirector());
            assertEquals("testx1111DirectorClerkVO.getIdSalesManager() is expected to be 1","1", testx1111DirectorClerkVO.getIdSalesManager());
            assertEquals("testx1111DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testx1111DirectorClerkVO.getIdSalesDivision());
            assertEquals("testx1111DirectorClerkVO.getIdSalesAssistant() is expected to be 1","1", testx1111DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testx1111DirectorClerkVO.getIdClerk() is expected to be 1","1", testx1111DirectorClerkVO.getIdClerk());
            assertEquals("testx1111DirectorClerkVO.getDirectorClerkDescription1() is expected to be clerkDescription1 x1111","clerkDescription1 x1111", testx1111DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testx1111DirectorClerkVO.getDirectorClerkDescription2() is expected to be clerkDescription1 x1111","clerkDescription2 x1111", testx1111DirectorClerkVO.getDirectorClerkDescription2());
            if(checknote)assertEquals("testx1111DirectorClerkVO.getNote1() is expected to be  note1 x1111","note1 x1111", testx1111DirectorClerkVO.getNote1());

            log.info("testx1112DirectorClerkVO.getIdDirector() = "+ testx1112DirectorClerkVO.getIdDirector());
            log.info("testx1112DirectorClerkVO.getIdSalesManager() = "+ testx1112DirectorClerkVO.getIdSalesManager());
            log.info("testx1112DirectorClerkVO.getIdSalesDivision() = "+ testx1112DirectorClerkVO.getIdSalesDivision());
            log.info("testx1112DirectorClerkVO.getIdSalesAssistant() = "+ testx1112DirectorClerkVO.getIdSalesAssistant());
            log.info("testx1112DirectorClerkVO.getIdClerk() = "+ testx1112DirectorClerkVO.getIdClerk());
            log.info("testx1112DirectorClerkVO.getDirectorClerkDescription1() = "+ testx1112DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testx1112DirectorClerkVO.getDirectorClerkDescription12() = "+ testx1112DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testx1112DirectorClerkVO.getNote1() = "+ testx1112DirectorClerkVO.getNote1());
            assertEquals("testx1112DirectorClerkVO.getIdDirector() is expected to be x","x", testx1112DirectorClerkVO.getIdDirector());
            assertEquals("testx1112DirectorClerkVO.getIdSalesManager() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesManager());
            assertEquals("testx1112DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesDivision());
            assertEquals("testx1112DirectorClerkVO.getIdSalesAssistant() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testx1112DirectorClerkVO.getIdClerk() is expected to be 2","2", testx1112DirectorClerkVO.getIdClerk());
            assertEquals("testx1112DirectorClerkVO.getDirectorClerkDescription1() is expected to be clerkDescription1 x1112","clerkDescription1 x1112", testx1112DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testx1112DirectorClerkVO.getDirectorClerkDescription2() is expected to be clerkDescription1 x1112","clerkDescription2 x1112", testx1112DirectorClerkVO.getDirectorClerkDescription2());
            if(checknote)assertEquals("testx1112DirectorClerkVO.getNote1() is expected to be note1 x1112","note1 x1112", testx1112DirectorClerkVO.getNote1());

            if(added) {
                DirectorClerkVO testx1113DirectorClerkVO = (DirectorClerkVO) valueObjectsCollectionIterator.next();
                log.info("testx1113DirectorClerkVO.getIdDirector() = "+ testx1113DirectorClerkVO.getIdDirector());
                log.info("testx1113DirectorClerkVO.getIdSalesManager() = "+ testx1113DirectorClerkVO.getIdSalesManager());
                log.info("testx1113DirectorClerkVO.getIdSalesDivision() = "+ testx1113DirectorClerkVO.getIdSalesDivision());
                log.info("testx1113DirectorClerkVO.getIdSalesAssistant() = "+ testx1113DirectorClerkVO.getIdSalesAssistant());
                log.info("testx1113DirectorClerkVO.getIdClerk() = "+ testx1113DirectorClerkVO.getIdClerk());
                log.info("testx1113DirectorClerkVO.getDirectorClerkDescription1() = "+ testx1113DirectorClerkVO.getDirectorClerkDescription1());
                log.info("testx1113DirectorClerkVO.getDirectorClerkDescription2() = "+ testx1113DirectorClerkVO.getDirectorClerkDescription2());
                log.info("testx1113DirectorClerkVO.getNote1() = "+ testx1113DirectorClerkVO.getNote1());
                assertEquals("testx1113DirectorClerkVO.getIdDirector() is expected to be x","x", testx1113DirectorClerkVO.getIdDirector());
                assertEquals("testx1113DirectorClerkVO.getIdSalesManager() is expected to be 1","1", testx1113DirectorClerkVO.getIdSalesManager());
                assertEquals("testx1113DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testx1113DirectorClerkVO.getIdSalesDivision());
                assertEquals("testx1113DirectorClerkVO.getIdSalesAssistant() is expected to be 1","1", testx1113DirectorClerkVO.getIdSalesAssistant());
                assertEquals("testx1113DirectorClerkVO.getIdClerk() is expected to be 3","3", testx1113DirectorClerkVO.getIdClerk());
                assertNull("testx1113DirectorClerkVO.getDirectorClerkDescription1() is expected to be null",testx1113DirectorClerkVO.getDirectorClerkDescription1());
                assertEquals("testx1113DirectorClerkVO.getDirectorClerkDescription2() is expected to be clerkDescription1 x1113","clerkDescription1 x1113", testx1113DirectorClerkVO.getDirectorClerkDescription2());
                if(checknote)assertEquals("testx1113DirectorClerkVO.getNote1() is expected to be added note1","added note1", testx1113DirectorClerkVO.getNote1());
                 //////////////////NOTE  clerkDescription1 x1113 is not an errroorr, but  DirectorClerkDescription2 is target of  DirectorClerkDescription1
            }


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkValueObjectsCollectionOfDirectorClerkVO(Collection valueObjectsCollection, boolean checknote ) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkValueObjectsCollectionOfDirectorClerkVO(Collection valueObjectsCollection, boolean checknote )************");

    }


    @Test public void testAddAllToCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollection() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            Collection<ClerkVO> valueObjectsCollectionToAdd = buildValueObjectsCollectionToAddOfClerkVO();

            String[] sourcePAttributeNames = new String[] {"idSalesAssistant","idClerk","clerkDescription1"};
            String[] targetPAttributeNames = new String[] {"idSalesAssistant","idClerk","directorClerkDescription2"};
            String[] pAttributeNames = new String[] {"idDirector","idSalesManager","idSalesDivision","note1"};
            Object[]  valuesArray =  new Object[] {"x","1","1","added note1"};
            boolean added = bd.addAllToCollection(DirectorClerkVO.class,valueObjectsCollection, valueObjectsCollectionToAdd,sourcePAttributeNames,targetPAttributeNames,pAttributeNames,valuesArray);
            assertTrue("added is expected to be true",added);

            checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,true,true);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollection() **************");
    }


    @Test public void testAddAllToCollectionSameClass(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectionSameClass() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            Collection<DirectorClerkVO> valueObjectsCollectionToAdd = buildValueObjectsCollectionToAddOfDirectorClerkVO(valueObjectsCollection);

            String[] sourcePAttributeNames = new String[] {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk","directorClerkDescription1"};
            String[] targetPAttributeNames = new String[] {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk","directorClerkDescription2"};
            String[] pAttributeNames = new String[] {"note1"};
            Object[]  valuesArray =  new Object[] {"added note1"};
            boolean added = bd.addAllToCollection(DirectorClerkVO.class,valueObjectsCollection, valueObjectsCollectionToAdd,sourcePAttributeNames,targetPAttributeNames,pAttributeNames,valuesArray);
            assertTrue("added is expected to be true",added);

            checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,true,true);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectionSameClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectionSameClass() **************");
    }

    @Test public void testAddAllToCollectionSameClassNoValuesArray(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectionSameClassNoValuesArray() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            Collection<DirectorClerkVO> valueObjectsCollectionToAdd = buildValueObjectsCollectionToAddOfDirectorClerkVO(valueObjectsCollection);

            String[] sourcePAttributeNames = new String[] {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk","directorClerkDescription1"};
            String[] targetPAttributeNames = new String[] {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk","directorClerkDescription2"};

            boolean added = bd.addAllToCollection(DirectorClerkVO.class,valueObjectsCollection, valueObjectsCollectionToAdd,sourcePAttributeNames,targetPAttributeNames);
            assertTrue("added is expected to be true",added);

            checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false,true);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectionSameClassNoValuesArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectionSameClassNoValuesArray() **************");
    }


    @Test public void testAddAllToCollectionNoTargetRealClassWithPAttributeNames(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithPAttributeNames() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();


            Collection<DirectorClerkVO> valueObjectsCollectionToAdd = new ArrayList<DirectorClerkVO>();

            valueObjectsCollectionToAdd.addAll(valueObjectsCollection);

            DirectorClerkVO x1113DirectorClerkVO = new DirectorClerkVO();
            x1113DirectorClerkVO.setIdDirector("x");
            x1113DirectorClerkVO.setIdSalesManager("1");
            x1113DirectorClerkVO.setIdSalesDivision("1");
            x1113DirectorClerkVO.setIdSalesAssistant("1");
            x1113DirectorClerkVO.setIdClerk("3");
            //x1113DirectorClerkVO.setDirectorClerkDescription1("clerkDescription1 x1113");
            x1113DirectorClerkVO.setDirectorClerkDescription2("clerkDescription1 x1113"); // not an error . is  to reuse checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false);


            valueObjectsCollectionToAdd.add(x1113DirectorClerkVO);

            String[] pAttributeNames = new String[] {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};


            boolean added = bd.addAllToCollection(valueObjectsCollection, valueObjectsCollectionToAdd,pAttributeNames);
            assertTrue("added is expected to be true",added);

            checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false,true);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithPAttributeNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithPAttributeNames() **************");
    }

    @Test public void testAddAllToCollectionNoTargetRealClassWithRealClass(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithRealClass() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();


            Collection<DirectorClerkVO> valueObjectsCollectionToAdd = new ArrayList<DirectorClerkVO>();

            valueObjectsCollectionToAdd.addAll(valueObjectsCollection);

            DirectorClerkVO x1113DirectorClerkVO = new DirectorClerkVO();
            x1113DirectorClerkVO.setIdDirector("x");
            x1113DirectorClerkVO.setIdSalesManager("1");
            x1113DirectorClerkVO.setIdSalesDivision("1");
            x1113DirectorClerkVO.setIdSalesAssistant("1");
            x1113DirectorClerkVO.setIdClerk("3");
            //x1113DirectorClerkVO.setDirectorClerkDescription1("clerkDescription1 x1113");
            x1113DirectorClerkVO.setDirectorClerkDescription2("clerkDescription1 x1113"); // not an error . is  to reuse checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false);

            valueObjectsCollectionToAdd.add(x1113DirectorClerkVO);

            boolean added = bd.addAllToCollection(valueObjectsCollection, valueObjectsCollectionToAdd, DirectorClerkVO.class);
            assertTrue("added is expected to be true",added);

            checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false,true);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithRealClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithRealClass() **************");
    }


    @Test public void testAddAllToCollectionNoTargetRealClassWithMap(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithMap() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();


            Collection<DirectorClerkVO> valueObjectsCollectionToAdd = new ArrayList<DirectorClerkVO>();

            valueObjectsCollectionToAdd.addAll(valueObjectsCollection);

            DirectorClerkVO x1113DirectorClerkVO = new DirectorClerkVO();
            x1113DirectorClerkVO.setIdDirector("x");
            x1113DirectorClerkVO.setIdSalesManager("1");
            x1113DirectorClerkVO.setIdSalesDivision("1");
            x1113DirectorClerkVO.setIdSalesAssistant("1");
            x1113DirectorClerkVO.setIdClerk("3");
            //x1113DirectorClerkVO.setDirectorClerkDescription1("clerkDescription1 x1113");
            x1113DirectorClerkVO.setDirectorClerkDescription2("clerkDescription1 x1113"); // not an error . is  to reuse checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false);

            valueObjectsCollectionToAdd.add(x1113DirectorClerkVO);

            Map map = new HashMap();
            map.put("2","2");
            map.put("3","3");

            boolean added = bd.addAllToCollection(valueObjectsCollection, map,valueObjectsCollectionToAdd, "idClerk");
            assertTrue("added is expected to be true",added);

            checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false,true);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithMap() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithMap() **************");
    }

    @Test public void testAddAllToCollectionNoTargetRealClassWithMapNoAdded(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithMapNoAdded() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();


            Collection<DirectorClerkVO> valueObjectsCollectionToAdd = new ArrayList<DirectorClerkVO>();

            valueObjectsCollectionToAdd.addAll(valueObjectsCollection);

            DirectorClerkVO x1113DirectorClerkVO = new DirectorClerkVO();
            x1113DirectorClerkVO.setIdDirector("x");
            x1113DirectorClerkVO.setIdSalesManager("1");
            x1113DirectorClerkVO.setIdSalesDivision("1");
            x1113DirectorClerkVO.setIdSalesAssistant("1");
            x1113DirectorClerkVO.setIdClerk("3");
            //x1113DirectorClerkVO.setDirectorClerkDescription1("clerkDescription1 x1113");
            x1113DirectorClerkVO.setDirectorClerkDescription2("clerkDescription1 x1113"); // not an error . is  to reuse checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false);

            valueObjectsCollectionToAdd.add(x1113DirectorClerkVO);

            Map map = new HashMap();
            map.put("2","2");

            boolean added = bd.addAllToCollection(valueObjectsCollection, map,valueObjectsCollectionToAdd, "idClerk");
            assertTrue("added is expected to be false",!added);

            checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false,false);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithMapNoAdded() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectionNoTargetRealClassWithMapNoAdded() **************");
    }


    @Test public void testAddAllToCollectionPInstance(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectionPInstance() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Path7VO kkk115Path7VO = new Path7VO();
            kkk115Path7VO.setIdPath7("kkk115Path7");
            kkk115Path7VO.setDescription("newDescription");

            Collection path7VOs = new ArrayList();
            path7VOs.add(kkk115Path7VO);



            boolean added = bd.addAllToCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",path7VOs);
            assertTrue("added is expected to be true",added);
            checkPath7VOsAdded(kkkPath4VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectionPInstance() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectionPInstance() **************");
    }

    @Test public void testAddAllToCollectionPInstanceNoAdded(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectionPInstanceNoAdded() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Path7VO kkk113Path7VO = new Path7VO();
            kkk113Path7VO.setIdPath7("kkk113Path7");
            kkk113Path7VO.setDescription("newDescription");


            Collection path7VOs = new ArrayList();
            path7VOs.add(kkk113Path7VO);

            boolean added = bd.addAllToCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",path7VOs);
            assertTrue("added is expected to be false",!added);
            checkPath7VOsNoAdded(kkkPath4VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectionPInstanceNoAdded() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectionPInstanceNoAdded() **************");
    }

    @Test public void testAddAllToCollectioPInstanceNullValueObjectsOnPath(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectioPInstanceNullValueObjectsOnPath() ***************");
        try{
            BD bd = getBD();

            Path4VO hyzPath4VO = new Path4VO();
            hyzPath4VO.setIdPath4("hyzPath4");
            hyzPath4VO.setIdPath5("hyz1Path5");


            Path7VO kkk113Path7VO = new Path7VO();
            kkk113Path7VO.setIdPath7("kkk113Path7");
            kkk113Path7VO.setDescription("newDescription");

            Collection path7VOs = new ArrayList();
            path7VOs.add(kkk113Path7VO);

            boolean added = bd.addAllToCollection(hyzPath4VO, "path5VO.path6VO.path7VOs",path7VOs);
            assertTrue("added is expected to be false",!added);

            assertNull("hyzPath4VO.getPath5VO() is expected to be null",hyzPath4VO.getPath5VO());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectioPInstanceNullValueObjectsOnPath() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectioPInstanceNullValueObjectsOnPath() **************");
    }

    @Test public void testAddAllToCollectionPInstanceM2N(){
        log.info("************Entering the "+getThisClassName()+".testAddAllToCollectionPInstanceM2N() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = buildkkkPath3VO();

            Path4VO kkk3Path4VO = new Path4VO();
            kkk3Path4VO.setIdPath4("kkk3Path4");
            kkk3Path4VO.setDescription("newDescription");

            Collection path7VOs = new ArrayList();
            path7VOs.add(kkk3Path4VO);


            boolean added = bd.addAllToCollection(kkkPath3VO, "path4VOs",path7VOs);
            assertTrue("added is expected to be true",added);
            checkPath4VOsAdded(kkkPath3VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddAllToCollectionPInstanceM2N() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddAllToCollectionPInstanceM2N() **************");
    }


    //retainAllInCollection
    @Test public void testRetainAllInCollectionPInstance(){
        log.info("************Entering the "+getThisClassName()+".testRetainAllInCollectionPInstance() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection toRetainValueObjectsCollection = new ArrayList();
            toRetainValueObjectsCollection.addAll(kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs());

            Iterator toRetainValueObjectsCollectionIterator= toRetainValueObjectsCollection.iterator();
            toRetainValueObjectsCollectionIterator.next();
            toRetainValueObjectsCollectionIterator.remove();
            toRetainValueObjectsCollectionIterator.next();
            toRetainValueObjectsCollectionIterator.remove();
            toRetainValueObjectsCollectionIterator.next();
            toRetainValueObjectsCollectionIterator.remove();


            boolean removed = bd.retainAllInCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",toRetainValueObjectsCollection);
            assertTrue("removed is expected to be true",removed);
            //checkPath7VOsAdded(kkkPath4VO);
            Collection<Path7VO> testpath7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();
            log.info("testpath7VOs.size() = "+ testpath7VOs.size());
            assertEquals("testpath7VOs.size() expected is 1",1, testpath7VOs.size());
            Iterator<Path7VO> testpath7VOsIterator = testpath7VOs.iterator();

            Path7VO testkkk114Path7VO = testpath7VOsIterator.next();
            log.info("testkkk114Path7VO.getIdPath7() = "+ testkkk114Path7VO.getIdPath7());
            log.info("testkkk114Path7VO.getIdPath6() = "+ testkkk114Path7VO.getIdPath6());
            log.info("testkkk114Path7VO.getDescription() = "+ testkkk114Path7VO.getDescription());
            assertEquals("testkkk114Path7VO.getIdPath7() is expected to be kkk114Path7","kkk114Path7", testkkk114Path7VO.getIdPath7());
            assertEquals("testkkk114Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk114Path7VO.getIdPath6());
            assertEquals("testkkk114Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk114Path7VO.getDescription());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetainAllInCollectionPInstance() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetainAllInCollectionPInstance() **************");
    }

    @Test public void testRetainAllInCollectionPInstanceNoRemoved(){
        log.info("************Entering the "+getThisClassName()+".testRetainAllInCollectionPInstanceNoRemoved() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection toRetainValueObjectsCollection = new ArrayList();
            toRetainValueObjectsCollection.addAll(kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs());

            boolean removed = bd.retainAllInCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",toRetainValueObjectsCollection);
            assertTrue("removed is expected to be false",!removed);
            checkPath7VOsNoAdded(kkkPath4VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetainAllInCollectionPInstanceNoRemoved() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetainAllInCollectionPInstanceNoRemoved() **************");
    }

    @Test public void testRetainAllInCollectioPInstanceNullValueObjectsOnPath(){
        log.info("************Entering the "+getThisClassName()+".testRetainAllInCollectioPInstanceNullValueObjectsOnPath() ***************");
        try{
            BD bd = getBD();

            Path4VO hyzPath4VO = new Path4VO();
            hyzPath4VO.setIdPath4("hyzPath4");
            hyzPath4VO.setIdPath5("hyz1Path5");

            Collection toRetainValueObjectsCollection = new ArrayList();

            boolean removed = bd.retainAllInCollection(hyzPath4VO, "path5VO.path6VO.path7VOs",toRetainValueObjectsCollection);
            assertTrue("removed is expected to be false",!removed);

            assertNull("hyzPath4VO.getPath5VO() is expected to be null",hyzPath4VO.getPath5VO());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetainAllInCollectioPInstanceNullValueObjectsOnPath() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetainAllInCollectioPInstanceNullValueObjectsOnPath() **************");
    }

    @Test public void testRetainAllInCollectionPInstanceM2N(){
        log.info("************Entering the "+getThisClassName()+".testRetainAllInCollectionPInstanceM2N() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = buildkkkPath3VO();

            Collection toRetainValueObjectsCollection = new ArrayList();

            boolean removed = bd.retainAllInCollection(kkkPath3VO, "path4VOs",toRetainValueObjectsCollection);
            assertTrue("removed is expected to be true",removed);

            Collection<Path4VO> testpath4VOs = kkkPath3VO.getPath4VOs();
            log.info("testpath4VOs.size() = "+ testpath4VOs.size());
            assertEquals("testpath4VOs.size() expected is 0",0, testpath4VOs.size());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetainAllInCollectionPInstanceM2N() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetainAllInCollectionPInstanceM2N() **************");
    }

    @Test public void testRetainAllInCollectionWithRealClass(){
        log.info("************Entering the "+getThisClassName()+".testRetainAllInCollectionWithRealClass() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            Collection<DirectorClerkVO> toRetainValueObjectsCollection = new ArrayList<DirectorClerkVO>();

            toRetainValueObjectsCollection.addAll(valueObjectsCollection);
            Iterator    toRetainValueObjectsCollectionIterator = toRetainValueObjectsCollection.iterator();

            toRetainValueObjectsCollectionIterator.next();
            toRetainValueObjectsCollectionIterator.remove();

            boolean removed = bd.retainAllInCollection(valueObjectsCollection, toRetainValueObjectsCollection, DirectorClerkVO.class);
            assertTrue("removed is expected to be true",removed);

            //checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false,true);
            log.info("valueObjectsCollection.size() = "+ valueObjectsCollection.size());
            assertEquals("valueObjectsCollection.size() expected is 1",1, valueObjectsCollection.size());
            Iterator valueObjectsCollectionIterator = valueObjectsCollection.iterator();

            DirectorClerkVO testx1112DirectorClerkVO = (DirectorClerkVO) valueObjectsCollectionIterator.next();

            log.info("testx1112DirectorClerkVO.getIdDirector() = "+ testx1112DirectorClerkVO.getIdDirector());
            log.info("testx1112DirectorClerkVO.getIdSalesManager() = "+ testx1112DirectorClerkVO.getIdSalesManager());
            log.info("testx1112DirectorClerkVO.getIdSalesDivision() = "+ testx1112DirectorClerkVO.getIdSalesDivision());
            log.info("testx1112DirectorClerkVO.getIdSalesAssistant() = "+ testx1112DirectorClerkVO.getIdSalesAssistant());
            log.info("testx1112DirectorClerkVO.getIdClerk() = "+ testx1112DirectorClerkVO.getIdClerk());
            log.info("testx1112DirectorClerkVO.getDirectorClerkDescription1() = "+ testx1112DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testx1112DirectorClerkVO.getDirectorClerkDescription12() = "+ testx1112DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testx1112DirectorClerkVO.getNote1() = "+ testx1112DirectorClerkVO.getNote1());
            assertEquals("testx1112DirectorClerkVO.getIdDirector() is expected to be x","x", testx1112DirectorClerkVO.getIdDirector());
            assertEquals("testx1112DirectorClerkVO.getIdSalesManager() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesManager());
            assertEquals("testx1112DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesDivision());
            assertEquals("testx1112DirectorClerkVO.getIdSalesAssistant() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testx1112DirectorClerkVO.getIdClerk() is expected to be 2","2", testx1112DirectorClerkVO.getIdClerk());
            assertEquals("testx1112DirectorClerkVO.getDirectorClerkDescription1() is expected to be clerkDescription1 x1112","clerkDescription1 x1112", testx1112DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testx1112DirectorClerkVO.getDirectorClerkDescription2() is expected to be clerkDescription2 x1112","clerkDescription2 x1112", testx1112DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testx1112DirectorClerkVO.getNote1() is expected to be note1 x1112","note1 x1112", testx1112DirectorClerkVO.getNote1());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetainAllInCollectionWithRealClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetainAllInCollectionWithRealClass() **************");
    }

    @Test public void testRetainAllInCollectionWithRealClassNoRemoved(){
        log.info("************Entering the "+getThisClassName()+".testRetainAllInCollectionWithRealClassNoRemoved() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            Collection<DirectorClerkVO> toRetainValueObjectsCollection = new ArrayList<DirectorClerkVO>();
            toRetainValueObjectsCollection.addAll(valueObjectsCollection);

            boolean removed = bd.retainAllInCollection(valueObjectsCollection, toRetainValueObjectsCollection, DirectorClerkVO.class);
            assertTrue("added is removed to be false",!removed);

            checkValueObjectsCollectionOfDirectorClerkVO(valueObjectsCollection,false,false);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetainAllInCollectionWithRealClassNoRemoved() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetainAllInCollectionWithRealClassNoRemoved() **************");
    }

    @Test public void testRetainAllInCollectionWithPAttributeNames(){
        log.info("************Entering the "+getThisClassName()+".testRetainAllInCollectionWithPAttributeNames() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();


            Collection<DirectorClerkVO> toRetainValueObjectsCollection = new ArrayList<DirectorClerkVO>();

            DirectorClerkVO x1112DirectorClerkVO = new DirectorClerkVO();
            x1112DirectorClerkVO.setIdDirector("x");
            x1112DirectorClerkVO.setIdSalesManager("1");
            x1112DirectorClerkVO.setIdSalesDivision("1");
            x1112DirectorClerkVO.setIdSalesAssistant("1");
            x1112DirectorClerkVO.setIdClerk("1");


            toRetainValueObjectsCollection.add(x1112DirectorClerkVO);

            String[] pAttributeNames = new String[] {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};


            boolean removed = bd.retainAllInCollection(valueObjectsCollection, toRetainValueObjectsCollection,pAttributeNames);
            assertTrue("removed is expected to be true",removed);

            log.info("valueObjectsCollection.size() = "+ valueObjectsCollection.size());
            assertEquals("valueObjectsCollection.size() expected is 1",1, valueObjectsCollection.size());
            Iterator valueObjectsCollectionIterator = valueObjectsCollection.iterator();

            DirectorClerkVO testx1111DirectorClerkVO = (DirectorClerkVO) valueObjectsCollectionIterator.next();

            log.info("testx1111DirectorClerkVO.getIdDirector() = "+ testx1111DirectorClerkVO.getIdDirector());
            log.info("testx1111DirectorClerkVO.getIdSalesManager() = "+ testx1111DirectorClerkVO.getIdSalesManager());
            log.info("testx1111DirectorClerkVO.getIdSalesDivision() = "+ testx1111DirectorClerkVO.getIdSalesDivision());
            log.info("testx1111DirectorClerkVO.getIdSalesAssistant() = "+ testx1111DirectorClerkVO.getIdSalesAssistant());
            log.info("testx1111DirectorClerkVO.getIdClerk() = "+ testx1111DirectorClerkVO.getIdClerk());
            log.info("testx1111DirectorClerkVO.getDirectorClerkDescription1() = "+ testx1111DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testx1111DirectorClerkVO.getDirectorClerkDescription12() = "+ testx1111DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testx1111DirectorClerkVO.getNote1() = "+ testx1111DirectorClerkVO.getNote1());
            assertEquals("testx1111DirectorClerkVO.getIdDirector() is expected to be x","x", testx1111DirectorClerkVO.getIdDirector());
            assertEquals("testx1111DirectorClerkVO.getIdSalesManager() is expected to be 1","1", testx1111DirectorClerkVO.getIdSalesManager());
            assertEquals("testx1111DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testx1111DirectorClerkVO.getIdSalesDivision());
            assertEquals("testx1111DirectorClerkVO.getIdSalesAssistant() is expected to be 1","1", testx1111DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testx1111DirectorClerkVO.getIdClerk() is expected to be 1","1", testx1111DirectorClerkVO.getIdClerk());
            assertEquals("testx1111DirectorClerkVO.getDirectorClerkDescription1() is expected to be clerkDescription1 x1111","clerkDescription1 x1111", testx1111DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testx1111DirectorClerkVO.getDirectorClerkDescription2() is expected to be clerkDescription2 x1111","clerkDescription2 x1111", testx1111DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testx1111DirectorClerkVO.getNote1() is expected to be note1 x1111","note1 x1111", testx1111DirectorClerkVO.getNote1());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetainAllInCollectionWithPAttributeNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetainAllInCollectionWithPAttributeNames() **************");
    }

    @Test public void testRetainAllInCollectionWithPAttributeNamesNullToRetain(){
        log.info("************Entering the "+getThisClassName()+".testRetainAllInCollectionWithPAttributeNamesNullToRetain() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            String[] pAttributeNames = new String[] {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};

            boolean removed = bd.retainAllInCollection(valueObjectsCollection, null,pAttributeNames);
            assertTrue("removed is expected to be true",removed);

            log.info("valueObjectsCollection.size() = "+ valueObjectsCollection.size());
            assertEquals("valueObjectsCollection.size() expected is 0",0, valueObjectsCollection.size());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetainAllInCollectionWithPAttributeNamesNullToRetain() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetainAllInCollectionWithPAttributeNamesNullToRetain() **************");
    }

    @Test public void testRetainAllInCollectionWithMap(){
        log.info("************Entering the "+getThisClassName()+".testRetainAllInCollectionWithMap() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            Map map = new HashMap();
            map.put("2","2");
            map.put("3","3");

            boolean removed = bd.retainAllInCollection(valueObjectsCollection, map, "idClerk");
            assertTrue("removed is expected to be true",removed);

            log.info("valueObjectsCollection.size() = "+ valueObjectsCollection.size());
            assertEquals("valueObjectsCollection.size() expected is 1",1, valueObjectsCollection.size());
            Iterator valueObjectsCollectionIterator = valueObjectsCollection.iterator();

            DirectorClerkVO testx1112DirectorClerkVO = (DirectorClerkVO) valueObjectsCollectionIterator.next();

            log.info("testx1112DirectorClerkVO.getIdDirector() = "+ testx1112DirectorClerkVO.getIdDirector());
            log.info("testx1112DirectorClerkVO.getIdSalesManager() = "+ testx1112DirectorClerkVO.getIdSalesManager());
            log.info("testx1112DirectorClerkVO.getIdSalesDivision() = "+ testx1112DirectorClerkVO.getIdSalesDivision());
            log.info("testx1112DirectorClerkVO.getIdSalesAssistant() = "+ testx1112DirectorClerkVO.getIdSalesAssistant());
            log.info("testx1112DirectorClerkVO.getIdClerk() = "+ testx1112DirectorClerkVO.getIdClerk());
            log.info("testx1112DirectorClerkVO.getDirectorClerkDescription1() = "+ testx1112DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testx1112DirectorClerkVO.getDirectorClerkDescription12() = "+ testx1112DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testx1112DirectorClerkVO.getNote1() = "+ testx1112DirectorClerkVO.getNote1());
            assertEquals("testx1112DirectorClerkVO.getIdDirector() is expected to be x","x", testx1112DirectorClerkVO.getIdDirector());
            assertEquals("testx1112DirectorClerkVO.getIdSalesManager() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesManager());
            assertEquals("testx1112DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesDivision());
            assertEquals("testx1112DirectorClerkVO.getIdSalesAssistant() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testx1112DirectorClerkVO.getIdClerk() is expected to be 2","2", testx1112DirectorClerkVO.getIdClerk());
            assertEquals("testx1112DirectorClerkVO.getDirectorClerkDescription1() is expected to be clerkDescription1 x1112","clerkDescription1 x1112", testx1112DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testx1112DirectorClerkVO.getDirectorClerkDescription2() is expected to be clerkDescription2 x1112","clerkDescription2 x1112", testx1112DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testx1112DirectorClerkVO.getNote1() is expected to be note1 x1112","note1 x1112", testx1112DirectorClerkVO.getNote1());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRetainAllInCollectionWithMap() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRetainAllInCollectionWithMap() **************");
    }


    //addToRetainInCollection
    protected Collection<DirectorClerkVO> buildValueObjectsCollectionToAddAndRetainOfDirectorClerkVO(){
        log.info("************Entering the "+getThisClassName()+".buildValueObjectsCollectionToAddAndRetainOfDirectorClerkVO()**************");
        Collection<DirectorClerkVO> valueObjectsCollectionToAddAndRetain = new ArrayList<DirectorClerkVO>();
        try{
            DirectorClerkVO x1112DirectorClerkVO = new DirectorClerkVO();
            x1112DirectorClerkVO.setIdDirector("x");
            x1112DirectorClerkVO.setIdSalesManager("1");
            x1112DirectorClerkVO.setIdSalesDivision("1");
            x1112DirectorClerkVO.setIdSalesAssistant("1");
            x1112DirectorClerkVO.setIdClerk("2");

            DirectorClerkVO x1113DirectorClerkVO = new DirectorClerkVO();
            x1113DirectorClerkVO.setIdDirector("x");
            x1113DirectorClerkVO.setIdSalesManager("1");
            x1113DirectorClerkVO.setIdSalesDivision("1");
            x1113DirectorClerkVO.setIdSalesAssistant("1");
            x1113DirectorClerkVO.setIdClerk("3");
            x1113DirectorClerkVO.setDirectorClerkDescription1("clerkDescription1 x1113");
            x1113DirectorClerkVO.setDirectorClerkDescription2("clerkDescription2 x1113");
            x1113DirectorClerkVO.setNote1("note1 x1113");
            x1113DirectorClerkVO.setNote2("note2 x1113");

            valueObjectsCollectionToAddAndRetain.add(x1112DirectorClerkVO);
            valueObjectsCollectionToAddAndRetain.add(x1113DirectorClerkVO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildValueObjectsCollectionToAddAndRetainOfDirectorClerkVO() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildValueObjectsCollectionToAddAndRetainOfDirectorClerkVO()************");
        return valueObjectsCollectionToAddAndRetain;
    }

    protected void checkPath7VOsForAddAndRetain(Path4VO kkkPath4VO){
        log.info("************Entering the "+getThisClassName()+".checkPath7VOsForAddAndRetain(Path4VO kkkPath4VO)**************");
        try{

            Collection<Path7VO> testpath7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();
            log.info("testpath7VOs.size() = "+ testpath7VOs.size());
            assertEquals("testpath7VOs.size() expected is 2",2, testpath7VOs.size());
            Iterator<Path7VO> testpath7VOsIterator = testpath7VOs.iterator();

            Path7VO testkkk114Path7VO = testpath7VOsIterator.next();
            Path7VO testkkk115Path7VO = testpath7VOsIterator.next();

            log.info("testkkk114Path7VO.getIdPath7() = "+ testkkk114Path7VO.getIdPath7());
            log.info("testkkk114Path7VO.getIdPath6() = "+ testkkk114Path7VO.getIdPath6());
            log.info("testkkk114Path7VO.getDescription() = "+ testkkk114Path7VO.getDescription());
            assertEquals("testkkk114Path7VO.getIdPath7() is expected to be kkk114Path7","kkk114Path7", testkkk114Path7VO.getIdPath7());
            assertEquals("testkkk114Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk114Path7VO.getIdPath6());
            assertEquals("testkkk114Path7VO.getDescription() is expected to be oldDescription","oldDescription", testkkk114Path7VO.getDescription());

            log.info("testkkk115Path7VO.getIdPath7() = "+ testkkk115Path7VO.getIdPath7());
            log.info("testkkk115Path7VO.getIdPath6() = "+ testkkk115Path7VO.getIdPath6());
            log.info("testkkk115Path7VO.getDescription() = "+ testkkk115Path7VO.getDescription());
            assertEquals("testkkk115Path7VO.getIdPath7() is expected to be kkk115Path7","kkk115Path7", testkkk115Path7VO.getIdPath7());
            assertEquals("testkkk115Path7VO.getIdPath6() is expected to be kkk11Path6","kkk11Path6", testkkk115Path7VO.getIdPath6());
            assertEquals("testkkk115Path7VO.getDescription() is expected to be newDescription","newDescription", testkkk115Path7VO.getDescription());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath7VOsForAddAndRetain(Path4VO kkkPath4VO) :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath7VOsForAddAndRetain(Path4VO kkkPath4VO) **************");
    }

    protected void checkValueObjectsCollectionForAddAndRetain(Collection<DirectorClerkVO> valueObjectsCollection){
        log.info("************Entering the "+getThisClassName()+".checkValueObjectsCollectionForAddAndRetain(Collection<DirectorClerkVO> valueObjectsCollection)**************");
        try{
            log.info("valueObjectsCollection.size() = "+ valueObjectsCollection.size());
            assertEquals("valueObjectsCollection.size() expected is 2",2, valueObjectsCollection.size());
            Iterator valueObjectsCollectionIterator = valueObjectsCollection.iterator();

            DirectorClerkVO testx1112DirectorClerkVO = (DirectorClerkVO) valueObjectsCollectionIterator.next();
            DirectorClerkVO testx1113DirectorClerkVO = (DirectorClerkVO) valueObjectsCollectionIterator.next();

            log.info("testx1112DirectorClerkVO.getIdDirector() = "+ testx1112DirectorClerkVO.getIdDirector());
            log.info("testx1112DirectorClerkVO.getIdSalesManager() = "+ testx1112DirectorClerkVO.getIdSalesManager());
            log.info("testx1112DirectorClerkVO.getIdSalesDivision() = "+ testx1112DirectorClerkVO.getIdSalesDivision());
            log.info("testx1112DirectorClerkVO.getIdSalesAssistant() = "+ testx1112DirectorClerkVO.getIdSalesAssistant());
            log.info("testx1112DirectorClerkVO.getIdClerk() = "+ testx1112DirectorClerkVO.getIdClerk());
            log.info("testx1112DirectorClerkVO.getDirectorClerkDescription1() = "+ testx1112DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testx1112DirectorClerkVO.getDirectorClerkDescription12() = "+ testx1112DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testx1112DirectorClerkVO.getNote1() = "+ testx1112DirectorClerkVO.getNote1());
            assertEquals("testx1112DirectorClerkVO.getIdDirector() is expected to be x","x", testx1112DirectorClerkVO.getIdDirector());
            assertEquals("testx1112DirectorClerkVO.getIdSalesManager() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesManager());
            assertEquals("testx1112DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesDivision());
            assertEquals("testx1112DirectorClerkVO.getIdSalesAssistant() is expected to be 1","1", testx1112DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testx1112DirectorClerkVO.getIdClerk() is expected to be 2","2", testx1112DirectorClerkVO.getIdClerk());
            assertEquals("testx1112DirectorClerkVO.getDirectorClerkDescription1() is expected to be clerkDescription1 x1112","clerkDescription1 x1112", testx1112DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testx1112DirectorClerkVO.getDirectorClerkDescription2() is expected to be clerkDescription2 x1112","clerkDescription2 x1112", testx1112DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testx1112DirectorClerkVO.getNote1() is expected to be note1 x1112","note1 x1112", testx1112DirectorClerkVO.getNote1());

            log.info("testx1113DirectorClerkVO.getIdDirector() = "+ testx1113DirectorClerkVO.getIdDirector());
            log.info("testx1113DirectorClerkVO.getIdSalesManager() = "+ testx1113DirectorClerkVO.getIdSalesManager());
            log.info("testx1113DirectorClerkVO.getIdSalesDivision() = "+ testx1113DirectorClerkVO.getIdSalesDivision());
            log.info("testx1113DirectorClerkVO.getIdSalesAssistant() = "+ testx1113DirectorClerkVO.getIdSalesAssistant());
            log.info("testx1113DirectorClerkVO.getIdClerk() = "+ testx1113DirectorClerkVO.getIdClerk());
            log.info("testx1113DirectorClerkVO.getDirectorClerkDescription1() = "+ testx1113DirectorClerkVO.getDirectorClerkDescription1());
            log.info("testx1113DirectorClerkVO.getDirectorClerkDescription12() = "+ testx1113DirectorClerkVO.getDirectorClerkDescription2());
            log.info("testx1113DirectorClerkVO.getNote1() = "+ testx1113DirectorClerkVO.getNote1());
            assertEquals("testx1113DirectorClerkVO.getIdDirector() is expected to be x","x", testx1113DirectorClerkVO.getIdDirector());
            assertEquals("testx1113DirectorClerkVO.getIdSalesManager() is expected to be 1","1", testx1113DirectorClerkVO.getIdSalesManager());
            assertEquals("testx1113DirectorClerkVO.getIdSalesDivision() is expected to be 1","1", testx1113DirectorClerkVO.getIdSalesDivision());
            assertEquals("testx1113DirectorClerkVO.getIdSalesAssistant() is expected to be 1","1", testx1113DirectorClerkVO.getIdSalesAssistant());
            assertEquals("testx1113DirectorClerkVO.getIdClerk() is expected to be 3","3", testx1113DirectorClerkVO.getIdClerk());
            assertEquals("testx1113DirectorClerkVO.getDirectorClerkDescription1() is expected to be clerkDescription1 x1113","clerkDescription1 x1113", testx1113DirectorClerkVO.getDirectorClerkDescription1());
            assertEquals("testx1113DirectorClerkVO.getDirectorClerkDescription2() is expected to be clerkDescription2 x1113","clerkDescription2 x1113", testx1113DirectorClerkVO.getDirectorClerkDescription2());
            assertEquals("testx1113DirectorClerkVO.getNote1() is expected to be note1 x1113","note1 x1113", testx1113DirectorClerkVO.getNote1());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkValueObjectsCollectionForAddAndRetain(Collection<DirectorClerkVO> valueObjectsCollection):"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkValueObjectsCollectionForAddAndRetain(Collection<DirectorClerkVO> valueObjectsCollection)**************************");
    }

    @Test public void testAddToRetainInCollectionPInstance(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionPInstance() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection valueObjectsCollectionToAddAndRetain = new ArrayList();
            valueObjectsCollectionToAddAndRetain.addAll(kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs());

            Iterator valueObjectsCollectionToAddAndRetainIterator= valueObjectsCollectionToAddAndRetain.iterator();
            valueObjectsCollectionToAddAndRetainIterator.next();
            valueObjectsCollectionToAddAndRetainIterator.remove();
            valueObjectsCollectionToAddAndRetainIterator.next();
            valueObjectsCollectionToAddAndRetainIterator.remove();
            valueObjectsCollectionToAddAndRetainIterator.next();
            valueObjectsCollectionToAddAndRetainIterator.remove();

            Path7VO kkk115Path7VO = new Path7VO();
            kkk115Path7VO.setIdPath7("kkk115Path7");
            kkk115Path7VO.setDescription("newDescription");

            valueObjectsCollectionToAddAndRetain.add(kkk115Path7VO);


            boolean addRetain = bd.addToRetainInCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",valueObjectsCollectionToAddAndRetain);
            assertTrue("addRetain is expected to be true",addRetain);

            checkPath7VOsForAddAndRetain(kkkPath4VO);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionPInstance() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionPInstance() **************");
    }

    @Test public void testAddToRetainInCollectionPInstanceNoRemovedNoAdded(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionPInstanceNoRemovedNoAdded() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection valueObjectsCollectionToAddAndRetain = new ArrayList();
            valueObjectsCollectionToAddAndRetain.addAll(kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs());

            boolean addRetain = bd.addToRetainInCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",valueObjectsCollectionToAddAndRetain);
            assertTrue("addRetain is expected to be false",!addRetain);
            checkPath7VOsNoAdded(kkkPath4VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionPInstanceNoRemovedNoAdded() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionPInstanceNoRemovedNoAdded() **************");
    }

    @Test public void testAddToRetainInCollectionPInstanceM2N(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionPInstanceM2N() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = buildkkkPath3VO();

            Collection valueObjectsCollectionToAddAndRetain = new ArrayList();

            boolean addRetain = bd.addToRetainInCollection(kkkPath3VO, "path4VOs",valueObjectsCollectionToAddAndRetain);
            assertTrue("addRetain is expected to be true",addRetain);

            Collection<Path4VO> testpath4VOs = kkkPath3VO.getPath4VOs();
            log.info("testpath4VOs.size() = "+ testpath4VOs.size());
            assertEquals("testpath4VOs.size() expected is 0",0, testpath4VOs.size());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionPInstanceM2N() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionPInstanceM2N() **************");
    }

    @Test public void testAddToRetainInCollectionWithRealClass(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionWithRealClass() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            Collection<DirectorClerkVO> valueObjectsCollectionToAddAndRetain = buildValueObjectsCollectionToAddAndRetainOfDirectorClerkVO();

            boolean addRetain = bd.addToRetainInCollection(valueObjectsCollection, valueObjectsCollectionToAddAndRetain, DirectorClerkVO.class);
            assertTrue("addRetain is expected to be true",addRetain);

            checkValueObjectsCollectionForAddAndRetain(valueObjectsCollection) ;

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionWithRealClass() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionWithRealClass() **************");
    }

    @Test public void testAddToRetainInCollectionWithPAttributeNames(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionWithPAttributeNames() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            Collection<DirectorClerkVO> valueObjectsCollectionToAddAndRetain = buildValueObjectsCollectionToAddAndRetainOfDirectorClerkVO();
            String[] pAttributeNames = new String[] {"idDirector","idSalesManager","idSalesDivision","idSalesAssistant","idClerk"};

            boolean addRetain = bd.addToRetainInCollection(valueObjectsCollection, valueObjectsCollectionToAddAndRetain, pAttributeNames);
            assertTrue("addRetain is expected to be true",addRetain);

            checkValueObjectsCollectionForAddAndRetain(valueObjectsCollection) ;

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionWithPAttributeNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionWithPAttributeNames() **************");
    }

    @Test public void testAddToRetainInCollectionWithMap(){
        log.info("************Entering the "+getThisClassName()+".testAddToRetainInCollectionWithMap() ***************");
        try{
            BD bd = getBD();

            Collection<DirectorClerkVO> valueObjectsCollection = buildValueObjectsCollectionOfDirectorClerkVO();

            Collection<DirectorClerkVO> valueObjectsCollectionToAddAndRetain = buildValueObjectsCollectionToAddAndRetainOfDirectorClerkVO();

            DirectorClerkVO x1114DirectorClerkVO = new DirectorClerkVO();
            x1114DirectorClerkVO.setIdDirector("x");
            x1114DirectorClerkVO.setIdSalesManager("1");
            x1114DirectorClerkVO.setIdSalesDivision("1");
            x1114DirectorClerkVO.setIdSalesAssistant("1");
            x1114DirectorClerkVO.setIdClerk("4");
            x1114DirectorClerkVO.setDirectorClerkDescription1("clerkDescription1 x1114");
            x1114DirectorClerkVO.setDirectorClerkDescription2("clerkDescription2 x1114");
            x1114DirectorClerkVO.setNote1("note1 x1114");
            x1114DirectorClerkVO.setNote2("note2 x1114");

            valueObjectsCollectionToAddAndRetain.add(x1114DirectorClerkVO);

            Map map = new HashMap();
            map.put("2","2");
            map.put("3","3");

            boolean addRetain = bd.addToRetainInCollection(valueObjectsCollection, map,valueObjectsCollectionToAddAndRetain, "idClerk");
            assertTrue("addRetain is expected to be true",addRetain);

            checkValueObjectsCollectionForAddAndRetain(valueObjectsCollection) ;

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddToRetainInCollectionWithMap() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddToRetainInCollectionWithMap() **************");
    }



    //removeFromCollection
    @Test public void testRemoveFromCollectionPInstance(){
        log.info("************Entering the "+getThisClassName()+".testRemoveFromCollectionPInstance() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection<Path7VO> path7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();

            Path7VO kkk115Path7VO = new Path7VO();
            kkk115Path7VO.setIdPath7("kkk115Path7");
            kkk115Path7VO.setIdPath6("kkk11Path6");

            path7VOs.add(kkk115Path7VO);

            boolean removed = bd.removeFromCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",kkk115Path7VO);
            assertTrue("removed is expected to be true",removed);

            checkPath7VOsNoAdded(kkkPath4VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveFromCollectionPInstance() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveFromCollectionPInstance() **************");
    }

    @Test public void testRemoveFromCollectionPInstanceNoRemoved(){
        log.info("************Entering the "+getThisClassName()+".testRemoveFromCollectionPInstanceNoRemoved() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection<Path7VO> path7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();

            Path7VO kkk115Path7VO = new Path7VO();
            kkk115Path7VO.setIdPath7("kkk115Path7");
            kkk115Path7VO.setIdPath6("kkk11Path6");

            //path7VOs.add(kkk115Path7VO);
            boolean removed = bd.removeFromCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",kkk115Path7VO);
            assertTrue("removed is expected to be false",!removed);

            checkPath7VOsNoAdded(kkkPath4VO);
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveFromCollectionPInstanceNoRemoved() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveFromCollectionPInstanceNoRemoved() **************");
    }

    @Test public void testRemoveFromCollectionPInstanceNullValueObjectsOnPath(){
        log.info("************Entering the "+getThisClassName()+".testRemoveFromCollectionPInstanceNullValueObjectsOnPath() ***************");
        try{
            BD bd = getBD();

            Path4VO hyzPath4VO = new Path4VO();
            hyzPath4VO.setIdPath4("hyzPath4");
            hyzPath4VO.setIdPath5("hyz1Path5");


            Path7VO kkk113Path7VO = new Path7VO();
            kkk113Path7VO.setIdPath7("kkk113Path7");
            kkk113Path7VO.setDescription("newDescription");



            boolean removed = bd.removeFromCollection(hyzPath4VO, "path5VO.path6VO.path7VOs",kkk113Path7VO);
            assertTrue("removed is expected to be false",!removed);


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveFromCollectionPInstanceNullValueObjectsOnPath() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveFromCollectionPInstanceNullValueObjectsOnPath() **************");
    }

    @Test public void testRemoveFromCollectionPInstanceM2N(){
        log.info("************Entering the "+getThisClassName()+".testRemoveFromCollectionPInstanceM2N() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = buildkkkPath3VO();

            Path4VO kk13Path4VO = new Path4VO();
            kk13Path4VO.setIdPath4("kkk13Path4");

            kkkPath3VO.getPath4VOs().add(kk13Path4VO);

            boolean removed = bd.removeFromCollection(kkkPath3VO, "path4VOs",kk13Path4VO);
            assertTrue("removed is expected to be true",removed);

            Collection<Path4VO> testpath4VOs = kkkPath3VO.getPath4VOs();
            log.info("testpath4VOs.size() = "+ testpath4VOs.size());
            assertEquals("testpath4VOs.size() expected is 2",2, testpath4VOs.size());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveFromCollectionPInstanceM2N() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveFromCollectionPInstanceM2N() **************");
    }

    @Test public void testRemoveFromCollectionValueObjectsCollection(){
        log.info("************Entering the "+getThisClassName()+".testRemoveFromCollectionValueObjectsCollection() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection<Path7VO> path7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();

            Path7VO kkk115Path7VO = new Path7VO();
            kkk115Path7VO.setIdPath7("kkk115Path7");
            kkk115Path7VO.setIdPath6("kkk11Path6");

            path7VOs.add(kkk115Path7VO);

            boolean removed = bd.removeFromCollection(path7VOs,kkk115Path7VO);
            assertTrue("removed is expected to be true",removed);

            checkPath7VOsNoAdded(kkkPath4VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveFromCollectionValueObjectsCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveFromCollectionValueObjectsCollection() **************");
    }

    @Test public void testRemoveFromCollectionValueObjectsCollectionNoRemoved(){
        log.info("************Entering the "+getThisClassName()+".testRemoveFromCollectionValueObjectsCollectionNoRemoved() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection<Path7VO> path7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();

            Path7VO kkk115Path7VO = new Path7VO();
            kkk115Path7VO.setIdPath7("kkk115Path7");
            kkk115Path7VO.setIdPath6("kkk11Path6");

            //path7VOs.add(kkk115Path7VO);
            boolean removed = bd.removeFromCollection(path7VOs,kkk115Path7VO);
            assertTrue("removed is expected to be false",!removed);

            checkPath7VOsNoAdded(kkkPath4VO);
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveFromCollectionValueObjectsCollectionNoRemoved() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveFromCollectionValueObjectsCollectionNoRemoved() **************");
    }

    //removeAllFromCollection
    @Test public void testRemoveAllFromCollection(){
        log.info("************Entering the "+getThisClassName()+".testRemoveAllFromCollection() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection<Path7VO> path7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();

            Path7VO kkk115Path7VO = new Path7VO();
            kkk115Path7VO.setIdPath7("kkk115Path7");
            kkk115Path7VO.setIdPath6("kkk11Path6");

            path7VOs.add(kkk115Path7VO);

            Collection valueObjectsCollectionToRemove = new ArrayList();
            valueObjectsCollectionToRemove.add(kkk115Path7VO);

            boolean removed = bd.removeAllFromCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",valueObjectsCollectionToRemove);
            assertTrue("removed is expected to be true",removed);

            checkPath7VOsNoAdded(kkkPath4VO);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveAllFromCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveAllFromCollection() **************");
    }

    @Test public void testRemoveAllFromCollectionNoRemoved(){
        log.info("************Entering the "+getThisClassName()+".testRemoveAllFromCollectionNoRemoved() ***************");
        try{
            BD bd = getBD();

            Path4VO kkkPath4VO = buildkkkPath4VO();

            Collection<Path7VO> path7VOs = kkkPath4VO.getPath5VO().getPath6VO().getPath7VOs();

            Path7VO kkk115Path7VO = new Path7VO();
            kkk115Path7VO.setIdPath7("kkk115Path7");
            kkk115Path7VO.setIdPath6("kkk11Path6");

            Collection valueObjectsCollectionToRemove = new ArrayList();
            valueObjectsCollectionToRemove.add(kkk115Path7VO);

            boolean removed = bd.removeAllFromCollection(kkkPath4VO, "path5VO.path6VO.path7VOs",valueObjectsCollectionToRemove);
            assertTrue("removed is expected to be false",!removed);

            checkPath7VOsNoAdded(kkkPath4VO);
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveAllFromCollectionNoRemoved() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveAllFromCollectionNoRemoved() **************");
    }

    @Test public void testRemoveAllFromCollectionNullValueObjectsOnPath(){
        log.info("************Entering the "+getThisClassName()+".testRemoveAllFromCollectionNullValueObjectsOnPath() ***************");
        try{
            BD bd = getBD();

            Path4VO hyzPath4VO = new Path4VO();
            hyzPath4VO.setIdPath4("hyzPath4");
            hyzPath4VO.setIdPath5("hyz1Path5");


            Path7VO kkk113Path7VO = new Path7VO();
            kkk113Path7VO.setIdPath7("kkk113Path7");
            kkk113Path7VO.setDescription("newDescription");

            Collection valueObjectsCollectionToRemove = new ArrayList();
            valueObjectsCollectionToRemove.add(kkk113Path7VO);


            boolean removed = bd.removeAllFromCollection(hyzPath4VO, "path5VO.path6VO.path7VOs",valueObjectsCollectionToRemove);
            assertTrue("removed is expected to be false",!removed);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveAllFromCollectionNullValueObjectsOnPath() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveAllFromCollectionNullValueObjectsOnPath() **************");
    }

    @Test public void testRemoveAllFromCollectionM2N(){
        log.info("************Entering the "+getThisClassName()+".testRemoveAllFromCollectionM2N() ***************");
        try{
            BD bd = getBD();

            Path3VO kkkPath3VO = buildkkkPath3VO();

            Path4VO kk13Path4VO = new Path4VO();
            kk13Path4VO.setIdPath4("kkk13Path4");

            kkkPath3VO.getPath4VOs().add(kk13Path4VO);

            Collection valueObjectsCollectionToRemove = new ArrayList();
            valueObjectsCollectionToRemove.add(kk13Path4VO);

            boolean removed = bd.removeAllFromCollection(kkkPath3VO, "path4VOs",valueObjectsCollectionToRemove);
            assertTrue("removed is expected to be true",removed);

            Collection<Path4VO> testpath4VOs = kkkPath3VO.getPath4VOs();
            log.info("testpath4VOs.size() = "+ testpath4VOs.size());
            assertEquals("testpath4VOs.size() expected is 2",2, testpath4VOs.size());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testRemoveAllFromCollectionM2N() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testRemoveAllFromCollectionM2N() **************");
    }

    //createVOfromVO
    protected void insertCategorySubCategoryProduct(String testCat1, String testSubCat1, String testProd1, String testProd1Description, String testProd1ProductDescription){
        log.info("************Entering the "+getThisClassName()+".insertCategorySubCategoryProduct(String testCat1, String testSubCat1, String testProd1, String testProd1Description, String testProd1ProductDescription)**************");
        try{
            BD bd = getBD();
            CategoryVO categoryVO = new CategoryVO();
            categoryVO.setIdCategory(testCat1);

            SubCategoryVO subCategoryVO = new SubCategoryVO();
            subCategoryVO.setIdCategory(testCat1);
            subCategoryVO.setIdSubCategory(testSubCat1);

            ProductVO productVO= new ProductVO();
            productVO.setIdCategory(testCat1);
            productVO.setIdSubCategory(testSubCat1);
            productVO.setIdProduct(testProd1);
            productVO.setDescription(testProd1Description);
            productVO.setProductDescription(testProd1ProductDescription);

            categoryVO.setSubCategoryVOs(new ArrayList<SubCategoryVO>());
            categoryVO.getSubCategoryVOs().add(subCategoryVO);

            subCategoryVO.setProductVOs(new ArrayList<ProductVO>());
            subCategoryVO.getProductVOs().add(productVO);

            Collection<String> trees = new ArrayList<String>();
            trees.add("subCategoryVOs.productVOs");
            bd.updateCreateTrees(categoryVO,trees);
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".insertCategorySubCategoryProduct(String testCat1, String testSubCat1, String testProd1, String testProd1Description, String testProd1ProductDescription):"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".insertCategorySubCategoryProduct(String testCat1, String testSubCat1, String testProd1, String testProd1Description, String testProd1ProductDescription)**************************");
    }

    private ProductVO buildProductVO(String testCat1, String testSubCat1, String testProd1, String testProd1Description, String testProd1ProductDescription){
        log.info("************Entering the "+getThisClassName()+".buildProductVO(String testCat1, String testSubCat1, String testProd1, String testProd1Description, String testProd1ProductDescription)**************");
        ProductVO productVO=null;
        try{
            productVO= new ProductVO();
            productVO.setIdCategory(testCat1);
            productVO.setIdSubCategory(testSubCat1);
            productVO.setIdProduct(testProd1);
            productVO.setDescription(testProd1Description);
            productVO.setProductDescription(testProd1ProductDescription);
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".buildProductVO(String testCat1, String testSubCat1, String testProd1, String testProd1Description, String testProd1ProductDescription):"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".buildProductVO(String testCat1, String testSubCat1, String testProd1, String testProd1Description, String testProd1ProductDescription)**************************");
        return productVO;
    }


    @Test public void testCreateVOfromVO(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVO() ***************");
        try{
            BD bd = getBD();

            insertCategorySubCategoryProduct("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] pkFieldNames = new String[]{"idCategory","idSubCategory","idProduct"};
            Object[] pkValues  = new Object[]{"testCat1","testSubCat1","testProd1"};
            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","productDescription"};
            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","orderDescription"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(ProductVO.class,pkFieldNames,pkValues,OrderVO.class,sourcePAttributeNames,targetPAttributeNames,pAttributeNames,valuesArray);

            log.info("orderVO..getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getOrderDescription() is expected to be testProd1ProductDescription","testProd1ProductDescription", orderVO.getOrderDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVO() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVO() **************");
    }

    @Test public void testCreateVOfromVONoVAlueArray(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVONoVAlueArray() ***************");
        try{
            BD bd = getBD();

            insertCategorySubCategoryProduct("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] pkFieldNames = new String[]{"idCategory","idSubCategory","idProduct"};
            Object[] pkValues  = new Object[]{"testCat1","testSubCat1","testProd1"};
            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","productDescription"};
            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","orderDescription"};


            OrderVO orderVO = (OrderVO)bd.createVOfromVO(ProductVO.class,pkFieldNames,pkValues,OrderVO.class,sourcePAttributeNames,targetPAttributeNames);

            log.info("orderVO..getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertNull("orderVO.getIdAdministration() is expected to be null", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getOrderDescription() is expected to be testProd1ProductDescription","testProd1ProductDescription", orderVO.getOrderDescription());
            assertNull("orderVO.getNote() is expected to be null", orderVO.getNote());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVONoVAlueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVONoVAlueArray() **************");
    }

    @Test public void testCreateVOfromVONoPkFieldName(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVONoPkFieldName() ***************");
        try{
            BD bd = getBD();

            insertCategorySubCategoryProduct("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            Object[] pkValues  = new Object[]{"testCat1","testSubCat1","testProd1"};
            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","productDescription"};
            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","orderDescription"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(ProductVO.class,pkValues,OrderVO.class,sourcePAttributeNames,targetPAttributeNames,pAttributeNames,valuesArray);

            log.info("orderVO.getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getOrderDescription() is expected to be testProd1ProductDescription","testProd1ProductDescription", orderVO.getOrderDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVONoPkFieldName() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVONoPkFieldName() **************");
    }


    @Test public void testCreateVOfromVONoVAlueArrayNoPkFieldName(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVONoVAlueArrayNoPkFieldName() ***************");
        try{
            BD bd = getBD();

            insertCategorySubCategoryProduct("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            Object[] pkValues  = new Object[]{"testCat1","testSubCat1","testProd1"};
            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","productDescription"};
            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","orderDescription"};


            OrderVO orderVO = (OrderVO)bd.createVOfromVO(ProductVO.class,pkValues,OrderVO.class,sourcePAttributeNames,targetPAttributeNames);

            log.info("orderVO.getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertNull("orderVO.getIdAdministration() is expected to be null", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getOrderDescription() is expected to be testProd1ProductDescription","testProd1ProductDescription", orderVO.getOrderDescription());
            assertNull("orderVO.getNote() is expected to be null", orderVO.getNote());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVONoVAlueArrayNoPkFieldName() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVONoVAlueArrayNoPkFieldName() **************");
    }

    @Test public void testCreateVOfromVONullRetrieved(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVONullRetrieved() ***************");
        try{
            BD bd = getBD();



            String[] pkFieldNames = new String[]{"idCategory","idSubCategory","idProduct"};
            Object[] pkValues  = new Object[]{"testCatAAA","testSubCatAAA","testProdAAA"};
            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","productDescription"};
            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","orderDescription"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(ProductVO.class,pkFieldNames,pkValues,OrderVO.class,sourcePAttributeNames,targetPAttributeNames,pAttributeNames,valuesArray);

            log.info("orderVO.getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertNull("orderVO.getIdCategory() is expected to be nul", orderVO.getIdCategory());
            assertNull("orderVO.getIdSubCategory() is expected to be null", orderVO.getIdSubCategory());
            assertNull("orderVO.getIdProduct() is expected to be null", orderVO.getIdProduct());
            assertNull("orderVO.getDescription() is expected to be null", orderVO.getDescription());
            assertNull("orderVO.getOrderDescription() is expected to be null", orderVO.getOrderDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVONullRetrieved() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVONullRetrieved() **************");
    }

    @Test public void testCreateVOfromVONullSourcePAttributeNames(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVONullSourcePAttributeNames() ***************");
        try{
            BD bd = getBD();

            insertCategorySubCategoryProduct("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] pkFieldNames = new String[]{"idCategory","idSubCategory","idProduct"};
            Object[] pkValues  = new Object[]{"testCat1","testSubCat1","testProd1"};
            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(ProductVO.class,pkFieldNames,pkValues,OrderVO.class,null,targetPAttributeNames,pAttributeNames,valuesArray);

            log.info("orderVO.getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVONullSourcePAttributeNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVONullSourcePAttributeNames() **************");
    }

    @Test public void testCreateVOfromVONullTargetPAttributeNames(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVONullTargetPAttributeNames() ***************");
        try{
            BD bd = getBD();

            insertCategorySubCategoryProduct("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] pkFieldNames = new String[]{"idCategory","idSubCategory","idProduct"};
            Object[] pkValues  = new Object[]{"testCat1","testSubCat1","testProd1"};
            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(ProductVO.class,pkFieldNames,pkValues,OrderVO.class,sourcePAttributeNames,null,pAttributeNames,valuesArray);

            log.info("orderVO..getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVONullTargetPAttributeNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVONullTargetPAttributeNames() **************");
    }

    @Test public void testCreateVOfromVONullSourceAndTargetPAttributeNames(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVONullSourceAndTargetPAttributeNames() ***************");
        try{
            BD bd = getBD();

            insertCategorySubCategoryProduct("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] pkFieldNames = new String[]{"idCategory","idSubCategory","idProduct"};
            Object[] pkValues  = new Object[]{"testCat1","testSubCat1","testProd1"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(ProductVO.class,pkFieldNames,pkValues,OrderVO.class,null,null,pAttributeNames,valuesArray);

            log.info("orderVO.getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertNull("orderVO.getIdCategory() is expected to be null", orderVO.getIdCategory());
            assertNull("orderVO.getIdSubCategory() is expected to be null", orderVO.getIdSubCategory());
            assertNull("orderVO.getIdProduct() is expected to be null", orderVO.getIdProduct());
            assertNull("orderVO.getDescription() is expected to be null", orderVO.getDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVONullSourceAndTargetPAttributeNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVONullSourceAndTargetPAttributeNames() **************");
    }

    @Test public void testCreateVOfromVOWithSourcePInstance(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVOWithSourcePInstance() ***************");
        try{
            BD bd = getBD();

            ProductVO sourcePInstance = buildProductVO("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","productDescription"};
            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","orderDescription"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(sourcePInstance,OrderVO.class,sourcePAttributeNames,targetPAttributeNames,pAttributeNames,valuesArray);

            log.info("orderVO..getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getOrderDescription() is expected to be testProd1ProductDescription","testProd1ProductDescription", orderVO.getOrderDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVOWithSourcePInstance() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVOWithSourcePInstance() **************");
    }

    @Test public void testCreateVOfromVOWithSourcePInstanceNoVAlueArray(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNoVAlueArray() ***************");
        try{
            BD bd = getBD();

            ProductVO sourcePInstance = buildProductVO("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","productDescription"};
            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","orderDescription"};


            OrderVO orderVO = (OrderVO)bd.createVOfromVO(sourcePInstance,OrderVO.class,sourcePAttributeNames,targetPAttributeNames);

            log.info("orderVO..getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertNull("orderVO.getIdAdministration() is expected to be null", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getOrderDescription() is expected to be testProd1ProductDescription","testProd1ProductDescription", orderVO.getOrderDescription());
            assertNull("orderVO.getNote() is expected to be null", orderVO.getNote());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNoVAlueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNoVAlueArray() **************");
    }

    @Test public void testCreateVOfromVOWithSourcePInstanceNull(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNull() ***************");
        try{
            BD bd = getBD();



            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","productDescription"};
            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description","orderDescription"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(null,OrderVO.class,sourcePAttributeNames,targetPAttributeNames,pAttributeNames,valuesArray);

            log.info("orderVO..getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertNull("orderVO.getIdCategory() is expected to be nul", orderVO.getIdCategory());
            assertNull("orderVO.getIdSubCategory() is expected to be null", orderVO.getIdSubCategory());
            assertNull("orderVO.getIdProduct() is expected to be null", orderVO.getIdProduct());
            assertNull("orderVO.getDescription() is expected to be null", orderVO.getDescription());
            assertNull("orderVO.getOrderDescription() is expected to be null", orderVO.getOrderDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNull() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNull() **************");
    }

    @Test public void testCreateVOfromVOWithSourcePInstanceNullSourcePAttributeNames(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNullSourcePAttributeNames() ***************");
        try{
            BD bd = getBD();

            ProductVO sourcePInstance = buildProductVO("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] targetPAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(sourcePInstance,OrderVO.class,null,targetPAttributeNames,pAttributeNames,valuesArray);

            log.info("orderVO..getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVOWithSourcePInstancNullSourcePAttributeNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNullSourcePAttributeNames() **************");
    }

    @Test public void testCreateVOfromVOWithSourcePInstanceNullTargetPAttributeNames(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNullTargetPAttributeNames() ***************");
        try{
            BD bd = getBD();

            ProductVO sourcePInstance = buildProductVO("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] sourcePAttributeNames = new  String[]{"idCategory","idSubCategory","idProduct","description"};
            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(sourcePInstance,OrderVO.class,sourcePAttributeNames,null,pAttributeNames,valuesArray);

            log.info("orderVO..getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertEquals("orderVO.getIdCategory() is expected to be testCat1","testCat1", orderVO.getIdCategory());
            assertEquals("orderVO.getIdSubCategory() is expected to be testSubCat1","testSubCat1", orderVO.getIdSubCategory());
            assertEquals("orderVO.getIdProduct() is expected to be testProd1","testProd1", orderVO.getIdProduct());
            assertEquals("orderVO.getDescription() is expected to be testProd1Description","testProd1Description", orderVO.getDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNullTargetPAttributeNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNullTargetPAttributeNames() **************");
    }

    @Test public void testCreateVOfromVOWithSourcePInstanceNullSourceAndTargetPAttributeNames(){
        log.info("************Entering the "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNullSourceAndTargetPAttributeNames() ***************");
        try{
            BD bd = getBD();

            ProductVO sourcePInstance = buildProductVO("testCat1", "testSubCat1", "testProd1", "testProd1Description", "testProd1ProductDescription");

            String[] pAttributeNames = new  String[]{"idAdministration","note"};
            Object[] valuesArray = new  Object[]{"admin","note value"};

            OrderVO orderVO = (OrderVO)bd.createVOfromVO(sourcePInstance,OrderVO.class,null,null,pAttributeNames,valuesArray);

            log.info("orderVO.getIdAdministration() = "+ orderVO.getIdAdministration());
            log.info("orderVO.getIdCategory() = "+ orderVO.getIdCategory());
            log.info("orderVO.getIdSubCategory() = "+ orderVO.getIdSubCategory());
            log.info("orderVO.getIdProduct() = "+ orderVO.getIdProduct());
            log.info("orderVO.getDescription() = "+ orderVO.getDescription());
            log.info("orderVO.getOrderDescription() = "+ orderVO.getOrderDescription());
            log.info("orderVO.getNote() = "+ orderVO.getNote());
            assertEquals("orderVO.getIdAdministration() is expected to be admin","admin", orderVO.getIdAdministration());
            assertNull("orderVO.getIdCategory() is expected to be null", orderVO.getIdCategory());
            assertNull("orderVO.getIdSubCategory() is expected to be null", orderVO.getIdSubCategory());
            assertNull("orderVO.getIdProduct() is expected to be null", orderVO.getIdProduct());
            assertNull("orderVO.getDescription() is expected to be null", orderVO.getDescription());
            assertEquals("orderVO.getNote() is expected to be note value","note value", orderVO.getNote());
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNullSourceAndTargetPAttributeNames() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testCreateVOfromVOWithSourcePInstanceNullSourceAndTargetPAttributeNames() **************");
    }

    //addTreeToTree
    protected RootVO buildRootVO() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildRootVO() ***************");
        RootVO cRootVO =null;
        try{
            cRootVO = new RootVO();
            cRootVO.setIdRoot("root-c");
            ArrayList<Node1VO> cRootNode1VOs = new ArrayList<Node1VO>();
            ArrayList<Node2VO> cRootNode2VOs = new ArrayList<Node2VO>();

            Node1VO c1Node1VO = new Node1VO();
            c1Node1VO.setIdNode1("node1-c1");

            Node11VO c11Node11VO = new Node11VO();
            c11Node11VO.setIdNode11("node11-c11");
            ArrayList<Node111VO> c11Node11Node111VOs = new ArrayList<Node111VO>();

            Node111VO c111Node111VO = new Node111VO();
            c111Node111VO.setIdNode111("node111-c111");

            Node111VO c112Node111VO = new Node111VO();
            c112Node111VO.setIdNode111("node111-c112");

            Node111VO c113Node111VO = new Node111VO();
            c113Node111VO.setIdNode111("node111-c113");


            c11Node11Node111VOs.add(c111Node111VO);
            c11Node11Node111VOs.add(c112Node111VO);
            c11Node11Node111VOs.add(c113Node111VO);

            c11Node11VO.setNode111VOs(c11Node11Node111VOs);

            c1Node1VO.setNode11VO(c11Node11VO);

            ArrayList<Node12VO> c1Node1Node12VOs = new ArrayList<Node12VO>();

            Node12VO c11Node12VO = new Node12VO();
            c11Node12VO.setIdNode12("node12-c11");

            Node121VO c111Node121VO = new Node121VO();
            c111Node121VO.setIdNode121("node121-c111");

            c11Node12VO.setNode121VO(c111Node121VO);

            ArrayList<Node122VO> c11Node12Node122VOs = new ArrayList<Node122VO>();

            Node122VO c111Node122VO = new Node122VO();
            c111Node122VO.setIdNode122("node122-c111");

            Node122VO c112Node122VO = new Node122VO();
            c112Node122VO.setIdNode122("node122-c112");

            Node122VO c113Node122VO = new Node122VO();
            c113Node122VO.setIdNode122("node122-c113");

            c11Node12Node122VOs.add(c111Node122VO);
            c11Node12Node122VOs.add(c112Node122VO);
            c11Node12Node122VOs.add(c113Node122VO);

            c11Node12VO.setNode122VOs(c11Node12Node122VOs);

            Node12VO c12Node12VO = new Node12VO();
            c12Node12VO.setIdNode12("node12-c12");

            Node121VO c121Node121VO = new Node121VO();
            c121Node121VO.setIdNode121("node121-c121");

            c12Node12VO.setNode121VO(c121Node121VO);

            c1Node1Node12VOs.add(c11Node12VO);
            c1Node1Node12VOs.add(c12Node12VO);

            c1Node1VO.setNode12VOs(c1Node1Node12VOs);



            Node1VO c2Node1VO = new Node1VO();
            c2Node1VO.setIdNode1("node1-c2");

            Node11VO c21Node11VO = new Node11VO();
            c21Node11VO.setIdNode11("node11-c21");
            ArrayList<Node111VO> c21Node11Node111VOs = new ArrayList<Node111VO>();

            Node111VO c211Node111VO = new Node111VO();
            c211Node111VO.setIdNode111("node111-c211");

            Node111VO c212Node111VO = new Node111VO();
            c212Node111VO.setIdNode111("node111-c212");

            c21Node11Node111VOs.add(c211Node111VO);
            c21Node11Node111VOs.add(c212Node111VO);

            c21Node11VO.setNode111VOs(c21Node11Node111VOs);

            c2Node1VO.setNode11VO(c21Node11VO);

            ArrayList<Node12VO> c2Node1Node12VOs = new ArrayList<Node12VO>();

            Node12VO c21Node12VO = new Node12VO();
            c21Node12VO.setIdNode12("node12-c21");

            Node12VO c22Node12VO = new Node12VO();
            c22Node12VO.setIdNode12("node12-c22");
            ArrayList<Node122VO> c22Node12Node122VOs = new ArrayList<Node122VO>();

            Node122VO  c221Node122VO = new Node122VO();
            c221Node122VO.setIdNode122("node122-c221");

            c22Node12Node122VOs.add(c221Node122VO);
            c22Node12VO.setNode122VOs(c22Node12Node122VOs);

            Node12VO c23Node12VO = new Node12VO();
            c23Node12VO.setIdNode12("node12-c23");

            Node121VO c231Node121VO= new Node121VO();
            c231Node121VO.setIdNode121("node121-c231");

            c23Node12VO.setNode121VO(c231Node121VO);

            ArrayList<Node122VO> c23Node12Node122VOs = new ArrayList<Node122VO>();

            Node122VO  c231Node122VO = new Node122VO();
            c231Node122VO.setIdNode122("node122-c231");

            Node122VO  c232Node122VO = new Node122VO();
            c232Node122VO.setIdNode122("node122-c232");

            c23Node12Node122VOs.add(c231Node122VO);
            c23Node12Node122VOs.add(c232Node122VO);

            c23Node12VO.setNode122VOs(c23Node12Node122VOs);

            c2Node1Node12VOs.add(c21Node12VO);
            c2Node1Node12VOs.add(c22Node12VO);
            c2Node1Node12VOs.add(c23Node12VO);

            c2Node1VO.setNode12VOs(c2Node1Node12VOs);

            cRootNode1VOs.add(c1Node1VO);
            cRootNode1VOs.add(c2Node1VO);

            cRootVO.setNode1VOs(cRootNode1VOs);



            Node2VO c1Node2VO= new Node2VO();
            c1Node2VO.setIdNode2("node2-c1");
            ArrayList<Node22VO> c1Node2Node22VOs = new ArrayList<Node22VO>();

            Node21VO c11Node21VO = new Node21VO();
            c11Node21VO.setIdNode21("node21-c11");
            ArrayList<Node211VO> c11Node21Node211VOs = new ArrayList<Node211VO>();

            Node211VO  c111Node211VO = new Node211VO();
            c111Node211VO.setIdNode211("node211-c111");

            Node211VO  c112Node211VO = new Node211VO();
            c112Node211VO.setIdNode211("node211-c112");

            c11Node21Node211VOs.add(c111Node211VO);
            c11Node21Node211VOs.add(c112Node211VO);

            c11Node21VO.setNode211VOs(c11Node21Node211VOs);

            c1Node2VO.setNode21VO(c11Node21VO);

            Node22VO c11Node22VO = new Node22VO();
            c11Node22VO .setIdNode22("node22-c11");
            ArrayList<Node221VO> c11Node22Node221VOs = new ArrayList<Node221VO>();

            Node221VO c111Node221VO = new Node221VO();
            c111Node221VO.setIdNode221("node221-c111");

            Node221VO c112Node221VO = new Node221VO();
            c112Node221VO.setIdNode221("node221-c112");

            c11Node22Node221VOs.add(c111Node221VO);
            c11Node22Node221VOs.add(c112Node221VO);

            c11Node22VO.setNode221VOs(c11Node22Node221VOs);

            c1Node2Node22VOs.add(c11Node22VO) ;

            c1Node2VO.setNode22VOs(c1Node2Node22VOs);

            Node2VO c2Node2VO= new Node2VO();
            c2Node2VO.setIdNode2("node2-c2");
            ArrayList<Node22VO> c2Node2Node22VOs = new ArrayList<Node22VO>();

            Node22VO c21Node22VO = new Node22VO();
            c21Node22VO .setIdNode22("node22-c21");
            ArrayList<Node221VO> c21Node22Node221VOs = new ArrayList<Node221VO>();

            Node221VO c211Node221VO = new Node221VO();
            c211Node221VO.setIdNode221("node221-c211");

            c21Node22Node221VOs.add(c211Node221VO);

            c21Node22VO.setNode221VOs(c21Node22Node221VOs);

            Node22VO c22Node22VO = new Node22VO();
            c22Node22VO .setIdNode22("node22-c22");

            c2Node2Node22VOs.add(c21Node22VO) ;
            c2Node2Node22VOs.add(c22Node22VO) ;

            c2Node2VO.setNode22VOs(c2Node2Node22VOs);

            Node2VO c3Node2VO= new Node2VO();
            c3Node2VO.setIdNode2("node2-c3");
            ArrayList<Node22VO> c3Node2Node22VOs = new ArrayList<Node22VO>();


            Node21VO c31Node21VO = new Node21VO();
            c31Node21VO.setIdNode21("node21-c31");
            ArrayList<Node211VO> c31Node21Node211VOs = new ArrayList<Node211VO>();

            Node211VO  c311Node211VO = new Node211VO();
            c311Node211VO.setIdNode211("node211-c311");

            Node211VO  c312Node211VO = new Node211VO();
            c312Node211VO.setIdNode211("node211-c312");

            c31Node21Node211VOs.add(c311Node211VO);
            c31Node21Node211VOs.add(c312Node211VO);

            c31Node21VO.setNode211VOs(c31Node21Node211VOs);

            c3Node2VO.setNode21VO(c31Node21VO);

            Node22VO c31Node22VO = new Node22VO();
            c31Node22VO .setIdNode22("node22-c31");
            ArrayList<Node221VO> c31Node22Node221VOs = new ArrayList<Node221VO>();

            Node221VO c311Node221VO = new Node221VO();
            c311Node221VO.setIdNode221("node221-c311");

            Node221VO c312Node221VO = new Node221VO();
            c312Node221VO.setIdNode221("node221-c312");

            Node221VO c313Node221VO = new Node221VO();
            c313Node221VO.setIdNode221("node221-c313");

            c31Node22Node221VOs.add(c311Node221VO);
            c31Node22Node221VOs.add(c312Node221VO);
            c31Node22Node221VOs.add(c313Node221VO);

            c31Node22VO.setNode221VOs(c31Node22Node221VOs);

            Node22VO c32Node22VO = new Node22VO();
            c32Node22VO .setIdNode22("node22-c32");
            ArrayList<Node221VO> c32Node22Node221VOs = new ArrayList<Node221VO>();

            Node221VO c321Node221VO = new Node221VO();
            c321Node221VO.setIdNode221("node221-c321");

            Node221VO c322Node221VO = new Node221VO();
            c322Node221VO.setIdNode221("node221-c322");

            Node221VO c323Node221VO = new Node221VO();
            c323Node221VO.setIdNode221("node221-c323");

            c32Node22Node221VOs.add(c321Node221VO);
            c32Node22Node221VOs.add(c322Node221VO);
            c32Node22Node221VOs.add(c323Node221VO);

            c32Node22VO.setNode221VOs(c32Node22Node221VOs);

            c3Node2Node22VOs.add(c31Node22VO) ;
            c3Node2Node22VOs.add(c32Node22VO) ;

            c3Node2VO.setNode22VOs(c3Node2Node22VOs);


            cRootNode2VOs.add(c1Node2VO);
            cRootNode2VOs.add(c2Node2VO);
            cRootNode2VOs.add(c3Node2VO);

            cRootVO.setNode2VOs(cRootNode2VOs);



            Node3VO c1Node3VO = new Node3VO();
            c1Node3VO.setIdNode3("node3-c1");
            ArrayList<Node31VO> c1Node3Node31VOs = new ArrayList<Node31VO>();
            ArrayList<Node32VO> c1Node3Node32VOs = new ArrayList<Node32VO>();

            Node31VO c11Node31VO = new Node31VO();
            c11Node31VO.setIdNode31("node31-c11");

            Node31VO c12Node31VO = new Node31VO();
            c12Node31VO.setIdNode31("node31-c12");
            ArrayList<Node311VO> c12Node31Node311VOs = new ArrayList<Node311VO>();

            Node311VO c121Node311VO = new Node311VO();
            c121Node311VO.setIdNode311("node311-c121");
            ArrayList<Node3111VO> c121Node311Node3111VOs = new ArrayList<Node3111VO>();
            ArrayList<Node3112VO> c121Node311Node3112VOs = new ArrayList<Node3112VO>();

            Node3111VO c1211Node3111VO = new Node3111VO();
            c1211Node3111VO.setIdNode3111("node3111-c1211");

            Node3111VO c1212Node3111VO = new Node3111VO();
            c1212Node3111VO.setIdNode3111("node3111-c1212");

            Node3111VO c1213Node3111VO = new Node3111VO();
            c1213Node3111VO.setIdNode3111("node3111-c1213");

            c121Node311Node3111VOs.add(c1211Node3111VO);
            c121Node311Node3111VOs.add(c1212Node3111VO);
            c121Node311Node3111VOs.add(c1213Node3111VO);

            c121Node311VO.setNode3111VOs(c121Node311Node3111VOs);

            Node3112VO c1211Node3112VO = new Node3112VO();
            c1211Node3112VO.setIdNode3112("node3112-c1211");

            Node3112VO c1212Node3112VO = new Node3112VO();
            c1212Node3112VO.setIdNode3112("node3112-c1212");

            c121Node311Node3112VOs.add(c1211Node3112VO);
            c121Node311Node3112VOs.add(c1212Node3112VO);

            c121Node311VO.setNode3112VOs(c121Node311Node3112VOs);


            Node311VO c122Node311VO = new Node311VO();
            c122Node311VO.setIdNode311("node311-c122");
            ArrayList<Node3112VO> c122Node311Node3112VOs = new ArrayList<Node3112VO>();

            Node3112VO c1221Node3112VO = new Node3112VO();
            c1221Node3112VO.setIdNode3112("node3112-c1221");

            c122Node311Node3112VOs.add(c1221Node3112VO);

            c122Node311VO.setNode3112VOs(c122Node311Node3112VOs);

            c12Node31Node311VOs.add(c121Node311VO);
            c12Node31Node311VOs.add(c122Node311VO);

            c12Node31VO.setNode311VOs(c12Node31Node311VOs);

            Node31VO c13Node31VO = new Node31VO();
            c13Node31VO.setIdNode31("node31-c13");
            ArrayList<Node311VO> c13Node31Node311VOs = new ArrayList<Node311VO>();

            Node311VO c131Node311VO = new Node311VO();
            c131Node311VO.setIdNode311("node311-c131");
            ArrayList<Node3111VO> c131Node311Node3111VOs = new ArrayList<Node3111VO>();

            Node3111VO c1311Node3111VO = new Node3111VO();
            c1311Node3111VO.setIdNode3111("node3111-c1311");

            Node3111VO c1312Node3111VO = new Node3111VO();
            c1312Node3111VO.setIdNode3111("node3111-c1312");

            c131Node311Node3111VOs.add(c1311Node3111VO);
            c131Node311Node3111VOs.add(c1312Node3111VO);

            c131Node311VO.setNode3111VOs(c131Node311Node3111VOs);

            c13Node31Node311VOs.add(c131Node311VO);

            c13Node31VO.setNode311VOs(c13Node31Node311VOs);

            c1Node3Node31VOs.add(c11Node31VO) ;
            c1Node3Node31VOs.add(c12Node31VO) ;
            c1Node3Node31VOs.add(c13Node31VO) ;

            c1Node3VO.setNode31VOs(c1Node3Node31VOs);

            Node32VO c11Node32VO = new Node32VO();
            c11Node32VO.setIdNode32("node32-c11");
            ArrayList<Node322VO> c11Node32Node322VOs = new ArrayList<Node322VO>();

            Node321VO c111Node321VO = new Node321VO();
            c111Node321VO.setIdNode321("node321-c111");

            c11Node32VO.setNode321VO(c111Node321VO);

            Node322VO c111Node322VO = new Node322VO();
            c111Node322VO.setIdNode322("node322-c111");

            Node322VO c112Node322VO = new Node322VO();
            c112Node322VO.setIdNode322("node322-c112");

            c11Node32Node322VOs.add(c111Node322VO);
            c11Node32Node322VOs.add(c112Node322VO);

            c11Node32VO.setNode322VOs(c11Node32Node322VOs);

            Node32VO c12Node32VO = new Node32VO();
            c12Node32VO.setIdNode32("node32-c12");


            c1Node3Node32VOs.add(c11Node32VO) ;
            c1Node3Node32VOs.add(c12Node32VO) ;

            c1Node3VO.setNode32VOs(c1Node3Node32VOs);

            Node33VO c11Node33VO = new Node33VO();
            c11Node33VO.setIdNode33("node33-c11");

            c1Node3VO.setNode33VO(c11Node33VO);

            cRootVO.setNode3VO(c1Node3VO);

        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildRootVO() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildRootVO() **************");
        return cRootVO;
    }

    private CopyRootVO buildCopyRootVO() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildCopyRootVO() ***************");
        CopyRootVO cCopyRootVO =null;
        try{
            cCopyRootVO = new CopyRootVO();
            cCopyRootVO.setIdCopyRoot("copyRoot-c");
            ArrayList<CopyNode1VO> cRootNode1VOs = new ArrayList<CopyNode1VO>();
            ArrayList<CopyNode2VO> cRootNode2VOs = new ArrayList<CopyNode2VO>();

            CopyNode1VO c1CopyNode1VO = new CopyNode1VO();
            c1CopyNode1VO.setIdCopyNode1("node1-c1");
            c1CopyNode1VO.setDescription("copy-node1-c1");

            CopyNode11VO c11CopyNode11VO = new CopyNode11VO();
            c11CopyNode11VO.setIdCopyNode11("copy-node11-c11");
            ArrayList<CopyNode111VO> c11Node11Node111VOs = new ArrayList<CopyNode111VO>();

            CopyNode111VO c111CopyNode111VO = new CopyNode111VO();
            c111CopyNode111VO.setIdCopyNode111("node111-c111");
            c111CopyNode111VO.setDescription("description node111-c111");

            CopyNode111VO c114CopyNode111VO = new CopyNode111VO();
            c114CopyNode111VO.setIdCopyNode111("copy-node111-c114");
            c114CopyNode111VO.setDescription("description copy-node111-c114");

            c11Node11Node111VOs.add(c111CopyNode111VO);
            c11Node11Node111VOs.add(c114CopyNode111VO);

            c11CopyNode11VO.setCopyNode111VOs(c11Node11Node111VOs);

            c1CopyNode1VO.setCopyNode11VO(c11CopyNode11VO);

            ArrayList<CopyNode12VO> c1Node1Node12VOs = new ArrayList<CopyNode12VO>();


            CopyNode12VO c12CopyNode12VO = new CopyNode12VO();
            c12CopyNode12VO.setIdCopyNode12("node12-c12");
            c12CopyNode12VO.setDescription("description node12-c12");

            CopyNode121VO c121CopyNode121VO = new CopyNode121VO();
            c121CopyNode121VO.setIdCopyNode121("copy-node121-c121");
            c121CopyNode121VO.setDescription("description copy-node121-c121");

            c12CopyNode12VO.setCopyNode121VO(c121CopyNode121VO);

            Collection<CopyNode122VO> c12Node12Node122VOs = new ArrayList<CopyNode122VO>();
            CopyNode122VO c121CopyNode122VO = new CopyNode122VO();
            c121CopyNode122VO.setIdCopyNode122("copy-node122-c121");
            c121CopyNode122VO.setDescription("description copy-node122-c121");

            c12Node12Node122VOs.add(c121CopyNode122VO);

            c12CopyNode12VO.setCopyNode122VOs(c12Node12Node122VOs);


            CopyNode12VO c13CopyNode12VO = new CopyNode12VO();
            c13CopyNode12VO.setIdCopyNode12("copy-node12-c13");
            c13CopyNode12VO.setDescription("description copy-node12-c13");


            c1Node1Node12VOs.add(c12CopyNode12VO);
            c1Node1Node12VOs.add(c13CopyNode12VO);

            c1CopyNode1VO.setCopyNode12VOs(c1Node1Node12VOs);


            CopyNode1VO c3CopyNode1VO = new CopyNode1VO();
            c3CopyNode1VO.setIdCopyNode1("copy-node1-c3");
            c3CopyNode1VO.setDescription("description copy-node1-c3");

            CopyNode11VO c31CopyNode11VO = new CopyNode11VO();
            c31CopyNode11VO.setIdCopyNode11("copy-node11-c31");
            c31CopyNode11VO.setDescription("description copy-node11-c31");
            ArrayList<CopyNode111VO> c31Node11Node111VOs = new ArrayList<CopyNode111VO>();

            CopyNode111VO c311CopyNode111VO = new CopyNode111VO();
            c311CopyNode111VO.setIdCopyNode111("copy-node111-c311");
            c311CopyNode111VO.setDescription("description copy-node111-c311");

            CopyNode111VO c312CopyNode111VO = new CopyNode111VO();
            c312CopyNode111VO.setIdCopyNode111("copy-node111-c312");
            c312CopyNode111VO.setDescription("description copy-node111-c312");

            c31Node11Node111VOs.add(c311CopyNode111VO);
            c31Node11Node111VOs.add(c312CopyNode111VO);


            c31CopyNode11VO.setCopyNode111VOs(c31Node11Node111VOs);

            c3CopyNode1VO.setCopyNode11VO(c31CopyNode11VO);


            cRootNode1VOs.add(c1CopyNode1VO);
            cRootNode1VOs.add(c3CopyNode1VO);

            cCopyRootVO.setCopyNode1VOs(cRootNode1VOs);


            CopyNode2VO c2CopyNode2VO= new CopyNode2VO();
            c2CopyNode2VO.setIdCopyNode2("node2-c2");
            c2CopyNode2VO.setDescription("description node2-c2");

            CopyNode21VO c21CopyNode21VO = new CopyNode21VO();
            c21CopyNode21VO.setIdCopyNode21("copy-node21-c21");
            c21CopyNode21VO.setDescription("description copy-node21-c21");

            c2CopyNode2VO.setCopyNode21VO(c21CopyNode21VO);



            CopyNode2VO c4CopyNode2VO= new CopyNode2VO();
            c4CopyNode2VO.setIdCopyNode2("copy-node2-c4");
            c4CopyNode2VO.setDescription("description copy-node2-c4");

            CopyNode21VO c41CopyNode21VO = new CopyNode21VO();
            c41CopyNode21VO.setIdCopyNode21("copy-node21-c41");
            c41CopyNode21VO.setDescription("description copy-node21-c4");

            ArrayList<CopyNode211VO> c41Node21Node211VOs = new ArrayList<CopyNode211VO>();

            CopyNode211VO  c411CopyNode211VO = new CopyNode211VO();
            c411CopyNode211VO.setIdCopyNode211("copy-node211-c411");
            c411CopyNode211VO.setDescription("description copy-node211-c411");

            CopyNode211VO  c412CopyNode211VO = new CopyNode211VO();
            c412CopyNode211VO.setIdCopyNode211("copy-node211-c412");
            c412CopyNode211VO.setDescription("description copy-node211-c412");

            c41Node21Node211VOs.add(c411CopyNode211VO);
            c41Node21Node211VOs.add(c412CopyNode211VO);

            c41CopyNode21VO.setCopyNode211VOs(c41Node21Node211VOs);

            c4CopyNode2VO.setCopyNode21VO(c41CopyNode21VO);

            cRootNode2VOs.add(c2CopyNode2VO);
            cRootNode2VOs.add(c4CopyNode2VO);


            cCopyRootVO.setCopyNode2VOs(cRootNode2VOs);


            CopyNode3VO c1CopyNode3VO = new CopyNode3VO();
            c1CopyNode3VO.setIdCopyNode3("copy-node3-c1");
            c1CopyNode3VO.setDescription("description copy-node3-c1");

            ArrayList<CopyNode31VO> c1Node3Node31VOs = new ArrayList<CopyNode31VO>();
            ArrayList<CopyNode32VO> c1Node3Node32VOs = new ArrayList<CopyNode32VO>();

            CopyNode31VO c11CopyNode31VO = new CopyNode31VO();
            c11CopyNode31VO.setIdCopyNode31("node31-c11");
            c11CopyNode31VO.setDescription("description copy-node31-c11");

            ArrayList<CopyNode311VO> c11Node31Node311VOs = new ArrayList<CopyNode311VO>();

            CopyNode311VO c111CopyNode311VO = new CopyNode311VO();
            c111CopyNode311VO.setIdCopyNode311("copy-node311-c111");
            c111CopyNode311VO.setDescription("description copy-node311-c111");

            c11Node31Node311VOs.add(c111CopyNode311VO);

            ArrayList<CopyNode3111VO> c111Node311Node3111VOs = new ArrayList<CopyNode3111VO>();


            CopyNode3111VO c1111CopyNode3111VO = new CopyNode3111VO();
            c1111CopyNode3111VO.setIdCopyNode3111("copy-node3111-c1111");
            c1111CopyNode3111VO.setDescription("description copy-node3111-c1111");

            c111Node311Node3111VOs.add(c1111CopyNode3111VO);

            c111CopyNode311VO.setCopyNode3111VOs(c111Node311Node3111VOs);

            c11CopyNode31VO.setCopyNode311VOs(c11Node31Node311VOs);

            c1Node3Node31VOs.add(c11CopyNode31VO);

            c1CopyNode3VO.setCopyNode31VOs(c1Node3Node31VOs);

            /*
            CopyNode32VO c11CopyNode32VO = new CopyNode32VO();
            c11CopyNode32VO.setIdCopyNode32("copy-node32-c11");
            c11CopyNode32VO.setDescription("description copy-node32-c11");

            c1Node3Node32VOs.add(c11CopyNode32VO) ;
            */
            c1CopyNode3VO.setCopyNode32VOs(c1Node3Node32VOs);

            cCopyRootVO.setCopyNode3VO(c1CopyNode3VO);

        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildCopyRootVO() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildCopyRootVO() **************");
        return cCopyRootVO;
    }

    protected void checkRootVO(RootVO testcRootVO, boolean  checkNote){
        log.info("************Entering the "+getThisClassName()+".checkRootVO(RootVO testcRootVO, boolean  checkNote)**************");
        try{
            log.info("testcRootVO.getIdRoot() = "+testcRootVO.getIdRoot());
            assertEquals("testcRootVO.getIdRoot() is expected to be root-c", "root-c",testcRootVO.getIdRoot());
            log.info("testcRootVO.getIdNode3() = "+testcRootVO.getIdNode3());
            //assertEquals("testcRootVO.getIdNode3() is expected to be node3-c1", "node3-c1",testcRootVO.getIdNode3());
            assertNull("testcRootVO.getDescription()",testcRootVO.getDescription());
            if(checkNote)assertNull("testcRootVO.getNoteRoot()",testcRootVO.getNoteRoot());

            Collection testcRootNode1VOs = testcRootVO.getNode1VOs();
            log.info("testcRootNode1VOs.size() = " + testcRootNode1VOs.size());
            assertEquals("testcRootNode1VOs.size() is expected to be 3", 3, testcRootNode1VOs.size());

            Iterator iterator = testcRootNode1VOs.iterator();
            Node1VO testc1Node1VO = (Node1VO) iterator.next();
            Node1VO testc2Node1VO = (Node1VO) iterator.next();
            Node1VO testc3Node1VO = (Node1VO) iterator.next(); // new Added


            log.info("testc1Node1VO.getIdNode1() = "+testc1Node1VO.getIdNode1());
            assertEquals("testc1Node1VO.getIdNode1() is expected to be node1-c1", "node1-c1",testc1Node1VO.getIdNode1());
            log.info("testc1Node1VO.getIdRoot() = "+testc1Node1VO.getIdRoot());
            //assertEquals("testc1Node1VO.getIdRoot() is expected to be root-c", "root-c",testc1Node1VO.getIdRoot());
            //assertNotNull("testc1Node1VO.getIdNode11() is expected to be not null ",testc1Node1VO.getIdNode11());
            log.info("testc1Node1VO.getIdNode11() = "+testc1Node1VO.getIdNode11());
            //assertEquals("testc1Node1VO.getIdNode11() is expected to be node11-c11", "node11-c11",testc1Node1VO.getIdNode11());
            assertNull("testc1Node1VO.getDescription()",testc1Node1VO.getDescription());
            if(checkNote)assertNull("testc1Node1VO.getNote11()",testc1Node1VO.getNote1());


            assertNotNull("testc1Node1VO.getNode11VO() is expected to be not null ",testc1Node1VO.getNode11VO());
            Node11VO  testc11Node11VO = testc1Node1VO.getNode11VO();
            log.info("testc11Node11VO.getIdNode11() = "+testc11Node11VO.getIdNode11());
            assertEquals("testc11Node11VO.getIdNode11() is expected to be node11-c11", "node11-c11",testc11Node11VO.getIdNode11());
            assertNull("testc11Node11VO.getDescription()",testc11Node11VO.getDescription());
            if(checkNote)assertNull("testc11Node11VO.getNote11()",testc11Node11VO.getNote11());


            Collection testc11Node11Node111VOs = testc11Node11VO.getNode111VOs();
            log.info("testc11Node11Node111VOs.size() = " + testc11Node11Node111VOs.size());
            assertEquals("testc11Node11Node111VOs.size() is expected to be 4", 4, testc11Node11Node111VOs.size());

            iterator = testc11Node11Node111VOs.iterator();
            Node111VO testc111Node111VO = (Node111VO) iterator.next();
            Node111VO testc112Node111VO = (Node111VO) iterator.next();
            Node111VO testc113Node111VO = (Node111VO) iterator.next();
            Node111VO testc114Node111VO = (Node111VO) iterator.next();

            log.info("testc111Node111VO.getIdNode111() = "+testc111Node111VO.getIdNode111());
            assertEquals("testc111Node111VO.getIdNode111() is expected to be node111-c111", "node111-c111",testc111Node111VO.getIdNode111());
            assertNull("testc111Node111VO.getDescription()",testc111Node111VO.getDescription());
            if(checkNote)assertNull("testc111Node111VO.getNote111()",testc111Node111VO.getNote111());

            log.info("testc112Node111VO.getIdNode111() = "+testc112Node111VO.getIdNode111());
            assertEquals("testc112Node111VO.getIdNode111() is expected to be node111-c112", "node111-c112",testc112Node111VO.getIdNode111());
            assertNull("testc112Node111VO.getDescription()",testc112Node111VO.getDescription());
            if(checkNote)assertNull("testc112Node111VO.getNote111()",testc112Node111VO.getNote111());

            log.info("testc113Node111VO.getIdNode111() = "+testc113Node111VO.getIdNode111());
            assertEquals("testc113Node111VO.getIdNode111() is expected to be node111-c113", "node111-c113",testc113Node111VO.getIdNode111());
            assertNull("testc113Node111VO.getDescription()",testc113Node111VO.getDescription());
            if(checkNote)assertNull("testc113Node111VO.getNote111()",testc113Node111VO.getNote111());

            log.info("testc114Node111VO.getIdNode111() = "+testc114Node111VO.getIdNode111());
            assertEquals("testc114Node111VO.getIdNode111() is expected to be copy-node111-c114", "copy-node111-c114",testc114Node111VO.getIdNode111());
            log.info("testc114Node111VO.getDescription() = "+testc114Node111VO.getDescription());
            assertEquals("testc114Node111VO.getDescription() is expected to be copy-node111-c114", "description copy-node111-c114",testc114Node111VO.getDescription());
            log.info("testc114Node111VO.getNote111() = "+testc114Node111VO.getNote111());
            if(checkNote)assertEquals("testc113Node111VO.getNote111() is expected to be created note111","created note111",testc114Node111VO.getNote111());


            Collection testc1Node1Node12VOs = testc1Node1VO.getNode12VOs();
            log.info("testc1Node1Node12VOs.size() = " + testc1Node1Node12VOs.size());
            assertEquals("testc1Node1Node12VOs.size() is expected to be 3", 3, testc1Node1Node12VOs.size());

            iterator = testc1Node1Node12VOs.iterator();
            Node12VO testc11Node12VO = (Node12VO) iterator.next();
            Node12VO testc12Node12VO = (Node12VO) iterator.next();
            Node12VO testc13Node12VO = (Node12VO) iterator.next();

            log.info("testc11Node12VO.getIdNode12() = "+testc11Node12VO.getIdNode12());
            assertEquals("testc11Node12VO.getIdNode12() is expected to be node12-c11", "node12-c11",testc11Node12VO.getIdNode12());

            Node121VO testc111Node121VO = testc11Node12VO.getNode121VO();

            log.info("testc111Node121VO.getIdNode121() = "+testc111Node121VO.getIdNode121());
            assertEquals("testc111Node121VO.getIdNode121() is expected to be node121-c111", "node121-c111",testc111Node121VO.getIdNode121());

            Collection testc11Node12Node122VOs = testc11Node12VO.getNode122VOs();
            log.info("testc11Node12Node122VOs.size() = " + testc11Node12Node122VOs.size());
            assertEquals("testc11Node12Node122VOs.size() is expected to be 3", 3, testc11Node12Node122VOs.size());

            iterator = testc11Node12Node122VOs.iterator();
            Node122VO testc111Node122VO = (Node122VO) iterator.next();
            Node122VO testc112Node122VO = (Node122VO) iterator.next();
            Node122VO testc113Node122VO = (Node122VO) iterator.next();

            log.info("testc111Node122VO.getIdNode122() = "+testc111Node122VO.getIdNode122());
            assertEquals("testc111Node122VO.getIdNode122() is expected to be node122-c111", "node122-c111",testc111Node122VO.getIdNode122());

            log.info("testc112Node122VO.getIdNode122() = "+testc112Node122VO.getIdNode122());
            assertEquals("testc112Node122VO.getIdNode122() is expected to be node122-c112", "node122-c112",testc112Node122VO.getIdNode122());

            log.info("testc113Node122VO.getIdNode122() = "+testc113Node122VO.getIdNode122());
            assertEquals("testc113Node122VO.getIdNode122() is expected to be node122-c113", "node122-c113",testc113Node122VO.getIdNode122());



            log.info("testc12Node12VO.getIdNode12() = "+testc12Node12VO.getIdNode12());
            assertEquals("testc12Node12VO.getIdNode12() is expected to be node12-c12", "node12-c12",testc12Node12VO.getIdNode12());
            assertNull("testc12Node12VO.getDescription()",testc12Node12VO.getDescription());
            if(checkNote)assertNull("testc12Node12VO.getNote12()",testc12Node12VO.getNote12());

            Node121VO testc121Node121VO = testc12Node12VO.getNode121VO();

            log.info("testc121Node121VO.getIdNode121() = "+testc121Node121VO.getIdNode121());
            assertEquals("testc121Node121VO.getIdNode121() is expected to be node121-c121", "node121-c121",testc121Node121VO.getIdNode121());
            assertNull("testc121Node121VO.getDescription()",testc121Node121VO.getDescription());
            if(checkNote)assertNull("testc121Node121VO.getNote121()",testc121Node121VO.getNote121());

            Collection<Node122VO> testc12Node12Node122VOs = testc12Node12VO.getNode122VOs();
            log.info("testc12Node12VO.getNode122VOs().size() = " + testc12Node12VO.getNode122VOs().size());
            assertEquals("testc12Node12VO.getNode122VOs().size() is expected to be 1", 1, testc12Node12VO.getNode122VOs().size());

            Node122VO testc121Node122VO = testc12Node12Node122VOs.iterator().next();
            log.info("testc121Node122VO.getIdNode122() = "+testc121Node122VO.getIdNode122());
            assertEquals("testc121Node122VO.getIdNode122() is expected to be copy-node122-c121", "copy-node122-c121",testc121Node122VO.getIdNode122());
            log.info("testc121Node122VO.getIdNode12() = "+testc121Node122VO.getIdNode12());
            assertEquals("testc121Node122VO.getIdNode12() is expected to be node12-c12", "node12-c12",testc121Node122VO.getIdNode12());
            log.info("testc121Node122VO.getDescription() = "+testc121Node122VO.getDescription());
            assertEquals("testc121Node122VO.getDescription() is expected to be description copy-node122-c121","description copy-node122-c121",testc121Node122VO.getDescription());
            if(checkNote)assertEquals("testc121Node122VO.getNote122() is expected to be created note122","created note122",testc121Node122VO.getNote122());

            log.info("testc13Node12VO.getIdNode12() = "+testc13Node12VO.getIdNode12());
            assertEquals("testc13Node12VO.getIdNode12()is expected to be copy-node12-c13", "copy-node12-c13",testc13Node12VO.getIdNode12());
            log.info("testc13Node12VO.getIdNode12() = "+testc13Node12VO.getIdNode1());
            assertEquals("testc13Node12VO.getIdNode1() is expected to be node1-c1", "node1-c1",testc13Node12VO.getIdNode1());
            log.info("testc13Node12VO.getDescription() = "+testc13Node12VO.getDescription());
            assertEquals("testc13Node12VO.getDescription() is expected to be description copy-node12-c13","description copy-node12-c13",testc13Node12VO.getDescription());
            if(checkNote)assertEquals("testc13Node12VO.getNote12() is expected to be created note12","created note12",testc13Node12VO.getNote12());


            log.info("testc2Node1VO.getIdNode1() = "+testc2Node1VO.getIdNode1());
            assertEquals("testc2Node1VO.getIdNode1() is expected to be node1-c2", "node1-c2",testc2Node1VO.getIdNode1());

            Node11VO  testc21Node11VO = testc2Node1VO.getNode11VO();
            log.info("testc21Node11VO.getIdNode11() = "+testc21Node11VO.getIdNode11());
            assertEquals("testc21Node11VO.getIdNode11() is expected to be node11-c21", "node11-c21",testc21Node11VO.getIdNode11());

            Collection testc21Node11Node111VOs = testc21Node11VO.getNode111VOs();
            log.info("testc21Node11Node111VOs.size() = " + testc21Node11Node111VOs.size());
            assertEquals("testc21Node11Node111VOs.size() is expected to be 2", 2, testc21Node11Node111VOs.size());

            iterator = testc21Node11Node111VOs.iterator();
            Node111VO testc211Node111VO = (Node111VO) iterator.next();
            Node111VO testc212Node111VO = (Node111VO) iterator.next();

            log.info("testc211Node111VO.getIdNode111() = "+testc211Node111VO.getIdNode111());
            assertEquals("testc211Node111VO.getIdNode111() is expected to be node111-c211", "node111-c211",testc211Node111VO.getIdNode111());

            log.info("testc212Node111VO.getIdNode111() = "+testc212Node111VO.getIdNode111());
            assertEquals("testc212Node111VO.getIdNode111() is expected to be node111-c212", "node111-c212",testc212Node111VO.getIdNode111());

            Collection testc2Node1Node12VOs = testc2Node1VO.getNode12VOs();
            log.info("testc2Node1Node12VOs.size() = " + testc2Node1Node12VOs.size());
            assertEquals("testc2Node1Node12VOs.size() is expected to be 3", 3, testc2Node1Node12VOs.size());

            iterator = testc2Node1Node12VOs.iterator();
            Node12VO testc21Node12VO = (Node12VO) iterator.next();
            Node12VO testc22Node12VO = (Node12VO) iterator.next();
            Node12VO testc23Node12VO = (Node12VO) iterator.next();

            log.info("testc21Node12VO.getIdNode12() = "+testc21Node12VO.getIdNode12());
            assertEquals("testc21Node12VO.getIdNode12() is expected to be node12-c21", "node12-c21",testc21Node12VO.getIdNode12());

            Assert.assertNull("testc21Node12VO.getNode121VO() is expected to be null",testc21Node12VO.getNode121VO());
            if(testc21Node12VO.getNode122VOs()!=null){
                log.info("testc21Node12VO.getNode122VOs().size() = " + testc21Node12VO.getNode122VOs().size());
                assertEquals("testc21Node12VO.getNode122VOs().size() is expected to be 0", 0, testc21Node12VO.getNode122VOs().size());
            }  else{
                Assert.assertNull("testc21Node12VO.getNode122VOs() is expected to be null",testc21Node12VO.getNode122VOs());
            }


            log.info("testc22Node12VO.getIdNode12() = "+testc22Node12VO.getIdNode12());
            assertEquals("testc22Node12VO.getIdNode12() is expected to be node12-c22", "node12-c22",testc22Node12VO.getIdNode12());

            Assert.assertNull("testc22Node12VO.getNode121VO() is expected to be null",testc22Node12VO.getNode121VO());

            Collection testc22Node12Node122VOs = testc22Node12VO.getNode122VOs();
            log.info("testc22Node12Node122VOs.size() = " + testc22Node12Node122VOs.size());
            assertEquals("testc22Node12Node122VOs.size() is expected to be 1", 1, testc22Node12Node122VOs.size());

            iterator = testc22Node12Node122VOs.iterator();

            Node122VO testc221Node122VO = (Node122VO) iterator.next();

            log.info("testc221Node122VO.getIdNode122() = "+testc221Node122VO.getIdNode122());
            assertEquals("testc221Node122VO.getIdNode122() is expected to be node122-c221", "node122-c221",testc221Node122VO.getIdNode122());

            log.info("testc23Node12VO.getIdNode12() = "+testc23Node12VO.getIdNode12());
            assertEquals("testc23Node12VO.getIdNode12() is expected to be node12-c23", "node12-c23",testc23Node12VO.getIdNode12());

            Node121VO testc231Node121VO = testc23Node12VO.getNode121VO();
            log.info("testc231Node121VO.getIdNode121() = "+testc231Node121VO.getIdNode121());
            assertEquals("testc231Node121VO.getIdNode12() is expected to be node121-c231", "node121-c231",testc231Node121VO.getIdNode121());


            Collection testc23Node12Node122VOs = testc23Node12VO.getNode122VOs();
            log.info("testc23Node12Node122VOs.size() = " + testc23Node12Node122VOs.size());
            assertEquals("testc23Node12Node122VOs.size() is expected to be 2", 2, testc23Node12Node122VOs.size());

            iterator = testc23Node12Node122VOs.iterator();

            Node122VO testc231Node122VO = (Node122VO) iterator.next();
            Node122VO testc232Node122VO = (Node122VO) iterator.next();

            log.info("testc231Node122VO.getIdNode122() = "+testc231Node122VO.getIdNode122());
            assertEquals("testc231Node122VO.getIdNode122() is expected to be node122-c231", "node122-c231",testc231Node122VO.getIdNode122());

            log.info("testc232Node122VO.getIdNode122() = "+testc232Node122VO.getIdNode122());
            assertEquals("testc232Node122VO.getIdNode122() is expected to be node122-c232", "node122-c232",testc232Node122VO.getIdNode122());


            log.info("testc3Node1VO.getIdNode1() = "+testc3Node1VO.getIdNode1());
            assertEquals("testc3Node1VO.getIdNode1() is expected to be copy-node1-c3", "copy-node1-c3",testc3Node1VO.getIdNode1());
            log.info("testc3Node1VO.getIdRoot() = "+testc3Node1VO.getIdRoot());
            assertEquals("testc3Node1VO.getIdRoot() is expected to be root-c", "root-c",testc3Node1VO.getIdRoot());
            log.info("testc3Node1VO.getIdNode11() = "+testc3Node1VO.getIdNode11());
            assertEquals("testc3Node1VO.getIdNode11() is expected to be copy-node11-c31", "copy-node11-c31",testc3Node1VO.getIdNode11());
            log.info("testc3Node1VO.getDescription() = "+testc3Node1VO.getDescription());
            assertEquals("testc3Node1VO.getDescription() is expected to be description copy-node1-c3", "description copy-node1-c3",testc3Node1VO.getDescription());
            log.info("testc3Node1VO.getNote1() = "+testc3Node1VO.getNote1());
            if(checkNote)  assertEquals("testc3Node1VO.getNote1() is expected to be created note1", "created note1",testc3Node1VO.getNote1());

            assertNotNull("testc3Node1VO.getNode11VO() is expected to be not null",testc3Node1VO.getNode11VO()) ;
            Node11VO testc31Node11VO = testc3Node1VO.getNode11VO();
            log.info("testc31Node11VO.getIdNode11() = "+testc31Node11VO.getIdNode11());
            assertEquals("testc31Node11VO.getIdNode11() is expected to be copy-node11-c31", "copy-node11-c31",testc31Node11VO.getIdNode11());
            log.info("testc31Node11VO.getDescription() = "+testc31Node11VO.getDescription());
            assertEquals("testc31Node11VO.getDescription() is expected to be description copy-node11-c31", "description copy-node11-c31",testc31Node11VO.getDescription());
            log.info("testc31Node11VO.getNote11() = "+testc31Node11VO.getNote11());
            if(checkNote)  assertEquals("testc31Node11VO.getNote11() is expected to be created note11", "created note11",testc31Node11VO.getNote11());

            Collection<Node111VO> testc31Node11Node111VOs = testc31Node11VO.getNode111VOs();
            log.info("testc31Node11Node111VOs = " + testc31Node11Node111VOs);
            log.info("testc31Node11Node111VOs.size() = " + testc31Node11Node111VOs.size());
            assertEquals("testc31Node11Node111VOs.size() is expected to be 2", 2, testc31Node11Node111VOs.size());

            Iterator<Node111VO> testc31Node11Node111VOsIterator = testc31Node11Node111VOs.iterator();
            Node111VO testc311Node111VO = testc31Node11Node111VOsIterator.next();
            Node111VO testc312Node111VO = testc31Node11Node111VOsIterator.next();

            log.info("testc311Node111VO.getIdNode111() = "+ testc311Node111VO.getIdNode111());
            assertEquals("testc311Node111VO.getIdNode111() is expected to be copy-node111-c311", "copy-node111-c311", testc311Node111VO.getIdNode111());
            log.info("testc311Node111VO.getIdNode11() = "+ testc311Node111VO.getIdNode11());
            assertEquals("testc311Node111VO.getIdNode11() is expected to be copy-node11-c31", "copy-node11-c31", testc311Node111VO.getIdNode11());
            log.info("testc311Node111VO.getDescription() = "+ testc311Node111VO.getDescription());
            assertEquals("testc311Node111VO.getDescription() is expected to be description copy-node111-c311", "description copy-node111-c311", testc311Node111VO.getDescription());
            log.info("testc311Node111VO.getNote111() = "+ testc311Node111VO.getNote111());
            if(checkNote)  assertEquals("testc311Node111VO.getNote111() is expected to be created note111", "created note111", testc311Node111VO.getNote111());

            log.info("testc3121Copy111VO.getIdNode111() = "+ testc312Node111VO.getIdNode111());
            assertEquals("testc312Node111VO.getIdNode111() is expected to be copy-node111-c312", "copy-node111-c312", testc312Node111VO.getIdNode111());
            log.info("testc312Node111VO.getIdNode11() = "+ testc312Node111VO.getIdNode11());
            assertEquals("testc312Node111VO.getIdNode11() is expected to be copy-node11-c31", "copy-node11-c31", testc312Node111VO.getIdNode11());
            log.info("testc312Node111VO.getDescription() = "+ testc312Node111VO.getDescription());
            assertEquals("testc312Node111VO.getDescription() is expected to be description copy-node111-c312", "description copy-node111-c312", testc312Node111VO.getDescription());
            log.info("testc312Node111VO.getNote111() = "+ testc312Node111VO.getNote111());
            if(checkNote)  assertEquals("testc312Node111VO.getNote111() is expected to be created note111", "created note111", testc312Node111VO.getNote111());



            Collection testcRootNode2VOs = testcRootVO.getNode2VOs();
            log.info("testcRootNod21VOs.size() = " + testcRootNode2VOs.size());
            assertEquals("testcRootNode2VOs.size() is expected to be 4", 4, testcRootNode2VOs.size());


            iterator = testcRootNode2VOs.iterator();
            Node2VO testc1Node2VO = (Node2VO) iterator.next();
            Node2VO testc2Node2VO = (Node2VO) iterator.next();
            Node2VO testc3Node2VO = (Node2VO) iterator.next();
            Node2VO testc4Node2VO = (Node2VO) iterator.next();

            log.info("testc1Node2VO.getIdNode2() = "+testc1Node2VO.getIdNode2());
            assertEquals("testc1Node2VO.getIdNode2 is expected to be node2-c1", "node2-c1",testc1Node2VO.getIdNode2());

            Node21VO testc11Node21VO = testc1Node2VO.getNode21VO();

            log.info("testc11Node21VO.getIdNode21() = "+testc11Node21VO.getIdNode21());
            assertEquals("testc11Node21VO.getIdNode21() is expected to be node21-c11", "node21-c11",testc11Node21VO.getIdNode21());

            Collection testc11Node21Node211VOs = testc11Node21VO.getNode211VOs();
            log.info("testc11Node21Node211VOs.size() = " + testc11Node21Node211VOs.size());
            assertEquals("testc11Node21Node221VOs.size() is expected to be 2", 2, testc11Node21Node211VOs.size());

            iterator = testc11Node21Node211VOs.iterator();
            Node211VO testc111Node211VO = (Node211VO) iterator.next();
            Node211VO testc112Node211VO = (Node211VO) iterator.next();

            log.info("testc111Node211VO.getIdNode211() = "+testc111Node211VO.getIdNode211());
            assertEquals("testc111Node211VO.getIdNode211() is expected to be node211-c111", "node211-c111",testc111Node211VO.getIdNode211());

            log.info("testc112Node211VO.getIdNode211() = "+testc112Node211VO.getIdNode211());
            assertEquals("testc112Node211VO.getIdNode211() is expected to be node211-c112", "node211-c112",testc112Node211VO.getIdNode211());

            Collection testc1Node2Node22VOs = testc1Node2VO.getNode22VOs();
            log.info("testc1Node2Node22VOs.size() = " + testc1Node2Node22VOs.size());
            assertEquals("testc1Node2Node22VOs.size() is expected to be 1", 1, testc1Node2Node22VOs.size());

            iterator = testc1Node2Node22VOs.iterator();
            Node22VO testc11Node22VO = (Node22VO) iterator.next();

            log.info("testc11Node22VO.getIdNode22() = "+testc11Node22VO.getIdNode22());
            assertEquals("testc11Node22VO.getIdNode22() is expected to be node22-c11", "node22-c11",testc11Node22VO.getIdNode22());

            Collection testc11Node22Node221VOs = testc11Node22VO.getNode221VOs();
            log.info("testc11Node22Node221VOs.size() = " + testc11Node22Node221VOs.size());
            assertEquals("testc11Node22Node221VOs.size() is expected to be 2", 2, testc11Node22Node221VOs.size());

            iterator = testc11Node22Node221VOs.iterator();
            Node221VO testc111Node221VO = (Node221VO) iterator.next();
            Node221VO testc112Node221VO = (Node221VO) iterator.next();

            log.info("testc111Node221VO.getIdNode221() = "+testc111Node221VO.getIdNode221());
            assertEquals("testc111Node221VO.getIdNode221() is expected to be node221-c111", "node221-c111",testc111Node221VO.getIdNode221());

            log.info("testc112Node221VO.getIdNode221() = "+testc112Node221VO.getIdNode221());
            assertEquals("testc112Node221VO.getIdNode221() is expected to be node221-c112", "node221-c112",testc112Node221VO.getIdNode221());


            log.info("testc2Node2VO.getIdNode2() = "+testc2Node2VO.getIdNode2());
            assertEquals("testc2Node2VO.getIdNode2 is expected to be node2-c2", "node2-c2",testc2Node2VO.getIdNode2());
            log.info("testc2Node2VO.getIdNode21() = "+ testc2Node2VO.getIdNode21());
            assertEquals("testc2Node2VO.getIdNode21() is expected to be copy-node21-c21", "copy-node21-c21", testc2Node2VO.getIdNode21());
            log.info("testc2Node2VO.getDescription() = "+ testc2Node2VO.getDescription());
            assertNull("testc2Node2VO.getDescription() is expected to be null", testc2Node2VO.getDescription());
            log.info("testc2Node2VO.getNote2() = "+ testc2Node2VO.getNote2());
            if(checkNote)  assertNull(" testc2Node2VO.getNote2() is expected to be null",  testc2Node2VO.getNote2());

            Node21VO testc21Node21VO = testc2Node2VO.getNode21VO();

            log.info("testc21Node21VO.getIdNode21() = "+testc21Node21VO.getIdNode21());
            assertEquals("testc21Node21VO.getIdNode21 is expected to be copy-node21-c21", "copy-node21-c21",testc21Node21VO.getIdNode21());
            log.info("testc21Node21VO.getDescription() = "+ testc21Node21VO.getDescription());
            assertEquals("testc21Node21VO.getDescription() is expected to be description copy-node21-c21", "description copy-node21-c21",testc21Node21VO.getDescription());
            log.info("testc21Node21VO.getNote21() = "+ testc21Node21VO.getNote21());
            if(checkNote)  assertEquals("testc21Node21VO.getNote21() is expected to be created note21","created note21", testc21Node21VO.getNote21());




            Collection testc2Node2Node22VOs = testc2Node2VO.getNode22VOs();
            log.info("testc2Node2Node22VOs.size() = " + testc2Node2Node22VOs.size());
            assertEquals("testc2Node2Node22VOs.size() is expected to be 2", 2, testc2Node2Node22VOs.size());

            iterator = testc2Node2Node22VOs.iterator();

            Node22VO testc21Node22VO = (Node22VO) iterator.next();
            Node22VO testc22Node22VO = (Node22VO) iterator.next();

            log.info("testc21Node22VO.getIdNode22() = "+testc21Node22VO.getIdNode22());
            assertEquals("testc21Node22VO.getIdNode22() is expected to be node22-c21", "node22-c21",testc21Node22VO.getIdNode22());

            Collection testc21Node22Node221VOs = testc21Node22VO.getNode221VOs();
            log.info("testc21Node22Node221VOs.size() = " + testc21Node22Node221VOs.size());
            assertEquals("testc21Node22Node221VOs.size() is expected to be 1", 1, testc21Node22Node221VOs.size());

            iterator = testc21Node22Node221VOs.iterator();

            Node221VO testc211Node221VO = (Node221VO) iterator.next();

            log.info("testc211Node221VO.getIdNode221() = "+testc211Node221VO.getIdNode221());
            assertEquals("testc211Node221VO.getIdNode221() is expected to be node221-c211", "node221-c211",testc211Node221VO.getIdNode221());

            log.info("testc22Node22VO.getIdNode22() = "+testc22Node22VO.getIdNode22());
            assertEquals("testc22Node22VO.getIdNode22() is expected to be node22-c22", "node22-c22",testc22Node22VO.getIdNode22());

            if(testc22Node22VO.getNode221VOs()!=null){
                log.info("testc21Node12VO.getNode122VOs().size() = " + testc22Node22VO.getNode221VOs().size());
                assertEquals("testc22Node22VO.getNode221VOs().size() is expected to be 0", 0, testc22Node22VO.getNode221VOs().size());
            }  else{
                Assert.assertNull("testc22Node22VO.getNode221VOs() is expected to be null",testc22Node22VO.getNode221VOs());
            }


            log.info("testc3Node2VO.getIdNode2() = "+testc3Node2VO.getIdNode2());
            assertEquals("testc3Node2VO.getIdNode2() is expected to be node2-c3", "node2-c3",testc3Node2VO.getIdNode2());

            Node21VO testc31Node21VO = testc3Node2VO.getNode21VO();

            log.info("testc31Node21VO.getIdNode21() = "+testc31Node21VO.getIdNode21());
            assertEquals("testc31Node21VO.getIdNode21() is expected to be node21-c31", "node21-c31",testc31Node21VO.getIdNode21());

            Collection testc31Node21Node211VOs = testc31Node21VO.getNode211VOs();
            log.info("testc31Node21Node211VOs.size() = " + testc31Node21Node211VOs.size());
            assertEquals("testc31Node21Node211VOs.size() is expected to be 2", 2, testc31Node21Node211VOs.size());

            iterator = testc31Node21Node211VOs.iterator();

            Node211VO testc311Node211VO = (Node211VO) iterator.next();
            Node211VO testc312Node211VO = (Node211VO) iterator.next();

            log.info("testc311Node211VO.getIdNode211() = "+testc311Node211VO.getIdNode211());
            assertEquals("testc311Node211VO.getIdNode211() is expected to be node211-c311", "node211-c311",testc311Node211VO.getIdNode211());

            log.info("testc312Node211VO.getIdNode211() = "+testc312Node211VO.getIdNode211());
            assertEquals("testc312Node211VO.getIdNode211() is expected to be node211-c312", "node211-c312",testc312Node211VO.getIdNode211());

            Collection testc3Node2Node22VOs = testc3Node2VO.getNode22VOs();
            log.info("testc3Node2Node22VOs.size() = " + testc3Node2Node22VOs.size());
            assertEquals("testc3Node2Node22VOs.size() is expected to be 2", 2, testc3Node2Node22VOs.size());

            iterator = testc3Node2Node22VOs.iterator();

            Node22VO testc31Node22VO = (Node22VO) iterator.next();
            Node22VO testc32Node22VO = (Node22VO) iterator.next();

            log.info("testc31Node22VO.getIdNode22() = "+testc31Node22VO.getIdNode22());
            assertEquals("testc31Node22VO.getIdNode22() is expected to be node22-c31", "node22-c31",testc31Node22VO.getIdNode22() );

            Collection testc31Node22Node221VOs = testc31Node22VO.getNode221VOs();
            log.info("testc31Node22Node221VOs.size() = " + testc31Node22Node221VOs.size());
            assertEquals("testc31Node22Node221VOs.size() is expected to be 3", 3, testc31Node22Node221VOs.size());

            iterator = testc31Node22Node221VOs.iterator();

            Node221VO testc311Node221VO = (Node221VO) iterator.next();
            Node221VO testc312Node221VO = (Node221VO) iterator.next();
            Node221VO testc313Node221VO = (Node221VO) iterator.next();

            log.info("testc311Node221VO.getIdNode221() = "+testc311Node221VO.getIdNode221());
            assertEquals("testc311Node221VO.getIdNode221() is expected to be node221-c311", "node221-c311",testc311Node221VO.getIdNode221());

            log.info("testc312Node221VO.getIdNode221() = "+testc312Node221VO.getIdNode221());
            assertEquals("testc312Node221VO.getIdNode221() is expected to be node221-c312", "node221-c312",testc312Node221VO.getIdNode221());

            log.info("testc313Node221VO.getIdNode221() = "+testc313Node221VO.getIdNode221());
            assertEquals("testc313Node221VO.getIdNode221() is expected to be node221-c313", "node221-c313",testc313Node221VO.getIdNode221());

            log.info("testc32Node22VO.getIdNode22() = "+testc32Node22VO.getIdNode22());
            assertEquals("testc32Node22VO.getIdNode22() is expected to be node22-c32", "node22-c32",testc32Node22VO.getIdNode22() );



            Collection testc32Node22Node221VOs = testc32Node22VO.getNode221VOs();
            log.info("testc32Node22Node221VOs.size() = " + testc32Node22Node221VOs.size());
            assertEquals("testc32Node22Node221VOs.size() is expected to be 3", 3, testc32Node22Node221VOs.size());

            iterator = testc32Node22Node221VOs.iterator();

            Node221VO testc321Node221VO = (Node221VO) iterator.next();
            Node221VO testc322Node221VO = (Node221VO) iterator.next();
            Node221VO testc323Node221VO = (Node221VO) iterator.next();

            log.info("testc321Node221VO.getIdNode221() = "+testc321Node221VO.getIdNode221());
            assertEquals("testc321Node221VO.getIdNode221() is expected to be node221-c321", "node221-c321",testc321Node221VO.getIdNode221());

            log.info("testc322Node221VO.getIdNode221() = "+testc322Node221VO.getIdNode221());
            assertEquals("testc322Node221VO.getIdNode221() is expected to be node221-c322", "node221-c322",testc322Node221VO.getIdNode221());

            log.info("testc323Node221VO.getIdNode221() = "+testc323Node221VO.getIdNode221());
            assertEquals("testc323Node221VO.getIdNode221() is expected to be node221-c323", "node221-c323",testc323Node221VO.getIdNode221());



            //testc4Node2VO
            log.info("testc4Node2VO.getIdNode2() = "+testc4Node2VO.getIdNode2());
            assertEquals("testc4Node2VO.getIdNode2 is expected to be copy-node2-c4", "copy-node2-c4",testc4Node2VO.getIdNode2());
            log.info("testc4Node2VO.getIdNode21() = "+ testc4Node2VO.getIdNode21());
            assertEquals("testc4Node2VO.getIdNode21() is expected to be copy-node21-c41", "copy-node21-c41", testc4Node2VO.getIdNode21());
            log.info("testc4Node2VO.getDescription() = "+ testc4Node2VO.getDescription());
            assertEquals("testc4Node2VO.getDescription() is expected to be description copy-node2-c4","description copy-node2-c4", testc4Node2VO.getDescription());
            log.info("testc4Node2VO.getNote2() = "+ testc4Node2VO.getNote2());
            if(checkNote)  assertEquals(" testc4Node2VO.getNote2() is expected to be created note2","created note2",  testc4Node2VO.getNote2());

            Node21VO testc41Node21VO = testc4Node2VO.getNode21VO();
            log.info("testc41Node21VO.getIdNode21() = "+ testc41Node21VO.getIdNode21());
            assertEquals("testc41Node21VO.getIdNode21() is expected to be copy-node21-c41", "copy-node21-c41", testc41Node21VO.getIdNode21());
            log.info("testc41Node21VO.getDescription() = "+ testc41Node21VO.getDescription());
            assertEquals("testc41Node21VO.getDescription() is expected to be description copy-node21-c4","description copy-node21-c4", testc41Node21VO.getDescription());
            log.info("testc41Node21VO.getNote2() = "+ testc41Node21VO.getNote21());
            if(checkNote)  assertEquals(" testc41Node21VO.getNote2() is expected to be created note21","created note21",  testc41Node21VO.getNote21());

            Collection<Node211VO> testc41Node21Node211VOs = testc41Node21VO.getNode211VOs();
            log.info("testc41Node21Node211VOs.size() = " + testc41Node21Node211VOs.size());
            assertEquals("testc41Node21Node211VOs.size() is expected to be 2", 2, testc41Node21Node211VOs.size());
            Iterator<Node211VO> testc41Node21Node211VOsIterator =testc41Node21Node211VOs.iterator();

            Node211VO   testc411Node211VO = testc41Node21Node211VOsIterator.next();
            Node211VO   testc412Node211VO = testc41Node21Node211VOsIterator.next();


            log.info("testc411Node211VO.getIdNode211() = "+testc411Node211VO.getIdNode211());
            assertEquals("testc411Node211VO.getIdNode211() is expected to be copy-node211-c411", "copy-node211-c411",testc411Node211VO.getIdNode211());
            log.info("testc411Node211VO.getIdNode21() = "+ testc411Node211VO.getIdNode21());
            assertEquals("testc411Node211VO.getIdNode21() is expected to be copy-node21-c41", "copy-node21-c41", testc411Node211VO.getIdNode21());
            log.info("testc411Node211VO.getDescription() = "+ testc411Node211VO.getDescription());
            assertEquals("testc411Node211VO.getDescription() is expected to be description copy-node211-c411","description copy-node211-c411", testc411Node211VO.getDescription());
            log.info("testc411Node211VO.getNote211() = "+ testc411Node211VO.getNote211());
            if(checkNote)  assertEquals(" testc411Node211VO.getNote211() is expected to be created note211","created note211",  testc411Node211VO.getNote211());

            log.info("testc412Node211VO.getIdNode211() = "+testc412Node211VO.getIdNode211());
            assertEquals("testc412Node211VO.getIdNode211() is expected to be copy-node211-c412", "copy-node211-c412",testc412Node211VO.getIdNode211());
            log.info("testc412Node211VO.getIdNode21() = "+ testc412Node211VO.getIdNode21());
            assertEquals("testc412Node211VO.getIdNode21() is expected to be copy-node21-c41", "copy-node21-c41", testc412Node211VO.getIdNode21());
            log.info("testc412Node211VO.getDescription() = "+ testc412Node211VO.getDescription());
            assertEquals("testc412Node211VO.getDescription() is expected to be description copy-node211-c412","description copy-node211-c412", testc412Node211VO.getDescription());
            log.info("testc412Node211VO.getNote211() = "+ testc412Node211VO.getNote211());
            if(checkNote)  assertEquals(" testc412Node211VO.getNote211() is expected to be created note211","created note211",  testc412Node211VO.getNote211());




            Node3VO testc1Node3VO = testcRootVO.getNode3VO();


            log.info("testc1Node3VO.getIdNode3() = "+testc1Node3VO.getIdNode3());
            assertEquals("testc1Node3VO.getIdNode3() is expected to be node3-c1", "node3-c1",testc1Node3VO.getIdNode3());
            log.info("testc1Node3VO.getDescription() = "+ testc1Node3VO.getDescription());
            assertNull("testc1Node3VO.getDescription() is expected to be null", testc1Node3VO.getDescription());
            log.info("testc1Node3VO.getNote3() = "+ testc1Node3VO.getNote3());
            if(checkNote)  assertNull(" testc1Node3VO.getNote3() is expected to be null",  testc1Node3VO.getNote3());

            Collection testc1Node3Node31VOs =  testc1Node3VO.getNode31VOs();
            log.info("testc1Node3Node31VOs.size() = " + testc1Node3Node31VOs.size());
            assertEquals("testc1Node3Node31VOs.size() is expected to be 3", 3, testc1Node3Node31VOs.size());

            iterator = testc1Node3Node31VOs.iterator();

            Node31VO testc11Node31VO = (Node31VO) iterator.next();
            Node31VO testc12Node31VO = (Node31VO) iterator.next();
            Node31VO testc13Node31VO = (Node31VO) iterator.next();


            log.info("testc11Node31VO.getIdNode31() = "+testc11Node31VO.getIdNode31());
            assertEquals("testc11Node31VO.getIdNode31() is expected to be node31-c11", "node31-c11",testc11Node31VO.getIdNode31());
            log.info("testc11Node31VO.getDescription() = "+ testc11Node31VO.getDescription());
            assertNull("testc11Node31VO.getDescription() is expected to be null", testc11Node31VO.getDescription());
            log.info("testc11Node31VO.getNote31() = "+ testc11Node31VO.getNote31());
            if(checkNote)  assertNull(" testc11Node31VO.getNote31() is expected to be null",  testc11Node31VO.getNote31());

            Collection<Node311VO> testc11Node31Node311VOs = testc11Node31VO.getNode311VOs();
            log.info("testc11Node31Node311VOs.size() = " + testc11Node31Node311VOs.size());
            assertEquals("testc11Node31Node311VOs.size() is expected to be 1", 1, testc11Node31Node311VOs.size());

            Node311VO  testc111Node311VO = testc11Node31Node311VOs.iterator().next();

            log.info("testc111Node311VO.getIdNode311() = "+testc111Node311VO.getIdNode311());
            assertEquals("testc111Node311VO.getIdNode311() is expected to be copy-node311-c111", "copy-node311-c111",testc111Node311VO.getIdNode311());
            log.info("testc111Node311VO.getIdNode31() = "+testc111Node311VO.getIdNode31());
            assertEquals("testc111Node311VO.getIdNode31() is expected to be node31-c11", "node31-c11",testc111Node311VO.getIdNode31());
            log.info("testc111Node311VO.getDescription() = "+ testc111Node311VO.getDescription());
            assertEquals("testc111Node311VO.getDescription() is expected to be description copy-node311-c111","description copy-node311-c111", testc111Node311VO.getDescription());
            log.info("testc111Node311VO.getNote311() = "+ testc111Node311VO.getNote311());
            if(checkNote)  assertEquals(" testc111Node311VO.getNote311() is expected to be created note311","created note311",  testc111Node311VO.getNote311());

            Collection<Node3111VO> testc111Node311Node3111VOs = testc111Node311VO.getNode3111VOs();
            log.info("testc111Node311Node3111VOs.size() = " + testc111Node311Node3111VOs.size());
            assertEquals("testc111Node311Node3111VOs.size() is expected to be 1", 1, testc111Node311Node3111VOs.size());

            Node3111VO  testc1111Node3111VO = testc111Node311Node3111VOs.iterator().next();
            log.info("testc1111Node3111VO.getIdNode3111() = "+testc1111Node3111VO.getIdNode3111());
            assertEquals("testc1111Node3111VO.getIdNode3111() is expected to be copy-node3111-c1111", "copy-node3111-c1111",testc1111Node3111VO.getIdNode3111());
            log.info("testc1111Node3111VO.getDescription() = "+ testc1111Node3111VO.getDescription());
            assertEquals("testc1111Node3111VO.getDescription() is expected to be description copy-node3111-c1111","description copy-node3111-c1111", testc1111Node3111VO.getDescription());
            log.info("testc1111Node3111VO.getNote3111() = "+ testc1111Node3111VO.getNote3111());
            if(checkNote)  assertEquals(" testc1111Node3111VO.getNote3111() is expected to be created note3111","created note3111",  testc1111Node3111VO.getNote3111());

            log.info("testc12Node31VO.getIdNode31() = "+testc12Node31VO.getIdNode31());
            assertEquals("testc12Node31VO.getIdNode31() is expected to be node31-c12", "node31-c12",testc12Node31VO.getIdNode31());

            Collection testc12Node31Node311VOs =  testc12Node31VO.getNode311VOs();
            log.info("testc12Node31Node311VOs.size() = " + testc12Node31Node311VOs.size());
            assertEquals("testc12Node31Node311VOs.size() is expected to be 2", 2, testc12Node31Node311VOs.size());

            iterator = testc12Node31Node311VOs.iterator();

            Node311VO testc121Node311VO = (Node311VO) iterator.next();
            Node311VO testc122Node311VO = (Node311VO) iterator.next();

            log.info("testc121Node311VO.getIdNode311() = "+testc121Node311VO.getIdNode311());
            assertEquals("testc121Node311VO.getIdNode311() is expected to be node311-c121", "node311-c121",testc121Node311VO.getIdNode311());

            Collection testc121Node311Node3111VOs =  testc121Node311VO.getNode3111VOs();
            log.info("testc121Node311Node3111VOs.size() = " + testc121Node311Node3111VOs.size());
            assertEquals("testc121Node311Node3111VOs.size() is expected to be 3", 3, testc121Node311Node3111VOs.size());

            iterator = testc121Node311Node3111VOs.iterator();
            Node3111VO testc1211Node3111VO = (Node3111VO) iterator.next();
            Node3111VO testc1212Node3111VO = (Node3111VO) iterator.next();
            Node3111VO testc1213Node3111VO = (Node3111VO) iterator.next();

            log.info("testc1211Node3111VO.getIdNode3111() = "+testc1211Node3111VO.getIdNode3111());
            assertEquals("testc1211Node3111VO.getIdNode3111() is expected to be node3111-c1211", "node3111-c1211",testc1211Node3111VO.getIdNode3111());

            log.info("testc1212Node3111VO.getIdNode3111() = "+testc1212Node3111VO.getIdNode3111());
            assertEquals("testc1212Node3111VO.getIdNode3111() is expected to be node3111-c1212", "node3111-c1212",testc1212Node3111VO.getIdNode3111());

            log.info("testc1213Node3111VO.getIdNode3111() = "+testc1213Node3111VO.getIdNode3111());
            assertEquals("testc1213Node3111VO.getIdNode3111() is expected to be node3111-c1213", "node3111-c1213",testc1213Node3111VO.getIdNode3111());

            Collection testc121Node311Node3112VOs =  testc121Node311VO.getNode3112VOs();
            log.info("testc121Node311Node3112VOs.size() = " + testc121Node311Node3112VOs.size());
            assertEquals("testc121Node311Node3112VOs.size() is expected to be 2", 2, testc121Node311Node3112VOs.size());

            iterator = testc121Node311Node3112VOs.iterator();
            Node3112VO testc1211Node3112VO = (Node3112VO) iterator.next();
            Node3112VO testc1212Node3112VO = (Node3112VO) iterator.next();

            log.info("testc1211Node3112VO.getIdNode3112() = "+testc1211Node3112VO.getIdNode3112());
            assertEquals("testc1211Node3112VO.getIdNode3112() is expected to be node3112-c1211", "node3112-c1211",testc1211Node3112VO.getIdNode3112());

            log.info("testc1212Node3112VO.getIdNode3112() = "+testc1212Node3112VO.getIdNode3112());
            assertEquals("testc1212Node3112VO.getIdNode3112() is expected to be node3112-c1212", "node3112-c1212",testc1212Node3112VO.getIdNode3112());

            log.info("testc122Node311VO.getIdNode311() = "+testc122Node311VO.getIdNode311());
            assertEquals("testc122Node311VO.getIdNode311() is expected to be node311-c122", "node311-c122",testc122Node311VO.getIdNode311());

            if(testc122Node311VO.getNode3111VOs()!=null){
                log.info("testc11Node31VO.getNode311VOs().size() = " + testc122Node311VO.getNode3111VOs().size());
                assertEquals("testc122Node311VO.getNode3111VOs().size() is expected to be 0", 0, testc122Node311VO.getNode3111VOs().size());
            }  else{
                Assert.assertNull("testc122Node311VO.getNode3111VOs() is expeceted to be null ",testc122Node311VO.getNode3111VOs());
            }


            Collection testc122Node311Node3112VOs =  testc122Node311VO.getNode3112VOs();
            log.info("testc122Node311Node3112VOs.size() = " + testc122Node311Node3112VOs.size());
            assertEquals("testc122Node311Node3112VOs.size() is expected to be 1 ", 1, testc122Node311Node3112VOs.size());

            iterator = testc122Node311Node3112VOs.iterator();
            Node3112VO testc1221Node3112VO = (Node3112VO) iterator.next();

            log.info("testc1221Node3112VO.getIdNode3112() = "+testc1221Node3112VO.getIdNode3112());
            assertEquals("testc1221Node3112VO.getIdNode3112() is expected to be node3112-c1221", "node3112-c1221",testc1221Node3112VO.getIdNode3112());

            log.info("testc13Node31VO.getIdNode31() = "+testc13Node31VO.getIdNode31());
            assertEquals("testc13Node31VO.getIdNode31() is expected to be node31-c13", "node31-c13",testc13Node31VO.getIdNode31());

            Collection testc13Node31Node311VOs =  testc13Node31VO.getNode311VOs();
            log.info("testc13Node31Node311VOs.size() = " + testc13Node31Node311VOs.size());
            assertEquals("testc13Node31Node311VOs.size() is expected to be 1 ", 1, testc13Node31Node311VOs.size());

            iterator = testc13Node31Node311VOs.iterator();

            Node311VO testc131Node311VO = (Node311VO) iterator.next();

            log.info("testc131Node311VO.getIdNode311() = "+testc131Node311VO.getIdNode311());
            assertEquals("testc131Node311VO.getIdNode311() is expected to be node311-c131", "node311-c131",testc131Node311VO.getIdNode311());

            Collection testc131Node311Node3111VOs =  testc131Node311VO.getNode3111VOs();
            log.info("testc131Node311Node3111VOs.size() = " + testc131Node311Node3111VOs.size());
            assertEquals("testc131Node311Node3111VOs.size() is expected to be 2", 2, testc131Node311Node3111VOs.size());

            iterator = testc131Node311Node3111VOs.iterator();
            Node3111VO testc1311Node3111VO = (Node3111VO) iterator.next();
            Node3111VO testc1312Node3111VO = (Node3111VO) iterator.next();

            log.info("testc1311Node3111VO.getIdNode3111() = "+testc1311Node3111VO.getIdNode3111());
            assertEquals("testc1311Node3111VO.getIdNode3111() is expected to be node3111-c1311", "node3111-c1311",testc1311Node3111VO.getIdNode3111());

            log.info("testc1312Node3111VO.getIdNode3111() = "+testc1312Node3111VO.getIdNode3111());
            assertEquals("testc1312Node3111VO.getIdNode3111() is expected to be node3111-c1312", "node3111-c1312",testc1312Node3111VO.getIdNode3111());

            if(testc131Node311VO.getNode3112VOs()!=null){
                log.info("testc131Node311VO.getNode3112VOs().size() = " + testc131Node311VO.getNode3112VOs().size());
                assertEquals("testc131Node311VO.getNode3112VOs().size() is expected to be 0", 0, testc131Node311VO.getNode3112VOs().size());
            }  else{
                Assert.assertNull("testc131Node311VO.getNode3112VOs() is expected to be null",testc131Node311VO.getNode3112VOs());
            }

            /*
            CopyNode32VO c11CopyNode32VO = new CopyNode32VO();
            c11CopyNode32VO.setIdCopyNode32("copy-node32-c11");
            c11CopyNode32VO.setDescription("description copy-node32-c11");

            c1Node3Node32VOs.add(c11CopyNode32VO) ;

            c1CopyNode3VO.setCopyNode32VOs(c1Node3Node32VOs);

            cCopyRootVO.setCopyNode3VO(c1CopyNode3VO);
             */










            Collection testc1Node3Node32VOs =  testc1Node3VO.getNode32VOs();
            log.info("testc1Node3Node32VOs.size() = " + testc1Node3Node32VOs.size());
            assertEquals("testc1Node3Node32VOs.size() is expected to be 2", 2, testc1Node3Node32VOs.size());

            iterator = testc1Node3Node32VOs.iterator();

            Node32VO testc11Node32VO = (Node32VO) iterator.next();
            Node32VO testc12Node32VO = (Node32VO) iterator.next();

            log.info("testc11Node32VO.getIdNode32() = "+testc11Node32VO.getIdNode32());
            assertEquals("testc11Node32VO.getIdNode32() is expected to be node32-c11", "node32-c11",testc11Node32VO.getIdNode32());

            Node321VO testc111Node321VO = testc11Node32VO.getNode321VO();

            log.info("testc111Node321VO.getIdNode321() = "+testc111Node321VO.getIdNode321());
            assertEquals("testc111Node321VO.getIdNode321() is expected to be node321-c111", "node321-c111",testc111Node321VO.getIdNode321());

            Collection testc11Node32Node322VOs =  testc11Node32VO.getNode322VOs();
            log.info("testc11Node32Node322VOs.size() = " + testc11Node32Node322VOs.size());
            assertEquals("testc11Node32Node322VOs.size() is expected to be 2", 2, testc11Node32Node322VOs.size());

            iterator = testc11Node32Node322VOs.iterator();

            Node322VO testc111Node322VO = (Node322VO) iterator.next();
            Node322VO testc112Node322VO = (Node322VO) iterator.next();

            log.info("testc111Node322VO.getIdNode322() = "+testc111Node322VO.getIdNode322());
            assertEquals("testc111Node322VO.getIdNode322() is expected to be node3212-c111", "node322-c111",testc111Node322VO.getIdNode322());

            log.info("testc112Node322VO.getIdNode322() = "+testc112Node322VO.getIdNode322());
            assertEquals("testc112Node322VO.getIdNode322() is expected to be node3212-c112", "node322-c112",testc112Node322VO.getIdNode322());

            log.info("testc12Node32VO.getIdNode32() = "+testc12Node32VO.getIdNode32());
            assertEquals("testc12Node32VO.getIdNode32() is expected to be node32-c12", "node32-c12",testc12Node32VO.getIdNode32());

            Assert.assertNull("testc12Node32VO.getNode321VO() is expected to be null",testc12Node32VO.getNode321VO());

            if(testc12Node32VO.getNode322VOs()!=null){
                log.info("testc12Node32VO.getNode322VOs().size() = " + testc12Node32VO.getNode322VOs().size());
                assertEquals("testc12Node32VO.getNode322VOs().size() is expected to be 0", 0, testc12Node32VO.getNode322VOs().size());
            }  else{
                Assert.assertNull("testc12Node32VO.getNode322VOs) is expected to be null",testc12Node32VO.getNode322VOs());
            }



            Node33VO testc11Node33VO = testc1Node3VO.getNode33VO();
            log.info("testc11Node33VO.getIdNode33() = "+testc11Node33VO.getIdNode33());
            assertEquals("testc11Node33VO.getIdNode33() is expected to be node33-c11", "node33-c11",testc11Node33VO.getIdNode33());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkRootVO(RootVO testcRootVO, boolean  checkNote):"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkRootVO(RootVO testcRootVO, boolean  checkNote)**************************");
    }


    private ArrayList<String> buildSourceTreePaths() throws Exception{
        ArrayList<String> sourceTreePaths = new ArrayList<String>();
        log.info("************Entering the "+getThisClassName()+".buildSourceTreePaths() ***************");
        try{
            sourceTreePaths.add("copyNode1VOs.copyNode11VO.copyNode111VOs");
            sourceTreePaths.add("copyNode1VOs.copyNode12VOs.copyNode121VO");
            sourceTreePaths.add("copyNode1VOs.copyNode12VOs.copyNode122VOs");
            sourceTreePaths.add("copyNode2VOs.copyNode21VO.copyNode211VOs");
            sourceTreePaths.add("copyNode2VOs.copyNode22VOs.copyNode221VOs");
            sourceTreePaths.add("copyNode3VO.copyNode31VOs.copyNode311VOs.copyNode3111VOs");
            sourceTreePaths.add("copyNode3VO.copyNode31VOs.copyNode311VOs.copyNode3112VOs");
            sourceTreePaths.add("copyNode3VO.copyNode32VOs.copyNode321VO");
            sourceTreePaths.add("copyNode3VO.copyNode32VOs.copyNode322VOs");
            sourceTreePaths.add("copyNode3VO.copyNode33VO");

        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildSourceTreePaths() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildSourceTreePaths() **************");
        return sourceTreePaths;
    }

    private ArrayList<String> buildTargetTreePaths() throws Exception{
        ArrayList<String> targetTreePaths = new ArrayList<String>();
        log.info("************Entering the "+getThisClassName()+".buildTargetTreePaths() ***************");
        try{

            targetTreePaths.add("node1VOs.node11VO.node111VOs");
            targetTreePaths.add("node1VOs.node12VOs.node121VO");
            targetTreePaths.add("node1VOs.node12VOs.node122VOs");
            targetTreePaths.add("node2VOs.node21VO.node211VOs");
            targetTreePaths.add("node2VOs.node22VOs.node221VOs");
            targetTreePaths.add("node3VO.node31VOs.node311VOs.node3111VOs");
            targetTreePaths.add("node3VO.node31VOs.node311VOs.node3112VOs");
            targetTreePaths.add("node3VO.node32VOs.node321VO");
            targetTreePaths.add("node3VO.node32VOs.node322VOs");
            targetTreePaths.add("node3VO.node33VO");

        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildTargetTreePaths() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildTargetTreePaths() **************");
        return targetTreePaths;
    }


    protected Collection<String[][]> buildTreeNodeSourcePAttributeNames() throws Exception{
        Collection<String[][]> treeNodeSourcePAttributeNames = new ArrayList<String[][]>();
        log.info("************Entering the "+getThisClassName()+".buildTreeNodeSourcePAttributeNames() ***************");
        try{
            String[][] nodeSourcePAttributeNames1 = new String[3][];
            nodeSourcePAttributeNames1[0] = new String[]{"idCopyNode1","description"};
            nodeSourcePAttributeNames1[1] = new String[]{"idCopyNode11","description"};
            nodeSourcePAttributeNames1[2] = new String[]{"idCopyNode111","description"};
            String[][] nodeSourcePAttributeNames2 = new String[3][];
            nodeSourcePAttributeNames2[0] = new String[]{"idCopyNode1","description"};
            nodeSourcePAttributeNames2[1] = new String[]{"idCopyNode12","description"};
            nodeSourcePAttributeNames2[2] = new String[]{"idCopyNode121","description"};
            String[][] nodeSourcePAttributeNames3 = new String[3][];
            nodeSourcePAttributeNames3[0] = new String[]{"idCopyNode1","description"};
            nodeSourcePAttributeNames3[1] = new String[]{"idCopyNode12","description"};
            nodeSourcePAttributeNames3[2] = new String[]{"idCopyNode122","description"};
            String[][] nodeSourcePAttributeNames4 = new String[3][];
            nodeSourcePAttributeNames4[0] = new String[]{"idCopyNode2","description"};
            nodeSourcePAttributeNames4[1] = new String[]{"idCopyNode21","description"};
            nodeSourcePAttributeNames4[2] = new String[]{"idCopyNode211","description"};
            String[][] nodeSourcePAttributeNames5 = new String[3][];
            nodeSourcePAttributeNames5[0] = new String[]{"idCopyNode2","description"};
            nodeSourcePAttributeNames5[1] = new String[]{"idCopyNode22","description"};
            nodeSourcePAttributeNames5[2] = new String[]{"idCopyNode221","description"};
            String[][] nodeSourcePAttributeNames6 = new String[4][];
            nodeSourcePAttributeNames6[0] = new String[]{"idCopyNode3","description"};
            nodeSourcePAttributeNames6[1] = new String[]{"idCopyNode31","description"};
            nodeSourcePAttributeNames6[2] = new String[]{"idCopyNode311","description"};
            nodeSourcePAttributeNames6[3] = new String[]{"idCopyNode3111","description"};
            String[][] nodeSourcePAttributeNames7 = new String[4][];
            nodeSourcePAttributeNames7[0] = new String[]{"idCopyNode3","description"};
            nodeSourcePAttributeNames7[1] = new String[]{"idCopyNode31","description"};
            nodeSourcePAttributeNames7[2] = new String[]{"idCopyNode311","description"};
            nodeSourcePAttributeNames7[3] = new String[]{"idCopyNode3112","description"};
            String[][] nodeSourcePAttributeNames8 = new String[3][];
            nodeSourcePAttributeNames8[0] = new String[]{"idCopyNode3","description"};
            nodeSourcePAttributeNames8[1] = new String[]{"idCopyNode32","description"};
            nodeSourcePAttributeNames8[2] = new String[]{"idCopyNode321","description"};
            String[][] nodeSourcePAttributeNames9 = new String[3][];
            nodeSourcePAttributeNames9[0] = new String[]{"idCopyNode3","description"};
            nodeSourcePAttributeNames9[1] = new String[]{"idCopyNode32","description"};
            nodeSourcePAttributeNames9[2] = new String[]{"idCopyNode322","description"};
            String[][] nodeSourcePAttributeNames10 = new String[2][];
            nodeSourcePAttributeNames10[0] = new String[]{"idCopyNode3","description"};
            nodeSourcePAttributeNames10[1] = new String[]{"idCopyNode33","description"};

            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames1);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames2);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames3);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames4);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames5);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames6);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames7);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames8);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames9);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames10);
        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildTreeNodeSourcePAttributeNames() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildTreeNodeSourcePAttributeNames() **************");
        return treeNodeSourcePAttributeNames;
    }

    private Collection<String[][]> buildTreeNodeTargetPAttributeNames() throws Exception{
        Collection<String[][]> treeNodeTargetPAttributeNames = new ArrayList<String[][]>();
        log.info("************Entering the "+getThisClassName()+".buildTreeNodeTargetPAttributeNames() ***************");
        try{
            String[][] nodeTargetPAttributeNames1 = new String[3][];
            nodeTargetPAttributeNames1[0] = new String[]{"idNode1","description"};
            nodeTargetPAttributeNames1[1] = new String[]{"idNode11","description"};
            nodeTargetPAttributeNames1[2] = new String[]{"idNode111","description"};
            String[][] nodeTargetPAttributeNames2 = new String[3][];
            nodeTargetPAttributeNames2[0] = new String[]{"idNode1","description"};
            nodeTargetPAttributeNames2[1] = new String[]{"idNode12","description"};
            nodeTargetPAttributeNames2[2] = new String[]{"idNode121","description"};
            String[][] nodeTargetPAttributeNames3 = new String[3][];
            nodeTargetPAttributeNames3[0] = new String[]{"idNode1","description"};
            nodeTargetPAttributeNames3[1] = new String[]{"idNode12","description"};
            nodeTargetPAttributeNames3[2] = new String[]{"idNode122","description"};
            String[][] nodeTargetPAttributeNames4 = new String[3][];
            nodeTargetPAttributeNames4[0] = new String[]{"idNode2","description"};
            nodeTargetPAttributeNames4[1] = new String[]{"idNode21","description"};
            nodeTargetPAttributeNames4[2] = new String[]{"idNode211","description"};
            String[][] nodeTargetPAttributeNames5 = new String[3][];
            nodeTargetPAttributeNames5[0] = new String[]{"idNode2","description"};
            nodeTargetPAttributeNames5[1] = new String[]{"idNode22","description"};
            nodeTargetPAttributeNames5[2] = new String[]{"idNode221","description"};
            String[][] nodeTargetPAttributeNames6 = new String[4][];
            nodeTargetPAttributeNames6[0] = new String[]{"idNode3","description"};
            nodeTargetPAttributeNames6[1] = new String[]{"idNode31","description"};
            nodeTargetPAttributeNames6[2] = new String[]{"idNode311","description"};
            nodeTargetPAttributeNames6[3] = new String[]{"idNode3111","description"};
            String[][] nodeTargetPAttributeNames7 = new String[4][];
            nodeTargetPAttributeNames7[0] = new String[]{"idNode3","description"};
            nodeTargetPAttributeNames7[1] = new String[]{"idNode31","description"};
            nodeTargetPAttributeNames7[2] = new String[]{"idNode311","description"};
            nodeTargetPAttributeNames7[3] = new String[]{"idNode3112","description"};
            String[][] nodeTargetPAttributeNames8 = new String[3][];
            nodeTargetPAttributeNames8[0] = new String[]{"idNode3","description"};
            nodeTargetPAttributeNames8[1] = new String[]{"idNode32","description"};
            nodeTargetPAttributeNames8[2] = new String[]{"idNode321","description"};
            String[][] nodeTargetPAttributeNames9 = new String[3][];
            nodeTargetPAttributeNames9[0] = new String[]{"idNode3","description"};
            nodeTargetPAttributeNames9[1] = new String[]{"idNode32","description"};
            nodeTargetPAttributeNames9[2] = new String[]{"idNode322","description"};
            String[][] nodeTargetPAttributeNames10 = new String[2][];
            nodeTargetPAttributeNames10[0] = new String[]{"idNode3","description"};
            nodeTargetPAttributeNames10[1] = new String[]{"idNode33","description"};


            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames1);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames2);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames3);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames4);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames5);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames6);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames7);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames8);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames9);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames10);

        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildTreeNodeTargetPAttributeNames() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildTreeNodeTargetPAttributeNames() **************");
        return treeNodeTargetPAttributeNames;
    }

    private Collection<String[][]> buildTreeNodePAttributeNames() throws Exception{
        Collection<String[][]> treeNodePAttributeNames = new ArrayList<String[][]>();
        log.info("************Entering the "+getThisClassName()+".buildTreeNodePAttributeNames() ***************");
        try{
            String[][] nodePAttributeNames1 = new String[3][];
            nodePAttributeNames1[0] = new String[]{"note1"};
            nodePAttributeNames1[1] = new String[]{"note11"};
            nodePAttributeNames1[2] = new String[]{"note111"};
            String[][] nodePAttributeNames2 = new String[3][];
            nodePAttributeNames2[0] = new String[]{"note1"};
            nodePAttributeNames2[1] = new String[]{"note12"};
            nodePAttributeNames2[2] = new String[]{"note121"};
            String[][] nodePAttributeNames3 = new String[3][];
            nodePAttributeNames3[0] = new String[]{"note1"};
            nodePAttributeNames3[1] = new String[]{"note12"};
            nodePAttributeNames3[2] = new String[]{"note122"};
            String[][] nodePAttributeNames4 = new String[3][];
            nodePAttributeNames4[0] = new String[]{"note2"};
            nodePAttributeNames4[1] = new String[]{"note21"};
            nodePAttributeNames4[2] = new String[]{"note211"};
            String[][] nodePAttributeNames5 = new String[3][];
            nodePAttributeNames5[0] = new String[]{"note2"};
            nodePAttributeNames5[1] = new String[]{"note22"};
            nodePAttributeNames5[2] = new String[]{"note221"};
            String[][] nodePAttributeNames6 = new String[4][];
            nodePAttributeNames6[0] = new String[]{"note3"};
            nodePAttributeNames6[1] = new String[]{"note31"};
            nodePAttributeNames6[2] = new String[]{"note311"};
            nodePAttributeNames6[3] = new String[]{"note3111"};
            String[][] nodePAttributeNames7 = new String[4][];
            nodePAttributeNames7[0] = new String[]{"note3"};
            nodePAttributeNames7[1] = new String[]{"note31"};
            nodePAttributeNames7[2] = new String[]{"note311"};
            nodePAttributeNames7[3] = new String[]{"note3112"};
            String[][] nodePAttributeNames8 = new String[3][];
            nodePAttributeNames8[0] = new String[]{"note3"};
            nodePAttributeNames8[1] = new String[]{"note32"};
            nodePAttributeNames8[2] = new String[]{"note321"};
            String[][] nodePAttributeNames9 = new String[3][];
            nodePAttributeNames9[0] = new String[]{"note3"};
            nodePAttributeNames9[1] = new String[]{"note32"};
            nodePAttributeNames9[2] = new String[]{"note322"};
            String[][] nodePAttributeNames10 = new String[2][];
            nodePAttributeNames10[0] = new String[]{"note3"};
            nodePAttributeNames10[1] = new String[]{"note33"};

            treeNodePAttributeNames.add(nodePAttributeNames1);
            treeNodePAttributeNames.add(nodePAttributeNames2);
            treeNodePAttributeNames.add(nodePAttributeNames3);
            treeNodePAttributeNames.add(nodePAttributeNames4);
            treeNodePAttributeNames.add(nodePAttributeNames5);
            treeNodePAttributeNames.add(nodePAttributeNames6);
            treeNodePAttributeNames.add(nodePAttributeNames7);
            treeNodePAttributeNames.add(nodePAttributeNames8);
            treeNodePAttributeNames.add(nodePAttributeNames9);
            treeNodePAttributeNames.add(nodePAttributeNames10);

        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildTreeNodePAttributeNames() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildTreeNodePAttributeNames() **************");
        return treeNodePAttributeNames;
    }

    private Collection<Object[][]> buildTreeNodeValuesArray() throws Exception{
        Collection<Object[][]> treeNodeValuesArray = new ArrayList<Object[][]>();
        log.info("************Entering the "+getThisClassName()+".buildTreeNodeValuesArray() ***************");
        try{
            Object[][] nodeValuesArray1 = new Object[3][];
            nodeValuesArray1[0] = new Object[]{"created note1"};
            nodeValuesArray1[1] = new Object[]{"created note11"};
            nodeValuesArray1[2] = new Object[]{"created note111"};
            Object[][] nodeValuesArray2 = new Object[3][];
            nodeValuesArray2[0] = new Object[]{"created note1"};
            nodeValuesArray2[1] = new Object[]{"created note12"};
            nodeValuesArray2[2] = new Object[]{"created note121"};
            Object[][] nodeValuesArray3 = new Object[3][];
            nodeValuesArray3[0] = new Object[]{"created note1"};
            nodeValuesArray3[1] = new Object[]{"created note12"};
            nodeValuesArray3[2] = new Object[]{"created note122"};
            Object[][] nodeValuesArray4 = new Object[3][];
            nodeValuesArray4[0] = new Object[]{"created note2"};
            nodeValuesArray4[1] = new Object[]{"created note21"};
            nodeValuesArray4[2] = new Object[]{"created note211"};
            Object[][] nodeValuesArray5 = new Object[3][];
            nodeValuesArray5[0] = new Object[]{"created note2"};
            nodeValuesArray5[1] = new Object[]{"created note22"};
            nodeValuesArray5[2] = new Object[]{"created note221"};
            Object[][] nodeValuesArray6 = new Object[4][];
            nodeValuesArray6[0] = new Object[]{"created note3"};
            nodeValuesArray6[1] = new Object[]{"created note31"};
            nodeValuesArray6[2] = new Object[]{"created note311"};
            nodeValuesArray6[3] = new Object[]{"created note3111"};
            Object[][] nodeValuesArray7 = new Object[4][];
            nodeValuesArray7[0] = new Object[]{"created note3"};
            nodeValuesArray7[1] = new Object[]{"created note31"};
            nodeValuesArray7[2] = new Object[]{"created note311"};
            nodeValuesArray7[3] = new Object[]{"created note3112"};
            Object[][] nodeValuesArray8 = new Object[3][];
            nodeValuesArray8[0] = new Object[]{"created note3"};
            nodeValuesArray8[1] = new Object[]{"created note32"};
            nodeValuesArray8[2] = new Object[]{"created note321"};
            Object[][] nodeValuesArray9 = new Object[3][];
            nodeValuesArray9[0] = new Object[]{"created note3"};
            nodeValuesArray9[1] = new Object[]{"created note32"};
            nodeValuesArray9[2] = new Object[]{"created note322"};
            Object[][] nodeValuesArray10 = new Object[2][];
            nodeValuesArray10[0] = new Object[]{"created note3"};
            nodeValuesArray10[1] = new Object[]{"created note33"};


            treeNodeValuesArray.add(nodeValuesArray1);
            treeNodeValuesArray.add(nodeValuesArray2);
            treeNodeValuesArray.add(nodeValuesArray3);
            treeNodeValuesArray.add(nodeValuesArray4);
            treeNodeValuesArray.add(nodeValuesArray5);
            treeNodeValuesArray.add(nodeValuesArray6);
            treeNodeValuesArray.add(nodeValuesArray7);
            treeNodeValuesArray.add(nodeValuesArray8);
            treeNodeValuesArray.add(nodeValuesArray9);
            treeNodeValuesArray.add(nodeValuesArray10);

        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildTreeNodeValuesArray() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildTreeNodeValuesArray() **************");
        return treeNodeValuesArray;
    }


    private Collection<Collection> buildTreeNodeSourcePAttributeNamesCollection() throws Exception{
        Collection<Collection> treeNodeSourcePAttributeNames = new ArrayList<Collection>();
        log.info("************Entering the "+getThisClassName()+".buildTreeNodeSourcePAttributeNamesCollection() ***************");
        try{
            ArrayList<String[]> nodeSourcePAttributeNames1 = new ArrayList<String[]>();
            nodeSourcePAttributeNames1.add(new String[]{"idCopyNode1","description"});
            nodeSourcePAttributeNames1.add(new String[]{"idCopyNode11","description"});
            nodeSourcePAttributeNames1.add(new String[]{"idCopyNode111","description"});
            ArrayList<String[]> nodeSourcePAttributeNames2 = new ArrayList<String[]>();
            nodeSourcePAttributeNames2.add(new String[]{"idCopyNode1","description"});
            nodeSourcePAttributeNames2.add(new String[]{"idCopyNode12","description"});
            nodeSourcePAttributeNames2.add(new String[]{"idCopyNode121","description"});
            ArrayList<String[]> nodeSourcePAttributeNames3 = new ArrayList<String[]>();
            nodeSourcePAttributeNames3.add(new String[]{"idCopyNode1","description"});
            nodeSourcePAttributeNames3.add(new String[]{"idCopyNode12","description"});
            nodeSourcePAttributeNames3.add(new String[]{"idCopyNode122","description"});
            ArrayList<String[]> nodeSourcePAttributeNames4 = new ArrayList<String[]>();
            nodeSourcePAttributeNames4.add(new String[]{"idCopyNode2","description"});
            nodeSourcePAttributeNames4.add(new String[]{"idCopyNode21","description"});
            nodeSourcePAttributeNames4.add(new String[]{"idCopyNode211","description"});
            ArrayList<String[]> nodeSourcePAttributeNames5 = new ArrayList<String[]>();
            nodeSourcePAttributeNames5.add(new String[]{"idCopyNode2","description"});
            nodeSourcePAttributeNames5.add(new String[]{"idCopyNode22","description"});
            nodeSourcePAttributeNames5.add(new String[]{"idCopyNode221","description"});
            ArrayList<String[]> nodeSourcePAttributeNames6 = new ArrayList<String[]>();
            nodeSourcePAttributeNames6.add(new String[]{"idCopyNode3","description"});
            nodeSourcePAttributeNames6.add(new String[]{"idCopyNode31","description"});
            nodeSourcePAttributeNames6.add(new String[]{"idCopyNode311","description"});
            nodeSourcePAttributeNames6.add(new String[]{"idCopyNode3111","description"});
            ArrayList<String[]> nodeSourcePAttributeNames7 = new ArrayList<String[]>();
            nodeSourcePAttributeNames7.add(new String[]{"idCopyNode3","description"});
            nodeSourcePAttributeNames7.add(new String[]{"idCopyNode31","description"});
            nodeSourcePAttributeNames7.add(new String[]{"idCopyNode311","description"});
            nodeSourcePAttributeNames7.add(new String[]{"idCopyNode3112","description"});
            ArrayList<String[]> nodeSourcePAttributeNames8 = new ArrayList<String[]>();
            nodeSourcePAttributeNames8.add(new String[]{"idCopyNode3","description"});
            nodeSourcePAttributeNames8.add(new String[]{"idCopyNode32","description"});
            nodeSourcePAttributeNames8.add(new String[]{"idCopyNode321","description"});
            ArrayList<String[]> nodeSourcePAttributeNames9 = new ArrayList<String[]>();
            nodeSourcePAttributeNames9.add(new String[]{"idCopyNode3","description"});
            nodeSourcePAttributeNames9.add(new String[]{"idCopyNode32","description"});
            nodeSourcePAttributeNames9.add(new String[]{"idCopyNode322","description"});
            ArrayList<String[]> nodeSourcePAttributeNames10 = new ArrayList<String[]>();
            nodeSourcePAttributeNames10.add(new String[]{"idCopyNode3","description"});
            nodeSourcePAttributeNames10.add(new String[]{"idCopyNode33","description"});

            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames1);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames2);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames3);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames4);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames5);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames6);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames7);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames8);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames9);
            treeNodeSourcePAttributeNames.add(nodeSourcePAttributeNames10);
        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildTreeNodeSourcePAttributeNamesCollection() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildTreeNodeSourcePAttributeNamesCollection() **************");
        return treeNodeSourcePAttributeNames;
    }

    private Collection<Collection> buildTreeNodeTargetPAttributeNamesCollection() throws Exception{
        Collection<Collection> treeNodeTargetPAttributeNames = new ArrayList<Collection>();
        log.info("************Entering the "+getThisClassName()+".buildTreeNodeTargetPAttributeNamesCollection() ***************");
        try{
            ArrayList<String[]> nodeTargetPAttributeNames1 = new ArrayList<String[]>();
            nodeTargetPAttributeNames1.add(new String[]{"idNode1","description"});
            nodeTargetPAttributeNames1.add(new String[]{"idNode11","description"});
            nodeTargetPAttributeNames1.add( new String[]{"idNode111","description"});
            ArrayList<String[]> nodeTargetPAttributeNames2 = new ArrayList<String[]>();
            nodeTargetPAttributeNames2.add(new String[]{"idNode1","description"});
            nodeTargetPAttributeNames2.add(new String[]{"idNode12","description"});
            nodeTargetPAttributeNames2.add(new String[]{"idNode121","description"});
            ArrayList<String[]> nodeTargetPAttributeNames3 = new ArrayList<String[]>();
            nodeTargetPAttributeNames3.add(new String[]{"idNode1","description"});
            nodeTargetPAttributeNames3.add(new String[]{"idNode12","description"});
            nodeTargetPAttributeNames3.add(new String[]{"idNode122","description"});
            ArrayList<String[]> nodeTargetPAttributeNames4 = new ArrayList<String[]>();
            nodeTargetPAttributeNames4.add(new String[]{"idNode2","description"});
            nodeTargetPAttributeNames4.add(new String[]{"idNode21","description"});
            nodeTargetPAttributeNames4.add(new String[]{"idNode211","description"});
            ArrayList<String[]> nodeTargetPAttributeNames5 =new ArrayList<String[]>();
            nodeTargetPAttributeNames5.add(new String[]{"idNode2","description"});
            nodeTargetPAttributeNames5.add(new String[]{"idNode22","description"});
            nodeTargetPAttributeNames5.add(new String[]{"idNode221","description"});
            ArrayList<String[]> nodeTargetPAttributeNames6 = new ArrayList<String[]>();
            nodeTargetPAttributeNames6.add(new String[]{"idNode3","description"});
            nodeTargetPAttributeNames6.add(new String[]{"idNode31","description"});
            nodeTargetPAttributeNames6.add(new String[]{"idNode311","description"});
            nodeTargetPAttributeNames6.add(new String[]{"idNode3111","description"});
            ArrayList<String[]> nodeTargetPAttributeNames7 = new ArrayList<String[]>();
            nodeTargetPAttributeNames7.add(new String[]{"idNode3","description"});
            nodeTargetPAttributeNames7.add(new String[]{"idNode31","description"});
            nodeTargetPAttributeNames7.add(new String[]{"idNode311","description"});
            nodeTargetPAttributeNames7.add(new String[]{"idNode3112","description"});
            ArrayList<String[]> nodeTargetPAttributeNames8 = new ArrayList<String[]>();
            nodeTargetPAttributeNames8.add(new String[]{"idNode3","description"});
            nodeTargetPAttributeNames8.add(new String[]{"idNode32","description"});
            nodeTargetPAttributeNames8.add(new String[]{"idNode321","description"});
            ArrayList<String[]> nodeTargetPAttributeNames9 = new ArrayList<String[]>();
            nodeTargetPAttributeNames9.add(new String[]{"idNode3","description"});
            nodeTargetPAttributeNames9.add(new String[]{"idNode32","description"});
            nodeTargetPAttributeNames9.add(new String[]{"idNode322","description"});
            ArrayList<String[]> nodeTargetPAttributeNames10 = new ArrayList<String[]>();
            nodeTargetPAttributeNames10.add(new String[]{"idNode3","description"});
            nodeTargetPAttributeNames10.add(new String[]{"idNode33","description"});


            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames1);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames2);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames3);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames4);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames5);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames6);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames7);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames8);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames9);
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames10);

        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildTreeNodeTargetPAttributeNamesCollection() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildTreeNodeTargetPAttributeNamesCollection() **************");
        return treeNodeTargetPAttributeNames;
    }

    private Collection<Collection> buildTreeNodePAttributeNamesCollection() throws Exception{
        Collection<Collection> treeNodePAttributeNames = new ArrayList<Collection>();
        log.info("************Entering the "+getThisClassName()+".buildTreeNodePAttributeNamesCollection() ***************");
        try{
            ArrayList<String[]>  nodePAttributeNames1 = new ArrayList<String[]>();
            nodePAttributeNames1.add(new String[]{"note1"});
            nodePAttributeNames1.add(new String[]{"note11"});
            nodePAttributeNames1.add(new String[]{"note111"});
            ArrayList<String[]>  nodePAttributeNames2 = new ArrayList<String[]>();
            nodePAttributeNames2.add(new String[]{"note1"});
            nodePAttributeNames2.add(new String[]{"note12"});
            nodePAttributeNames2.add(new String[]{"note121"});
            ArrayList<String[]>  nodePAttributeNames3 = new ArrayList<String[]>();
            nodePAttributeNames3.add(new String[]{"note1"});
            nodePAttributeNames3.add(new String[]{"note12"});
            nodePAttributeNames3.add(new String[]{"note122"});
            ArrayList<String[]>  nodePAttributeNames4 = new ArrayList<String[]>();
            nodePAttributeNames4.add(new String[]{"note2"});
            nodePAttributeNames4.add(new String[]{"note21"});
            nodePAttributeNames4.add(new String[]{"note211"});
            ArrayList<String[]>  nodePAttributeNames5 = new ArrayList<String[]>();
            nodePAttributeNames5.add(new String[]{"note2"});
            nodePAttributeNames5.add(new String[]{"note22"});
            nodePAttributeNames5.add(new String[]{"note221"});
            ArrayList<String[]>  nodePAttributeNames6 = new ArrayList<String[]>();
            nodePAttributeNames6.add(new String[]{"note3"});
            nodePAttributeNames6.add(new String[]{"note31"});
            nodePAttributeNames6.add(new String[]{"note311"});
            nodePAttributeNames6.add(new String[]{"note3111"});
            ArrayList<String[]>  nodePAttributeNames7 = new ArrayList<String[]>();
            nodePAttributeNames7.add(new String[]{"note3"});
            nodePAttributeNames7.add(new String[]{"note31"});
            nodePAttributeNames7.add(new String[]{"note311"});
            nodePAttributeNames7.add(new String[]{"note3112"});
            ArrayList<String[]>  nodePAttributeNames8 =new ArrayList<String[]>();
            nodePAttributeNames8.add(new String[]{"note3"});
            nodePAttributeNames8.add(new String[]{"note32"});
            nodePAttributeNames8.add(new String[]{"note321"});
            ArrayList<String[]>  nodePAttributeNames9 = new ArrayList<String[]>();
            nodePAttributeNames9.add(new String[]{"note3"});
            nodePAttributeNames9.add(new String[]{"note32"});
            nodePAttributeNames9.add(new String[]{"note322"});
            ArrayList<String[]>  nodePAttributeNames10 = new ArrayList<String[]>();
            nodePAttributeNames10.add(new String[]{"note3"});
            nodePAttributeNames10.add(new String[]{"note33"});

            treeNodePAttributeNames.add(nodePAttributeNames1);
            treeNodePAttributeNames.add(nodePAttributeNames2);
            treeNodePAttributeNames.add(nodePAttributeNames3);
            treeNodePAttributeNames.add(nodePAttributeNames4);
            treeNodePAttributeNames.add(nodePAttributeNames5);
            treeNodePAttributeNames.add(nodePAttributeNames6);
            treeNodePAttributeNames.add(nodePAttributeNames7);
            treeNodePAttributeNames.add(nodePAttributeNames8);
            treeNodePAttributeNames.add(nodePAttributeNames9);
            treeNodePAttributeNames.add(nodePAttributeNames10);

        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildTreeNodePAttributeNamesCollection() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildTreeNodePAttributeNamesCollection() **************");
        return treeNodePAttributeNames;
    }

    private Collection<Collection> buildTreeNodeValuesArrayCollection() throws Exception{
        Collection<Collection> treeNodeValuesArray = new ArrayList<Collection>();
        log.info("************Entering the "+getThisClassName()+".buildTreeNodeValuesArrayCollection() ***************");
        try{
            ArrayList<Object[]> nodeValuesArray1 = new ArrayList<Object[]>();
            nodeValuesArray1.add(new Object[]{"created note1"});
            nodeValuesArray1.add(new Object[]{"created note11"});
            nodeValuesArray1.add(new Object[]{"created note111"});
            ArrayList<Object[]> nodeValuesArray2 = new ArrayList<Object[]>();
            nodeValuesArray2.add(new Object[]{"created note1"});
            nodeValuesArray2.add(new Object[]{"created note12"});
            nodeValuesArray2.add(new Object[]{"created note121"});
            ArrayList<Object[]> nodeValuesArray3 = new ArrayList<Object[]>();
            nodeValuesArray3.add(new Object[]{"created note1"});
            nodeValuesArray3.add(new Object[]{"created note12"});
            nodeValuesArray3.add(new Object[]{"created note122"});
            ArrayList<Object[]> nodeValuesArray4 = new ArrayList<Object[]>();
            nodeValuesArray4.add(new Object[]{"created note2"});
            nodeValuesArray4.add(new Object[]{"created note21"});
            nodeValuesArray4.add(new Object[]{"created note211"});
            ArrayList<Object[]> nodeValuesArray5 = new ArrayList<Object[]>();
            nodeValuesArray5.add(new Object[]{"created note2"});
            nodeValuesArray5.add(new Object[]{"created note22"});
            nodeValuesArray5.add(new Object[]{"created note221"});
            ArrayList<Object[]> nodeValuesArray6 = new ArrayList<Object[]>();
            nodeValuesArray6.add(new Object[]{"created note3"});
            nodeValuesArray6.add(new Object[]{"created note31"});
            nodeValuesArray6.add(new Object[]{"created note311"});
            nodeValuesArray6.add(new Object[]{"created note3111"});
            ArrayList<Object[]> nodeValuesArray7 = new ArrayList<Object[]>();
            nodeValuesArray7.add(new Object[]{"created note3"});
            nodeValuesArray7.add(new Object[]{"created note31"});
            nodeValuesArray7.add(new Object[]{"created note311"});
            nodeValuesArray7.add(new Object[]{"created note3112"});
            ArrayList<Object[]> nodeValuesArray8 = new ArrayList<Object[]>();
            nodeValuesArray8.add(new Object[]{"created note3"});
            nodeValuesArray8.add(new Object[]{"created note32"});
            nodeValuesArray8.add(new Object[]{"created note321"});
            ArrayList<Object[]> nodeValuesArray9 = new ArrayList<Object[]>();
            nodeValuesArray9.add(new Object[]{"created note3"});
            nodeValuesArray9.add(new Object[]{"created note32"});
            nodeValuesArray9.add(new Object[]{"created note322"});
            ArrayList<Object[]> nodeValuesArray10 = new ArrayList<Object[]>();
            nodeValuesArray10.add(new Object[]{"created note3"});
            nodeValuesArray10.add(new Object[]{"created note33"});


            treeNodeValuesArray.add(nodeValuesArray1);
            treeNodeValuesArray.add(nodeValuesArray2);
            treeNodeValuesArray.add(nodeValuesArray3);
            treeNodeValuesArray.add(nodeValuesArray4);
            treeNodeValuesArray.add(nodeValuesArray5);
            treeNodeValuesArray.add(nodeValuesArray6);
            treeNodeValuesArray.add(nodeValuesArray7);
            treeNodeValuesArray.add(nodeValuesArray8);
            treeNodeValuesArray.add(nodeValuesArray9);
            treeNodeValuesArray.add(nodeValuesArray10);

        }catch (Exception e){
           throw new Exception("Exception in "+getThisClassName()+".buildTreeNodeValuesArrayCollection() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildTreeNodeValuesArrayCollection() **************");
        return treeNodeValuesArray;
    }

    @Test public void testAddTreeToTree(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTree() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = buildRootVO();
            CopyRootVO cCopyRootVO = buildCopyRootVO();

            ArrayList<String> sourceTreePaths = buildSourceTreePaths();

            Collection<String[][]> treeNodeSourcePAttributeNames = buildTreeNodeSourcePAttributeNames();

            ArrayList<String> targetTreePaths =buildTargetTreePaths();

            Collection<String[][]> treeNodeTargetPAttributeNames = buildTreeNodeTargetPAttributeNames();

            Collection<String[][]> treeNodePAttributeNames = buildTreeNodePAttributeNames();

            Collection<Object[][]> treeNodeValuesArray = buildTreeNodeValuesArray();

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  treeNodeSourcePAttributeNames,  treeNodeTargetPAttributeNames,  treeNodePAttributeNames,  treeNodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            checkRootVO(cRootVO,true);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTree() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTree() **************");
    }

    @Test public void testAddTreeToTreeNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeNoValueArray() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = buildRootVO();
            CopyRootVO cCopyRootVO = buildCopyRootVO();

            ArrayList<String> sourceTreePaths = buildSourceTreePaths();

            Collection<String[][]> treeNodeSourcePAttributeNames = buildTreeNodeSourcePAttributeNames();

            ArrayList<String> targetTreePaths =buildTargetTreePaths();

            Collection<String[][]> treeNodeTargetPAttributeNames = buildTreeNodeTargetPAttributeNames();

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  treeNodeSourcePAttributeNames,  treeNodeTargetPAttributeNames,null,null);

            assertEquals("added is expected to be true",true,added);

            checkRootVO(cRootVO,false);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeNoValueArray() **************");
    }

    @Test public void testAddTreeToTreeNoSourceNoTarget(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeNoSourceNoTarget() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = new RootVO();
            cRootVO.setIdRoot("root-c");
            cRootVO.setIdNode3("temp");

            CopyRootVO cCopyRootVO = new CopyRootVO();
            cCopyRootVO.setIdCopyRoot("copy-root-c");

            CopyNode3VO c1CopyNode3VO = new CopyNode3VO();
            c1CopyNode3VO.setIdCopyNode3("copy-node3-c1");

            cCopyRootVO.setCopyNode3VO(c1CopyNode3VO);

            ArrayList<String> sourceTreePaths = new ArrayList<String>();
            sourceTreePaths.add("copyNode3VO");

            ArrayList<String> targetTreePaths =new ArrayList<String>();
            targetTreePaths.add("node3VO");

            Collection<String[][]> treeNodePAttributeNames = new ArrayList<String[][]>();
            String[][] nodePAttributeNames10 = new String[1][];
            nodePAttributeNames10[0] = new String[]{"note3"};
            treeNodePAttributeNames.add(nodePAttributeNames10);

            Collection<Object[][]> treeNodeValuesArray = new ArrayList<Object[][]>();
            Object[][] nodeValuesArray10 = new Object[1][];
            nodeValuesArray10[0] = new Object[]{"created note3"};
            treeNodeValuesArray.add(nodeValuesArray10);

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  null,  null,  treeNodePAttributeNames,  treeNodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            log.info("cRootVO.getIdRoot()"+cRootVO.getIdRoot());
            assertEquals("cRootVO.getIdRoot() is expected to be root-c", "root-c",cRootVO.getIdRoot());
            log.info("cRootVO.getIdNode3()"+cRootVO.getIdNode3());
            assertNull("cRootVO.getIdNode3() is expected to be null",cRootVO.getIdNode3());

            Node3VO c1Node3VO = cRootVO.getNode3VO();
            log.info("c1Node3VO.getIdNode3()"+c1Node3VO.getIdNode3());
            assertNull("c1Node3VO.getIdNode3() is expected to be null",c1Node3VO.getIdNode3());
            log.info("c1Node3VO.getNote3()"+c1Node3VO.getNote3());
            assertEquals("c1Node3VO.getNote3() is expected to be created note3", "created note3", c1Node3VO.getNote3());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeNoSourceNoTarget() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeNoSourceNoTarget() **************");
    }

    @Test public void testAddTreeToTreeNoSourceNoTargetNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeNoSourceNoTargetNoValueArray() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = new RootVO();
            cRootVO.setIdRoot("root-c");
            cRootVO.setIdNode3("temp");

            CopyRootVO cCopyRootVO = new CopyRootVO();
            cCopyRootVO.setIdCopyRoot("copy-root-c");

            CopyNode3VO c1CopyNode3VO = new CopyNode3VO();
            c1CopyNode3VO.setIdCopyNode3("copy-node3-c1");

            cCopyRootVO.setCopyNode3VO(c1CopyNode3VO);

            ArrayList<String> sourceTreePaths = new ArrayList<String>();
            sourceTreePaths.add("copyNode3VO");

            ArrayList<String> targetTreePaths = new ArrayList<String>();
            targetTreePaths.add("node3VO");



            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  null,  null,  null,  null );

            assertEquals("added is expected to be true",true,added);

            log.info("cRootVO.getIdRoot()"+cRootVO.getIdRoot());
            assertEquals("cRootVO.getIdRoot() is expected to be root-c", "root-c",cRootVO.getIdRoot());
            log.info("cRootVO.getIdNode3()"+cRootVO.getIdNode3());
            assertNull("cRootVO.getIdNode3() is expected to be null",cRootVO.getIdNode3());

            Node3VO c1Node3VO = cRootVO.getNode3VO();
            log.info("c1Node3VO.getIdNode3()"+c1Node3VO.getIdNode3());
            assertNull("c1Node3VO.getIdNode3() is expected to be null",c1Node3VO.getIdNode3());
            log.info("c1Node3VO.getNote3()"+c1Node3VO.getNote3());
            assertNull("c1Node3VO.getNote3() is expected to be null",  c1Node3VO.getNote3());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeNoSourceNoTargetNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeNoSourceNoTargetNoValueArray() **************");
    }

    @Test public void testAddTreeToTreeNoSource(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeNoSource() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = new RootVO();
            cRootVO.setIdRoot("root-c");
            cRootVO.setIdNode3("temp");

            RootVO cCopyRootVO = new RootVO();
            cCopyRootVO.setIdRoot("copy-root-c");

            Node3VO c1CopyNode3VO = new Node3VO();
            c1CopyNode3VO.setIdNode3("copy-node3-c1");
            c1CopyNode3VO.setDescription("description copy-node3-c1");

            cCopyRootVO.setNode3VO(c1CopyNode3VO);

            ArrayList<String> sourceTreePaths = new ArrayList<String>();
            sourceTreePaths.add("node3VO");

            ArrayList<String> targetTreePaths = new ArrayList<String>();
            targetTreePaths.add("node3VO");

            Collection<String[][]> treeNodeTargetPAttributeNames = new ArrayList<String[][]>();
            String[][] nodeTargetPAttributeNames10 = new String[1][];
            nodeTargetPAttributeNames10[0] = new String[]{"idNode3","description"};
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames10);

            Collection<String[][]> treeNodePAttributeNames = new ArrayList<String[][]>();
            String[][] nodePAttributeNames10 = new String[1][];
            nodePAttributeNames10[0] = new String[]{"note3"};
            treeNodePAttributeNames.add(nodePAttributeNames10);

            Collection<Object[][]> treeNodeValuesArray = new ArrayList<Object[][]>();
            Object[][] nodeValuesArray10 = new Object[1][];
            nodeValuesArray10[0] = new Object[]{"created note3"};
            treeNodeValuesArray.add(nodeValuesArray10);

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  null,  treeNodeTargetPAttributeNames,  treeNodePAttributeNames,  treeNodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            log.info("cRootVO.getIdRoot()"+cRootVO.getIdRoot());
            assertEquals("cRootVO.getIdRoot() is expected to be root-c", "root-c",cRootVO.getIdRoot());
            log.info("cRootVO.getIdNode3()"+cRootVO.getIdNode3());
            assertEquals("cRootVO.getIdNode3() is expected to be copy-node3-c1","copy-node3-c1",cRootVO.getIdNode3());

            Node3VO c1Node3VO = cRootVO.getNode3VO();
            log.info("c1Node3VO.getIdNode3()"+c1Node3VO.getIdNode3());
            assertEquals("c1Node3VO.getIdNode3() is expected to be copy-node3-c1","copy-node3-c1",c1Node3VO.getIdNode3());
            log.info("c1Node3VO.getDescription()"+c1Node3VO.getDescription());
            assertEquals("c1Node3VO.getDescription() is expected to be description copy-node3-c1","description copy-node3-c1",c1Node3VO.getDescription());
            log.info("c1Node3VO.getNote3()"+c1Node3VO.getNote3());
            assertEquals("c1Node3VO.getNote3() is expected to be created note3", "created note3", c1Node3VO.getNote3());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeNoSource() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeNoSource() **************");
    }

    @Test public void testAddTreeToTreeNoTarget(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeNoTarget() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = new RootVO();
            cRootVO.setIdRoot("root-c");
            cRootVO.setIdNode3("temp");

            RootVO cCopyRootVO = new RootVO();
            cCopyRootVO.setIdRoot("copy-root-c");

            Node3VO c1CopyNode3VO = new Node3VO();
            c1CopyNode3VO.setIdNode3("copy-node3-c1");
            c1CopyNode3VO.setDescription("description copy-node3-c1");

            cCopyRootVO.setNode3VO(c1CopyNode3VO);

            ArrayList<String> sourceTreePaths = new ArrayList<String>();
            sourceTreePaths.add("node3VO");

            ArrayList<String> targetTreePaths = new ArrayList<String>();
            targetTreePaths.add("node3VO");

            Collection<String[][]> treeNodeSourcePAttributeNames = new ArrayList<String[][]>();
            String[][] nodeTargetPAttributeNames10 = new String[1][];
            nodeTargetPAttributeNames10[0] = new String[]{"idNode3","description"};
            treeNodeSourcePAttributeNames.add(nodeTargetPAttributeNames10);

            Collection<String[][]> treeNodePAttributeNames = new ArrayList<String[][]>();
            String[][] nodePAttributeNames10 = new String[1][];
            nodePAttributeNames10[0] = new String[]{"note3"};
            treeNodePAttributeNames.add(nodePAttributeNames10);

            Collection<Object[][]> treeNodeValuesArray = new ArrayList<Object[][]>();
            Object[][] nodeValuesArray10 = new Object[1][];
            nodeValuesArray10[0] = new Object[]{"created note3"};
            treeNodeValuesArray.add(nodeValuesArray10);

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  treeNodeSourcePAttributeNames,  null,  treeNodePAttributeNames,  treeNodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            log.info("cRootVO.getIdRoot()"+cRootVO.getIdRoot());
            assertEquals("cRootVO.getIdRoot() is expected to be root-c", "root-c",cRootVO.getIdRoot());
            log.info("cRootVO.getIdNode3()"+cRootVO.getIdNode3());
            assertEquals("cRootVO.getIdNode3() is expected to be copy-node3-c1","copy-node3-c1",cRootVO.getIdNode3());

            Node3VO c1Node3VO = cRootVO.getNode3VO();
            log.info("c1Node3VO.getIdNode3()"+c1Node3VO.getIdNode3());
            assertEquals("c1Node3VO.getIdNode3() is expected to be copy-node3-c1","copy-node3-c1",c1Node3VO.getIdNode3());
            log.info("c1Node3VO.getDescription()"+c1Node3VO.getDescription());
            assertEquals("c1Node3VO.getDescription() is expected to be description copy-node3-c1","description copy-node3-c1",c1Node3VO.getDescription());
            log.info("c1Node3VO.getNote3()"+c1Node3VO.getNote3());
            assertEquals("c1Node3VO.getNote3() is expected to be created note3", "created note3", c1Node3VO.getNote3());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeNoTarget() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeNoTarget() **************");
    }


    @Test public void testAddTreeToTreeCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeCollection() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = buildRootVO();
            CopyRootVO cCopyRootVO = buildCopyRootVO();

            ArrayList<String> sourceTreePaths = buildSourceTreePaths();

            Collection<Collection> treeNodeSourcePAttributeNames = buildTreeNodeSourcePAttributeNamesCollection();

            ArrayList<String> targetTreePaths =buildTargetTreePaths();

            Collection<Collection> treeNodeTargetPAttributeNames = buildTreeNodeTargetPAttributeNamesCollection();

            Collection<Collection> treeNodePAttributeNames = buildTreeNodePAttributeNamesCollection();

            Collection<Collection> treeNodeValuesArray = buildTreeNodeValuesArrayCollection();

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  treeNodeSourcePAttributeNames,  treeNodeTargetPAttributeNames,  treeNodePAttributeNames,  treeNodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            checkRootVO(cRootVO,true);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeCollection() **************");
    }

    @Test public void testAddTreeToTreeNoValueArrayCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeNoValueArrayCollection() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = buildRootVO();
            CopyRootVO cCopyRootVO = buildCopyRootVO();

            ArrayList<String> sourceTreePaths = buildSourceTreePaths();

            Collection<Collection> treeNodeSourcePAttributeNames = buildTreeNodeSourcePAttributeNamesCollection();

            ArrayList<String> targetTreePaths =buildTargetTreePaths();

            Collection<Collection> treeNodeTargetPAttributeNames = buildTreeNodeTargetPAttributeNamesCollection();

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  treeNodeSourcePAttributeNames,  treeNodeTargetPAttributeNames,null,null);

            assertEquals("added is expected to be true",true,added);

            checkRootVO(cRootVO,false);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeNoValueArrayCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeNoValueArrayCollection() **************");
    }

    @Test public void testAddTreeToTreeNoSourceNoTargetCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeNoSourceNoTargetCollection() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = new RootVO();
            cRootVO.setIdRoot("root-c");
            cRootVO.setIdNode3("temp");

            CopyRootVO cCopyRootVO = new CopyRootVO();
            cCopyRootVO.setIdCopyRoot("copy-root-c");

            CopyNode3VO c1CopyNode3VO = new CopyNode3VO();
            c1CopyNode3VO.setIdCopyNode3("copy-node3-c1");

            cCopyRootVO.setCopyNode3VO(c1CopyNode3VO);

            ArrayList<String> sourceTreePaths = new ArrayList<String>();
            sourceTreePaths.add("copyNode3VO");

            ArrayList<String> targetTreePaths = new ArrayList<String>();
            targetTreePaths.add("node3VO");

            Collection<Collection> treeNodePAttributeNames = new ArrayList<Collection>();
            ArrayList<String[]> nodePAttributeNames10 = new ArrayList<String[]>();
            nodePAttributeNames10.add(new String[]{"note3"});
            treeNodePAttributeNames.add(nodePAttributeNames10);

            Collection<Collection> treeNodeValuesArray = new ArrayList<Collection>();
            ArrayList<Object[]> nodeValuesArray10 = new ArrayList<Object[]>();
            nodeValuesArray10.add(new Object[]{"created note3"});
            treeNodeValuesArray.add(nodeValuesArray10);

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  null,  null,  treeNodePAttributeNames,  treeNodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            log.info("cRootVO.getIdRoot()"+cRootVO.getIdRoot());
            assertEquals("cRootVO.getIdRoot() is expected to be root-c", "root-c",cRootVO.getIdRoot());
            log.info("cRootVO.getIdNode3()"+cRootVO.getIdNode3());
            assertNull("cRootVO.getIdNode3() is expected to be null",cRootVO.getIdNode3());

            Node3VO c1Node3VO = cRootVO.getNode3VO();
            log.info("c1Node3VO.getIdNode3()"+c1Node3VO.getIdNode3());
            assertNull("c1Node3VO.getIdNode3() is expected to be null",c1Node3VO.getIdNode3());
            log.info("c1Node3VO.getNote3()"+c1Node3VO.getNote3());
            assertEquals("c1Node3VO.getNote3() is expected to be created note3", "created note3", c1Node3VO.getNote3());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeNoSourceNoTargetCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeNoSourceNoTargetCollection() **************");
    }

    @Test public void testAddTreeToTreeNoSourceCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeNoSourceCollection() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = new RootVO();
            cRootVO.setIdRoot("root-c");
            cRootVO.setIdNode3("temp");

            RootVO cCopyRootVO = new RootVO();
            cCopyRootVO.setIdRoot("copy-root-c");

            Node3VO c1CopyNode3VO = new Node3VO();
            c1CopyNode3VO.setIdNode3("copy-node3-c1");
            c1CopyNode3VO.setDescription("description copy-node3-c1");

            cCopyRootVO.setNode3VO(c1CopyNode3VO);

            ArrayList<String> sourceTreePaths = new ArrayList<String>();
            sourceTreePaths.add("node3VO");

            ArrayList<String> targetTreePaths = new ArrayList<String>();
            targetTreePaths.add("node3VO");

            Collection<Collection> treeNodeTargetPAttributeNames = new ArrayList<Collection>();
            ArrayList<String[]> nodeTargetPAttributeNames10 = new ArrayList<String[]>();
            nodeTargetPAttributeNames10.add(new String[]{"idNode3","description"});
            treeNodeTargetPAttributeNames.add(nodeTargetPAttributeNames10);

            Collection<Collection> treeNodePAttributeNames = new ArrayList<Collection>();
            ArrayList<String[]> nodePAttributeNames10 = new ArrayList<String[]>();
            nodePAttributeNames10.add(new String[]{"note3"});
            treeNodePAttributeNames.add(nodePAttributeNames10);

            Collection<Collection> treeNodeValuesArray = new ArrayList<Collection>();
            ArrayList<Object[]> nodeValuesArray10 = new ArrayList<Object[]>();
            nodeValuesArray10.add(new Object[]{"created note3"});
            treeNodeValuesArray.add(nodeValuesArray10);

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  null,  treeNodeTargetPAttributeNames,  treeNodePAttributeNames,  treeNodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            log.info("cRootVO.getIdRoot()"+cRootVO.getIdRoot());
            assertEquals("cRootVO.getIdRoot() is expected to be root-c", "root-c",cRootVO.getIdRoot());
            log.info("cRootVO.getIdNode3()"+cRootVO.getIdNode3());
            assertEquals("cRootVO.getIdNode3() is expected to be copy-node3-c1","copy-node3-c1",cRootVO.getIdNode3());

            Node3VO c1Node3VO = cRootVO.getNode3VO();
            log.info("c1Node3VO.getIdNode3()"+c1Node3VO.getIdNode3());
            assertEquals("c1Node3VO.getIdNode3() is expected to be copy-node3-c1","copy-node3-c1",c1Node3VO.getIdNode3());
            log.info("c1Node3VO.getDescription()"+c1Node3VO.getDescription());
            assertEquals("c1Node3VO.getDescription() is expected to be description copy-node3-c1","description copy-node3-c1",c1Node3VO.getDescription());
            log.info("c1Node3VO.getNote3()"+c1Node3VO.getNote3());
            assertEquals("c1Node3VO.getNote3() is expected to be created note3", "created note3", c1Node3VO.getNote3());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeNoSourceCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeNoSourceCollection() **************");
    }

    @Test public void testAddTreeToTreeNoTargetCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeNoTargetCollection() ***************");
        try{
            BD bd = getBD();

            RootVO cRootVO = new RootVO();
            cRootVO.setIdRoot("root-c");
            cRootVO.setIdNode3("temp");

            RootVO cCopyRootVO = new RootVO();
            cCopyRootVO.setIdRoot("copy-root-c");

            Node3VO c1CopyNode3VO = new Node3VO();
            c1CopyNode3VO.setIdNode3("copy-node3-c1");
            c1CopyNode3VO.setDescription("description copy-node3-c1");

            cCopyRootVO.setNode3VO(c1CopyNode3VO);

            ArrayList<String> sourceTreePaths = new ArrayList<String>();
            sourceTreePaths.add("node3VO");

            ArrayList<String> targetTreePaths = new ArrayList<String>();
            targetTreePaths.add("node3VO");

            Collection<Collection> treeNodeSourcePAttributeNames = new ArrayList<Collection>();
            ArrayList<String[]> nodeTargetPAttributeNames10 = new ArrayList<String[]>();
            nodeTargetPAttributeNames10.add(new String[]{"idNode3","description"});
            treeNodeSourcePAttributeNames.add(nodeTargetPAttributeNames10);

            Collection<Collection> treeNodePAttributeNames = new ArrayList<Collection>();
            ArrayList<String[]> nodePAttributeNames10 = new ArrayList<String[]>();
            nodePAttributeNames10.add(new String[]{"note3"});
            treeNodePAttributeNames.add(nodePAttributeNames10);

            Collection<Collection> treeNodeValuesArray = new ArrayList<Collection>();
            ArrayList<Object[]> nodeValuesArray10 = new ArrayList<Object[]>();
            nodeValuesArray10.add(new Object[]{"created note3"});
            treeNodeValuesArray.add(nodeValuesArray10);

            boolean  added = bd.addTreeToTree(cCopyRootVO,  cRootVO, sourceTreePaths, targetTreePaths,  treeNodeSourcePAttributeNames,null  ,  treeNodePAttributeNames,  treeNodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            log.info("cRootVO.getIdRoot()"+cRootVO.getIdRoot());
            assertEquals("cRootVO.getIdRoot() is expected to be root-c", "root-c",cRootVO.getIdRoot());
            log.info("cRootVO.getIdNode3()"+cRootVO.getIdNode3());
            assertEquals("cRootVO.getIdNode3() is expected to be copy-node3-c1","copy-node3-c1",cRootVO.getIdNode3());

            Node3VO c1Node3VO = cRootVO.getNode3VO();
            log.info("c1Node3VO.getIdNode3()"+c1Node3VO.getIdNode3());
            assertEquals("c1Node3VO.getIdNode3() is expected to be copy-node3-c1","copy-node3-c1",c1Node3VO.getIdNode3());
            log.info("c1Node3VO.getDescription()"+c1Node3VO.getDescription());
            assertEquals("c1Node3VO.getDescription() is expected to be description copy-node3-c1","description copy-node3-c1",c1Node3VO.getDescription());
            log.info("c1Node3VO.getNote3()"+c1Node3VO.getNote3());
            assertEquals("c1Node3VO.getNote3() is expected to be created note3", "created note3", c1Node3VO.getNote3());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeNoTargetCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeNoTargetCollection() **************");
    }


    private Path0VO buildlmnPath0VO() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildlmnPath0VO() ***************");
        Path0VO lmnPath0VO =null;
        try{
            lmnPath0VO = new Path0VO();
            lmnPath0VO.setIdPath0("lmnPath0");

            Path1VO lmn1Path1VO = new Path1VO();
            lmn1Path1VO.setIdPath1("lmn1Path1");

            lmnPath0VO.setPath1VO(lmn1Path1VO);

            ArrayList<Path2VO> lmn1Path1Path2VOs = new ArrayList<Path2VO>();

            Path2VO lmn11Path2VO = new Path2VO();
            lmn11Path2VO.setIdPath2("lmn11Path2");

            lmn1Path1Path2VOs.add(lmn11Path2VO);

            lmn1Path1VO.setPath2VOs(lmn1Path1Path2VOs);

            ArrayList<Path3VO> lmn11Path2Path3VOs = new ArrayList<Path3VO>();

            Path3VO lmn111Path3VO = new Path3VO();
            lmn111Path3VO.setIdPath3("lmn111Path3");

            lmn11Path2Path3VOs.add(lmn111Path3VO);
            lmn11Path2VO.setPath3VOs(lmn11Path2Path3VOs);

            ArrayList<Path4VO> lmn111Path3Path4VOs = new ArrayList<Path4VO>();
            Path4VO lmn1111Path4VO = new Path4VO();
            lmn1111Path4VO.setIdPath4("lmn1111Path4");
            lmn111Path3Path4VOs.add(lmn1111Path4VO);

            lmn111Path3VO.setPath4VOs(lmn111Path3Path4VOs);

            Path5VO lmn11111Path5VO = new Path5VO();
            lmn11111Path5VO.setIdPath5("lmn11111Path5");
            lmn1111Path4VO.setPath5VO(lmn11111Path5VO);

            Path6VO lmn111111Path6VO = new Path6VO();
            lmn111111Path6VO.setIdPath6("lmn111111Path6");
            lmn11111Path5VO.setPath6VO(lmn111111Path6VO);


        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildlmnPath0VO() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildlmnPath0VO() **************");
        return lmnPath0VO;
    }

    private Path0VO buildlmnCopyPath0VO() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildlmnCopyPath0VO() ***************");
        Path0VO lmnCopyPath0VO =null;
        try{
            lmnCopyPath0VO = new Path0VO();
            lmnCopyPath0VO.setIdPath0("lmnCopyPath0");

            Path1VO lmn1CopyPath1VO = new Path1VO();
            lmn1CopyPath1VO.setIdPath1("lmn1CopyPath1");

            lmnCopyPath0VO.setPath1VO(lmn1CopyPath1VO);

            ArrayList<Path2VO> lmn1Path1Path2VOs = new ArrayList<Path2VO>();

            Path2VO lmn11Path2VO = new Path2VO();
            lmn11Path2VO.setIdPath2("lmn11Path2");

            Path2VO lmn12CopyPath2VO = new Path2VO();
            lmn12CopyPath2VO.setIdPath2("lmn12CopyPath2");

            lmn1Path1Path2VOs.add(lmn11Path2VO);
            lmn1Path1Path2VOs.add(lmn12CopyPath2VO);

            lmn1CopyPath1VO.setPath2VOs(lmn1Path1Path2VOs);

            ArrayList<Path3VO> lmn11Path2Path3VOs = new ArrayList<Path3VO>();

            Path3VO lmn111Path3VO = new Path3VO();
            lmn111Path3VO.setIdPath3("lmn111Path3");

            Path3VO lmn112CopyPath3VO = new Path3VO();
            lmn112CopyPath3VO.setIdPath3("lmn112CopyPath3");

            lmn11Path2Path3VOs.add(lmn111Path3VO);
            lmn11Path2Path3VOs.add(lmn112CopyPath3VO);
            lmn11Path2VO.setPath3VOs(lmn11Path2Path3VOs);

            ArrayList<Path4VO> lmn111Path3Path4VOs = new ArrayList<Path4VO>();
            Path4VO lmn1111Path4VO = new Path4VO();
            lmn1111Path4VO.setIdPath4("lmn1111Path4");
            Path4VO lmn1112CopyPath4VO = new Path4VO();
            lmn1112CopyPath4VO.setIdPath4("lmn1112CopyPath4");
            lmn111Path3Path4VOs.add(lmn1111Path4VO);
            lmn111Path3Path4VOs.add(lmn1112CopyPath4VO);

            lmn111Path3VO.setPath4VOs(lmn111Path3Path4VOs);




            Path5VO lmn11121CopyPath5VO = new Path5VO();
            lmn11121CopyPath5VO.setIdPath5("lmn11121CopyPath5");
            lmn1112CopyPath4VO.setPath5VO(lmn11121CopyPath5VO);

            Path6VO lmn111211CopyPath6VO = new Path6VO();
            lmn111211CopyPath6VO.setIdPath6("lmn111211CopyPath6");
            lmn11121CopyPath5VO.setPath6VO(lmn111211CopyPath6VO);


            ArrayList<Path4VO> lmn112Path3Path4VOs = new ArrayList<Path4VO>();
            Path4VO lmn1121CopyPath4VO = new Path4VO();
            lmn1121CopyPath4VO.setIdPath4("lmn1121CopyPath4");
            Path4VO lmn1122CopyPath4VO = new Path4VO();
            lmn1122CopyPath4VO.setIdPath4("lmn1122CopyPath4");
            lmn112Path3Path4VOs.add(lmn1121CopyPath4VO);
            lmn112Path3Path4VOs.add(lmn1122CopyPath4VO);

            lmn112CopyPath3VO.setPath4VOs(lmn112Path3Path4VOs);

            Path5VO lmn11211CopyPath5VO = new Path5VO();
            lmn11211CopyPath5VO.setIdPath5("lmn11211CopyPath5");
            lmn1121CopyPath4VO.setPath5VO(lmn11211CopyPath5VO);

            Path6VO lmn112111CopyPath6VO = new Path6VO();
            lmn112111CopyPath6VO.setIdPath6("lmn112111CopyPath6");
            lmn11211CopyPath5VO.setPath6VO(lmn112111CopyPath6VO);

        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildlmnCopyPath0VO() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildlmnCopyPath0VO() **************");
        return lmnCopyPath0VO;
    }

    protected void checkPath0VO(Path0VO testlmnPath0VO, boolean  checkDescription){
        log.info("************Entering the "+getThisClassName()+".checkPath0VO(Path0VO testlmnPath0VO, boolean  checkDescription)**************");
        try{
            log.info("testlmnPath0VO.getIdPath0() = "+testlmnPath0VO.getIdPath0());
            assertEquals("testlmnPath0VO.getIdPath0() is expected to be lmnPath0", "lmnPath0",testlmnPath0VO.getIdPath0());
            log.info("testlmnPath0VO.getIdPath1() = "+testlmnPath0VO.getIdPath1());
            assertNull("testlmnPath0VO.getIdPath1() is expected to be null",testlmnPath0VO.getIdPath1());
            if(checkDescription)assertNull("testlmnPath0VO.getDescription() expected to be null",testlmnPath0VO.getDescription());

            Path1VO testlmn1Path1VO=testlmnPath0VO.getPath1VO();
            log.info("testlmn1Path1VO.getIdPath1() = "+testlmn1Path1VO.getIdPath1());
            assertEquals("testlmn1Path1VO.getIdPath1() is expected to be lmn1Path1", "lmn1Path1",testlmn1Path1VO.getIdPath1());
            if(checkDescription)assertNull("testlmnPath0VO.getDescription() expected to be null",testlmnPath0VO.getDescription());

            Collection<Path2VO> testlmn1Path1Path2VOs = testlmn1Path1VO.getPath2VOs();
            log.info("testlmn1Path1Path2VOs.size() = " + testlmn1Path1Path2VOs.size());
            assertEquals("testlmn1Path1Path2VOs.size() is expected to be 2", 2, testlmn1Path1Path2VOs.size());

            Iterator<Path2VO> testlmn1Path1Path2VOsIterator = testlmn1Path1Path2VOs.iterator();
            Path2VO testlmn11Path2VO = testlmn1Path1Path2VOsIterator.next();
            Path2VO testlmn12CopyPath2VO = testlmn1Path1Path2VOsIterator.next(); // new Added

            log.info("testlmn11Path2VO.getIdPath2() = "+testlmn11Path2VO.getIdPath2());
            assertEquals("testlmn11Path2VO.getIdPath2( is expected to be lmn11Path2", "lmn11Path2",testlmn11Path2VO.getIdPath2());
            log.info("testlmn11Path2VO.getIdPath1() = "+testlmn11Path2VO.getIdPath1());
            assertNull("testlmn11Path2VO.getIdPath1() is expected to be null",testlmn11Path2VO.getIdPath1());
            if(checkDescription)assertNull("testlmn11Path2VO.getDescription() is expected to be null",testlmn11Path2VO.getDescription());

            log.info("testlmn12CopyPath2VO.getIdPath2() = "+testlmn12CopyPath2VO.getIdPath2());
            assertEquals("testlmn12CopyPath2VO.getIdPath2( is expected to be lmn12CopyPath2", "lmn12CopyPath2",testlmn12CopyPath2VO.getIdPath2());
            log.info("testlmn12CopyPath2VO.getIdPath1() = "+testlmn12CopyPath2VO.getIdPath1());
            assertEquals("testlmn12CopyPath2VO.getIdPath1() is expected to be lmn1Path1","lmn1Path1",testlmn12CopyPath2VO.getIdPath1());
            if(checkDescription)assertEquals("testlmn12CopyPath2VO.getDescription() is expected to be description of path2","description of path2",testlmn12CopyPath2VO.getDescription());


            Collection<Path3VO> testlmn11Path2Path3VOs = testlmn11Path2VO.getPath3VOs();
            log.info("testlmn11Path2Path3VOs.size() = " + testlmn11Path2Path3VOs.size());
            assertEquals("testlmn11Path2Path3VOs.size() is expected to be 2", 2, testlmn11Path2Path3VOs.size());

            Iterator<Path3VO> testlmn11Path2Path3VOsIterator = testlmn11Path2Path3VOs.iterator();
            Path3VO testlmn111Path3VO =  testlmn11Path2Path3VOsIterator.next();
            Path3VO testlmn112CopyPath3VO = testlmn11Path2Path3VOsIterator.next(); // new Added

            log.info("testlmn111Path3VO.getIdPath3() = "+testlmn111Path3VO.getIdPath3());
            assertEquals("testlmn111Path3VO.getIdPath3() is expected to be lmn111Path3", "lmn111Path3",testlmn111Path3VO.getIdPath3());
            if(checkDescription)assertNull("testlmn111Path3VO.getDescription() is expected to be  null",testlmn111Path3VO.getDescription());


            Collection<Path4VO> testlmn111Path3Path4VOs = testlmn111Path3VO.getPath4VOs();
            log.info("testlmn111Path3Path4VOs.size() = " + testlmn111Path3Path4VOs.size());
            assertEquals("testlmn111Path3Path4VOs.size() is expected to be 2", 2, testlmn111Path3Path4VOs.size());

            Iterator<Path4VO> testlmn111Path3Path4VOsIterator = testlmn111Path3Path4VOs.iterator();
            Path4VO testlmn1111Path4VO =  testlmn111Path3Path4VOsIterator.next();
            Path4VO testlmn1112CopyPath4VO = testlmn111Path3Path4VOsIterator.next(); // new Added

            log.info("testlmn1111Path4VO.getIdPath4() = "+testlmn1111Path4VO.getIdPath4());
            assertEquals("testlmn1111Path4VO.getIdPath4() is expected to be lmn1111Path4", "lmn1111Path4",testlmn1111Path4VO.getIdPath4());
            log.info("testlmn1111Path4VO.getIdPath5() = "+testlmn1111Path4VO.getIdPath5());
            assertNull("testlmn1111Path4VO.getIdPath5() is expected to be null", testlmn1111Path4VO.getIdPath5());
            if(checkDescription)assertNull("testlmn1111Path4VO.getDescription() is expected to be  null",testlmn1111Path4VO.getDescription());

            Path5VO testlmn11111Path5VO = testlmn1111Path4VO.getPath5VO();

            log.info("testlmn11111Path5VO.getIdPath5() = "+testlmn11111Path5VO.getIdPath5());
            assertEquals("testlmn11111Path5VO.getIdPath5() is expected to be lmn11111Path5", "lmn11111Path5",testlmn11111Path5VO.getIdPath5());
            log.info("testlmn11111Path5VO.getIdPath6() = "+testlmn11111Path5VO.getIdPath6());
            assertNull("testlmn11111Path5VO.getIdPath6() is expected to be null", testlmn11111Path5VO.getIdPath6());
            if(checkDescription)assertNull("testlmn11111Path5VO.getDescription() is expected to be  null",testlmn11111Path5VO.getDescription());

            Path6VO testlmn111111Path6VO = testlmn11111Path5VO.getPath6VO();

            log.info("testlmn111111Path6VO.getIdPath6() = "+testlmn111111Path6VO.getIdPath6());
            assertEquals("testlmn111111Path6VO.getIdPath6() is expected to be lmn111111Path6", "lmn111111Path6",testlmn111111Path6VO.getIdPath6());
            if(checkDescription)assertNull("testlmn111111Path6VO.getDescription() is expected to be  null",testlmn111111Path6VO.getDescription());


            log.info("testlmn1112CopyPath4VO.getIdPath4() = "+testlmn1112CopyPath4VO.getIdPath4());
            assertEquals("testlmn1112CopyPath4VO.getIdPath4() is expected to be lmn1112CopyPath4", "lmn1112CopyPath4",testlmn1112CopyPath4VO.getIdPath4());
            log.info("testlmn1112CopyPath4VO.getIdPath5() = "+testlmn1112CopyPath4VO.getIdPath5());
            assertEquals("testlmn1112CopyPath4VO.getIdPath5() is expected to be lmn11121CopyPath5","lmn11121CopyPath5", testlmn1112CopyPath4VO.getIdPath5());
            if(checkDescription)assertNull("testlmn1112CopyPath4VO.getDescription() is expected to be null",testlmn1112CopyPath4VO.getDescription()); // because of nodeValueArray[3] ==null

            Path5VO testlmn11121CopyPath5VO = testlmn1112CopyPath4VO.getPath5VO();

            log.info("testlmn11121CopyPath5VO.getIdPath5() = "+testlmn11121CopyPath5VO.getIdPath5());
            assertEquals("testlmn11121CopyPath5VO.getIdPath5() is expected to be lmn11121CopyPath5", "lmn11121CopyPath5",testlmn11121CopyPath5VO.getIdPath5());
            log.info("testlmn11121CopyPath5VO.getIdPath6() = "+testlmn11121CopyPath5VO.getIdPath6());
            assertNull("testlmn11121CopyPath5VO.getIdPath6() is expected to be null", testlmn11121CopyPath5VO.getIdPath6()); // because 0f nodeTargetPAttributeName[5] == null
            if(checkDescription)assertEquals("testlmn11121CopyPath5VO.getDescription() is expected to be  description of path5","description of path5",testlmn11121CopyPath5VO.getDescription());

            Path6VO testlmn111211CopyPath6VO = testlmn11121CopyPath5VO.getPath6VO();

            log.info("testlmn111211CopyPath6VO.getIdPath6() = "+testlmn111211CopyPath6VO.getIdPath6());
            assertNull("testlmn111211CopyPath6VO.getIdPath6() is expected to be null", testlmn111211CopyPath6VO.getIdPath6()); // because 0f nodeTargetPAttributeName[5] == null
            if(checkDescription)assertEquals("testlmn111211CopyPath6VO.getDescription() is expected to be  description of path6","description of path6",testlmn111211CopyPath6VO.getDescription());



            log.info("testlmn112CopyPath3VO.getIdPath3() = "+testlmn112CopyPath3VO.getIdPath3());
            assertEquals("testlmn112CopyPath3VO.getIdPath3() is expected to be lmn112CopyPath3", "lmn112CopyPath3",testlmn112CopyPath3VO.getIdPath3());
            if(checkDescription)assertEquals("testlmn112CopyPath3VO.getDescription() is expected to be  description of path3","description of path3",testlmn112CopyPath3VO.getDescription());


            Collection<Path4VO> testlmn112Path3Path4VOs = testlmn112CopyPath3VO.getPath4VOs();
            log.info("testlmn112Path3Path4VOs.size() = " + testlmn112Path3Path4VOs.size());
            assertEquals("testlmn112Path3Path4VOs.size() is expected to be 2", 2, testlmn112Path3Path4VOs.size());

            Iterator<Path4VO> testlmn112Path3Path4VOsIterator = testlmn112Path3Path4VOs.iterator();
            Path4VO testlmn1121CopyPath4VO = testlmn112Path3Path4VOsIterator.next();
            Path4VO testlmn1122CopyPath4VO = testlmn112Path3Path4VOsIterator.next();

            log.info("testlmn1121CopyPath4VO.getIdPath4() = "+testlmn1121CopyPath4VO.getIdPath4());
            assertEquals("testlmn1121CopyPath4VO.getIdPath4() is expected to be lmn1121CopyPath4", "lmn1121CopyPath4",testlmn1121CopyPath4VO.getIdPath4());
            log.info("testlmn1121CopyPath4VO.getIdPath5() = "+testlmn1121CopyPath4VO.getIdPath5());
            assertEquals("testlmn1121CopyPath4VO.getIdPath5() is expected to be lmn11211CopyPath5","lmn11211CopyPath5", testlmn1121CopyPath4VO.getIdPath5());
            if(checkDescription)assertNull("testlmn1121CopyPath4VO.getDescription() is expected to be null",testlmn1121CopyPath4VO.getDescription()); // because of nodeValueArray[3] ==null


            Path5VO testlmn11211CopyPath5VO = testlmn1121CopyPath4VO.getPath5VO();

            log.info("testlmn11211CopyPath5VO.getIdPath5() = "+testlmn11211CopyPath5VO.getIdPath5());
            assertEquals("testlmn11211CopyPath5VO.getIdPath5() is expected to be lmn11211CopyPath5", "lmn11211CopyPath5",testlmn11211CopyPath5VO.getIdPath5());
            log.info("testlmn11211CopyPath5VO.getIdPath6() = "+testlmn11211CopyPath5VO.getIdPath6());
            assertNull("testlmn11211CopyPath5VO.getIdPath6() is expected to be null", testlmn11211CopyPath5VO.getIdPath6()); // because 0f nodeTargetPAttributeName[5] == null
            if(checkDescription)assertEquals("testlmn11211CopyPath5VO.getDescription() is expected to be  description of path5","description of path5",testlmn11211CopyPath5VO.getDescription());

            Path6VO testlmn112111CopyPath6VO = testlmn11211CopyPath5VO.getPath6VO();

            log.info("testlmn112111CopyPath6VO.getIdPath6() = "+testlmn112111CopyPath6VO.getIdPath6());
            assertNull("testlmn112111CopyPath6VO.getIdPath6() is expected to be null", testlmn112111CopyPath6VO.getIdPath6()); // because 0f nodeTargetPAttributeName[5] == null
            if(checkDescription)assertEquals("testlmn112111CopyPath6VO.getDescription() is expected to be  description of path6","description of path6",testlmn112111CopyPath6VO.getDescription());

            log.info("testlmn1122CopyPath4VO.getIdPath4() = "+testlmn1122CopyPath4VO.getIdPath4());
            assertEquals("testlmn1122CopyPath4VO.getIdPath4() is expected to be lmn1122CopyPath4", "lmn1122CopyPath4",testlmn1122CopyPath4VO.getIdPath4());
            log.info("testlmn1122CopyPath4VO.getIdPath5() = "+testlmn1122CopyPath4VO.getIdPath5());
            assertNull("testlmn1122CopyPath4VO.getIdPath5() is expected to be null", testlmn1122CopyPath4VO.getIdPath5());
            if(checkDescription)assertNull("testlmn1122CopyPath4VO.getDescription() is expected to be null",testlmn1122CopyPath4VO.getDescription()); // because of nodeValueArray[3] ==null

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".checkPath0VO(Path0VO testlmnPath0VO, boolean  checkDescription):"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".checkPath0VO(Path0VO testlmnPath0VO, boolean  checkDescription)*************************");
    }

    private String[][] buildnodeSourcePAttributeName() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildnodeSourcePAttributeName() ***************");
        String[][] nodeSourcePAttributeName = new String[6][];
        try{
            nodeSourcePAttributeName[0] = new String[]{"idPath1"};
            nodeSourcePAttributeName[1] = new String[]{"idPath2"};
            nodeSourcePAttributeName[2] = new String[]{"idPath3"};
            nodeSourcePAttributeName[3] = new String[]{"idPath4"};
            nodeSourcePAttributeName[4] = null;
            nodeSourcePAttributeName[5] = null;

        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildnodeSourcePAttributeName() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildnodeSourcePAttributeName() **************");
        return nodeSourcePAttributeName;
    }

    private String[][] buildnodeTargetPAttributeName() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildnodeTargetPAttributeName() ***************");
        String[][] nodeTargetPAttributeName = new String[6][];
        try{
            nodeTargetPAttributeName[0] = new String[]{"idPath1"};
            nodeTargetPAttributeName[1] = new String[]{"idPath2"};
            nodeTargetPAttributeName[2] = new String[]{"idPath3"};
            nodeTargetPAttributeName[3] = null;
            nodeTargetPAttributeName[4] = new String[]{"idPath5"};
            nodeTargetPAttributeName[5] = null;
        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildnodeTargetPAttributeName() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildnodeTargetPAttributeName() **************");
        return nodeTargetPAttributeName;
    }

    private String[][] buildnodePAttributeName() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildnodePAttributeName() ***************");
        String[][] nodePAttributeName = new String[6][];
        try{
            nodePAttributeName[0] = new String[]{"description"};
            nodePAttributeName[1] = new String[]{"description"};
            nodePAttributeName[2] = new String[]{"description"};
            nodePAttributeName[3] = null;
            nodePAttributeName[4] = new String[]{"description"};
            nodePAttributeName[5] = new String[]{"description"};
        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildnodePAttributeName() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildnodePAttributeName() **************");
        return nodePAttributeName;
    }

    private Object[][] buildnodeValuesArray() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildnodeValuesArray() ***************");
        Object[][] nodeValuesArray = new Object[6][];
        try{
            nodeValuesArray[0] = new Object[]{"description of path1"};
            nodeValuesArray[1] = new Object[]{"description of path2"};
            nodeValuesArray[2] = new Object[]{"description of path3"};
            nodeValuesArray[3] = null;
            nodeValuesArray[4] = new Object[]{"description of path5"};
            nodeValuesArray[5] = new Object[]{"description of path6"};
        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildnodeValuesArray() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildnodeValuesArray() **************");
        return nodeValuesArray;
    }

    private Collection<String[]> buildnodeSourcePAttributeNameCollection() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildnodeSourcePAttributeNameCollection() ***************");
        Collection<String[]> nodeSourcePAttributeName = new ArrayList<String[]>() ;
        try{
            nodeSourcePAttributeName.add(new String[]{"idPath1"});
            nodeSourcePAttributeName.add(new String[]{"idPath2"});
            nodeSourcePAttributeName.add(new String[]{"idPath3"});
            nodeSourcePAttributeName.add(new String[]{"idPath4"});
            nodeSourcePAttributeName.add(null);
            nodeSourcePAttributeName.add(null);

        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildnodeSourcePAttributeNameCollection() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildnodeSourcePAttributeNameCollection() **************");
        return nodeSourcePAttributeName;
    }

    private Collection<String[]> buildnodeTargetPAttributeNameCollection() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildnodeTargetPAttributeNameCollection() ***************");
        Collection<String[]> nodeTargetPAttributeName = new ArrayList<String[]>();
        try{
            nodeTargetPAttributeName.add(new String[]{"idPath1"});
            nodeTargetPAttributeName.add(new String[]{"idPath2"});
            nodeTargetPAttributeName.add(new String[]{"idPath3"});
            nodeTargetPAttributeName.add(null);
            nodeTargetPAttributeName.add(new String[]{"idPath5"});
            nodeTargetPAttributeName.add(null);
        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildnodeTargetPAttributeNameCollection() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildnodeTargetPAttributeNameCollection() **************");
        return nodeTargetPAttributeName;
    }

    private Collection<String[]> buildnodePAttributeNameCollection() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildnodePAttributeNameCollection() ***************");
        Collection<String[]> nodePAttributeName = new ArrayList<String[]>();
        try{
            nodePAttributeName.add(new String[]{"description"});
            nodePAttributeName.add(new String[]{"description"});
            nodePAttributeName.add(new String[]{"description"});
            nodePAttributeName.add(null);
            nodePAttributeName.add(new String[]{"description"});
            nodePAttributeName.add(new String[]{"description"});
        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildnodePAttributeNameCollection() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildnodePAttributeNameCollection() **************");
        return nodePAttributeName;
    }

    private Collection<Object[]> buildnodeValuesArrayCollection() throws Exception{
        log.info("************Entering the "+getThisClassName()+".buildnodeValuesArrayCollection() ***************");
        Collection<Object[]> nodeValuesArray = new ArrayList<Object[]>();
        try{
            nodeValuesArray.add(new Object[]{"description of path1"});
            nodeValuesArray.add(new Object[]{"description of path2"});
            nodeValuesArray.add(new Object[]{"description of path3"});
            nodeValuesArray.add(null);
            nodeValuesArray.add(new Object[]{"description of path5"});
            nodeValuesArray.add(new Object[]{"description of path6"});
        }catch (Exception e){
            throw new Exception("Exception in "+getThisClassName()+".buildnodeValuesArrayCollection() :"+e.toString());
        }
        log.info("************Done with the  "+getThisClassName()+".buildnodeValuesArrayCollection() **************");
        return nodeValuesArray;
    }

    @Test public void testAddTreeToTreeOneTree(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTree() ***************");
        try{
            BD bd = getBD();

            Path0VO lmnPath0VO = buildlmnPath0VO();
            Path0VO lmnCopyPath0VO = buildlmnCopyPath0VO();

            String sourceTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";
            String targetTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";

            String[][] nodeSourcePAttributeName = buildnodeSourcePAttributeName();

            String[][] nodeTargetPAttributeName = buildnodeTargetPAttributeName();

            String[][] nodePAttributeName = buildnodePAttributeName();
            //treeNodeValuesArray
            Object[][] nodeValuesArray = buildnodeValuesArray();

            boolean  added = bd.addTreeToTree(lmnCopyPath0VO,  lmnPath0VO, sourceTreePath, targetTreePath,  nodeSourcePAttributeName,  nodeTargetPAttributeName,  nodePAttributeName,  nodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            checkPath0VO(lmnPath0VO,true);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTree() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTree() **************");
    }

    @Test public void testAddTreeToTreeOneTreeNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeNoValueArray() ***************");
        try{
            BD bd = getBD();

            Path0VO lmnPath0VO = buildlmnPath0VO();
            Path0VO lmnCopyPath0VO = buildlmnCopyPath0VO();

            String sourceTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";
            String targetTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";

            String[][] nodeSourcePAttributeName = buildnodeSourcePAttributeName();

            String[][] nodeTargetPAttributeName = buildnodeTargetPAttributeName();

            boolean  added = bd.addTreeToTree(lmnCopyPath0VO,  lmnPath0VO, sourceTreePath, targetTreePath,  nodeSourcePAttributeName,  nodeTargetPAttributeName,  null,  null );

            assertEquals("added is expected to be true",true,added);

            checkPath0VO(lmnPath0VO,false);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeNoValueArray() **************");
    }

    @Test public void testAddTreeToTreeOneTreeNoSourceNoTarget(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeNoSourceNoTarget() ***************");
        try{
            BD bd = getBD();

            Path1VO lmn1Path1VO = new Path1VO();
            lmn1Path1VO.setIdPath1("lmn1Path1");

            Path1VO lmn1CopyPath1VO = new Path1VO();
            lmn1CopyPath1VO.setIdPath1("lmn1CopyPath1");

            Collection<Path2VO> lmn1Path1Path2VOs = new ArrayList<Path2VO>();
            Path2VO lmn11CopyPath2VO = new Path2VO();
            lmn11CopyPath2VO.setIdPath2("lmn11CopyPath2");

            Path2VO lmn12CopyPath2VO = new Path2VO();
            lmn12CopyPath2VO.setIdPath2("lmn12CopyPath2");

            lmn1Path1Path2VOs.add(lmn11CopyPath2VO);
            lmn1Path1Path2VOs.add(lmn12CopyPath2VO);

            lmn1CopyPath1VO.setPath2VOs(lmn1Path1Path2VOs);

            String sourceTreePath = "path2VOs";
            String targetTreePath = "path2VOs";



            String[][] nodePAttributeName = new String[1][];
            nodePAttributeName[0] = new String[]{"description"};
            //nodePAttributeName[1] = new String[]{"idPath2"};

            Object[][] nodeValuesArray = new Object[1][];
            nodeValuesArray[0] = new Object[]{"description of path2"};
            //nodeValuesArray[0] = new Object[]{"lmn11CopyPath2"};

            boolean  added = bd.addTreeToTree(lmn1CopyPath1VO,  lmn1Path1VO, sourceTreePath, targetTreePath,  null,  null,  nodePAttributeName,  nodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            Collection<Path2VO> testlmn1Path1Path2VOs = lmn1Path1VO.getPath2VOs();
            log.info("testlmn1Path1Path2VOs.size() = " + testlmn1Path1Path2VOs.size());
            assertEquals("testlmn1Path1Path2VOs.size() is expected to be 1", 1, testlmn1Path1Path2VOs.size());

            Iterator<Path2VO> testlmn1Path1Path2VOsIterator = testlmn1Path1Path2VOs.iterator();
            Path2VO testlmn11CopyPath2VO = testlmn1Path1Path2VOsIterator.next();
            //Path2VO testlmn12CopyPath2VO = testlmn1Path1Path2VOsIterator.next(); //this is nott inserted because  of the result of null key

            log.info("testlmn11CopyPath2VO.getIdPath2() = "+testlmn11CopyPath2VO.getIdPath2());
            //assertEquals("testlmn11Path2VO.getIdPath2( is expected to be lmn11CopyPath2","lmn11CopyPath2",testlmn11CopyPath2VO.getIdPath2());
            assertNull("testlmn11Path2VO.getIdPath2() is expected to be null",testlmn11CopyPath2VO.getIdPath2());
            log.info("testlmn11CopyPath2VO.getIdPath1() = "+testlmn11CopyPath2VO.getIdPath1());
            assertEquals("testlmn11CopyPath2VO.getIdPath1() is expected to be lmn1Path1","lmn1Path1",testlmn11CopyPath2VO.getIdPath1());
            assertEquals("testlmn11CopyPath2VO.getDescription() is expected to be description of path","description of path2",testlmn11CopyPath2VO.getDescription());
            /*   this is nott inserted because  of the result of null key
            log.info("testlmn12CopyPath2VO.getIdPath2() = "+testlmn12CopyPath2VO.getIdPath2());
            assertNull("testlmn12CopyPath2VO.getIdPath2( is expected to be null",testlmn12CopyPath2VO.getIdPath2());
            log.info("testlmn12CopyPath2VO.getIdPath1() = "+testlmn12CopyPath2VO.getIdPath1());
            assertEquals("testlmn12CopyPath2VO.getIdPath1() is expected to be lmn1Path1","lmn1Path1",testlmn12CopyPath2VO.getIdPath1());
            assertEquals("testlmn12CopyPath2VO.getDescription() is expected to be description of path2","description of path2",testlmn12CopyPath2VO.getDescription());
            */
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeNoSourceNoTarget() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeNoSourceNoTarget() **************");
    }

    @Test public void testAddTreeToTreeOneTreeNoSourceNoTargetNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeNoSourceNoTargetNoValueArray() ***************");
        try{
            BD bd = getBD();

            Path1VO lmn1Path1VO = new Path1VO();
            lmn1Path1VO.setIdPath1("lmn1Path1");

            Path1VO lmn1CopyPath1VO = new Path1VO();
            lmn1CopyPath1VO.setIdPath1("lmn1CopyPath1");

            Collection<Path2VO> lmn1Path1Path2VOs = new ArrayList<Path2VO>();
            Path2VO lmn11CopyPath2VO = new Path2VO();
            lmn11CopyPath2VO.setIdPath2("lmn11CopyPath2");

            Path2VO lmn12CopyPath2VO = new Path2VO();
            lmn12CopyPath2VO.setIdPath2("lmn12CopyPath2");

            lmn1Path1Path2VOs.add(lmn11CopyPath2VO);
            lmn1Path1Path2VOs.add(lmn12CopyPath2VO);

            lmn1CopyPath1VO.setPath2VOs(lmn1Path1Path2VOs);

            String sourceTreePath = "path2VOs";
            String targetTreePath = "path2VOs";

            boolean  added = bd.addTreeToTree(lmn1CopyPath1VO,  lmn1Path1VO, sourceTreePath, targetTreePath,  (String[][])null,  null,  null,  null );

            assertEquals("added is expected to be true",true,added);

            Collection<Path2VO> testlmn1Path1Path2VOs = lmn1Path1VO.getPath2VOs();
            log.info("testlmn1Path1Path2VOs.size() = " + testlmn1Path1Path2VOs.size());
            assertEquals("testlmn1Path1Path2VOs.size() is expected to be 1", 1, testlmn1Path1Path2VOs.size());

            Iterator<Path2VO> testlmn1Path1Path2VOsIterator = testlmn1Path1Path2VOs.iterator();
            Path2VO testlmn11CopyPath2VO = testlmn1Path1Path2VOsIterator.next();
            //Path2VO testlmn12CopyPath2VO = testlmn1Path1Path2VOsIterator.next(); //this is nott inserted because  of the result of null key

            log.info("testlmn11CopyPath2VO.getIdPath2() = "+testlmn11CopyPath2VO.getIdPath2());
            assertNull("testlmn11Path2VO.getIdPath2( is expected to be null",testlmn11CopyPath2VO.getIdPath2());
            log.info("testlmn11CopyPath2VO.getIdPath1() = "+testlmn11CopyPath2VO.getIdPath1());
            assertEquals("testlmn11CopyPath2VO.getIdPath1() is expected to be lmn1Path1","lmn1Path1",testlmn11CopyPath2VO.getIdPath1());
            /*this is nott inserted because  of the result of null key
            log.info("testlmn12CopyPath2VO.getIdPath2() = "+testlmn12CopyPath2VO.getIdPath2());
            assertNull("testlmn12CopyPath2VO.getIdPath2( is expected to be null",testlmn12CopyPath2VO.getIdPath2());
            log.info("testlmn12CopyPath2VO.getIdPath1() = "+testlmn12CopyPath2VO.getIdPath1());
            assertEquals("testlmn12CopyPath2VO.getIdPath1() is expected to be lmn1Path1","lmn1Path1",testlmn12CopyPath2VO.getIdPath1());
            */
        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeNoSourceNoTargetNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeNoSourceNoTargetNoValueArray() **************");
    }

    @Test public void testAddTreeToTreeOneTreeNoSource(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeNoSource() ***************");
        try{
            BD bd = getBD();

            Path0VO lmnPath0VO = buildlmnPath0VO();
            Path0VO lmnCopyPath0VO = buildlmnCopyPath0VO();

            String sourceTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";
            String targetTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";


            String[][] nodeTargetPAttributeName = buildnodeTargetPAttributeName();
            nodeTargetPAttributeName[3] = new String[]{"idPath4"};

            String[][] nodePAttributeName = buildnodePAttributeName();
            //treeNodeValuesArray
            Object[][] nodeValuesArray = buildnodeValuesArray();

            boolean  added = bd.addTreeToTree(lmnCopyPath0VO,  lmnPath0VO, sourceTreePath, targetTreePath,  null,  nodeTargetPAttributeName,  nodePAttributeName,  nodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            checkPath0VO(lmnPath0VO,true);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeNoSource() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeNoSource() **************");
    }

    @Test public void testAddTreeToTreeOneTreeNoTarget(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeNoTarget() ***************");
        try{
            BD bd = getBD();

            Path0VO lmnPath0VO = buildlmnPath0VO();
            Path0VO lmnCopyPath0VO = buildlmnCopyPath0VO();

            String sourceTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";
            String targetTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";

            String[][] nodeSourcePAttributeName = buildnodeSourcePAttributeName();
            nodeSourcePAttributeName[4] = new String[]{"idPath5"};
            String[][] nodePAttributeName = buildnodePAttributeName();
            //treeNodeValuesArray
            Object[][] nodeValuesArray = buildnodeValuesArray();

            boolean  added = bd.addTreeToTree(lmnCopyPath0VO,  lmnPath0VO, sourceTreePath, targetTreePath,  nodeSourcePAttributeName,  null,  nodePAttributeName,  nodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            checkPath0VO(lmnPath0VO,true);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeNoTarget() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeNoTarget() **************");
    }


    @Test public void testAddTreeToTreeOneTreeCollection(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeCollection() ***************");
        try{
            BD bd = getBD();

            Path0VO lmnPath0VO = buildlmnPath0VO();
            Path0VO lmnCopyPath0VO = buildlmnCopyPath0VO();

            String sourceTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";
            String targetTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";

            Collection<String[]> nodeSourcePAttributeName = buildnodeSourcePAttributeNameCollection();

            Collection<String[]> nodeTargetPAttributeName = buildnodeTargetPAttributeNameCollection();

            Collection<String[]> nodePAttributeName = buildnodePAttributeNameCollection();
            //treeNodeValuesArray
            Collection<Object[]> nodeValuesArray = buildnodeValuesArrayCollection();

            boolean  added = bd.addTreeToTree(lmnCopyPath0VO,  lmnPath0VO, sourceTreePath, targetTreePath,  nodeSourcePAttributeName,  nodeTargetPAttributeName,  nodePAttributeName,  nodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            checkPath0VO(lmnPath0VO,true);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeCollection() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeCollection() **************");
    }

    @Test public void testAddTreeToTreeOneTreeCollectionNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoValueArray() ***************");
        try{
            BD bd = getBD();

            Path0VO lmnPath0VO = buildlmnPath0VO();
            Path0VO lmnCopyPath0VO = buildlmnCopyPath0VO();

            String sourceTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";
            String targetTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";

            Collection<String[]> nodeSourcePAttributeName = buildnodeSourcePAttributeNameCollection();

            Collection<String[]> nodeTargetPAttributeName = buildnodeTargetPAttributeNameCollection();

            boolean  added = bd.addTreeToTree(lmnCopyPath0VO,  lmnPath0VO, sourceTreePath, targetTreePath,  nodeSourcePAttributeName,  nodeTargetPAttributeName,  null,  null );

            assertEquals("added is expected to be true",true,added);

            checkPath0VO(lmnPath0VO,false);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoValueArray() **************");
    }

    @Test public void testAddTreeToTreeOneTreeCollectionNoSourceNoTarget(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoSourceNoTarget() ***************");
        try{
            BD bd = getBD();

            Path1VO lmn1Path1VO = new Path1VO();
            lmn1Path1VO.setIdPath1("lmn1Path1");

            Path1VO lmn1CopyPath1VO = new Path1VO();
            lmn1CopyPath1VO.setIdPath1("lmn1CopyPath1");

            Collection<Path2VO> lmn1Path1Path2VOs = new ArrayList<Path2VO>();
            Path2VO lmn11CopyPath2VO = new Path2VO();
            lmn11CopyPath2VO.setIdPath2("lmn11CopyPath2");

            Path2VO lmn12CopyPath2VO = new Path2VO();
            lmn12CopyPath2VO.setIdPath2("lmn12CopyPath2");

            lmn1Path1Path2VOs.add(lmn11CopyPath2VO);
            lmn1Path1Path2VOs.add(lmn12CopyPath2VO);

            lmn1CopyPath1VO.setPath2VOs(lmn1Path1Path2VOs);

            String sourceTreePath = "path2VOs";
            String targetTreePath = "path2VOs";


            Collection<String[]> nodePAttributeName = new ArrayList<String[]>();
            nodePAttributeName.add(new String[]{"description"});


            Collection<Object[]> nodeValuesArray =new ArrayList<Object[]>();
            nodeValuesArray.add(new Object[]{"description of path2"});


            boolean  added = bd.addTreeToTree(lmn1CopyPath1VO,  lmn1Path1VO, sourceTreePath, targetTreePath,  null,  null,  nodePAttributeName,  nodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            Collection<Path2VO> testlmn1Path1Path2VOs = lmn1Path1VO.getPath2VOs();
            log.info("testlmn1Path1Path2VOs.size() = " + testlmn1Path1Path2VOs.size());
            assertEquals("testlmn1Path1Path2VOs.size() is expected to be 1", 1, testlmn1Path1Path2VOs.size());

            Iterator<Path2VO> testlmn1Path1Path2VOsIterator = testlmn1Path1Path2VOs.iterator();
            Path2VO testlmn11CopyPath2VO = testlmn1Path1Path2VOsIterator.next();

            log.info("testlmn11CopyPath2VO.getIdPath2() = "+testlmn11CopyPath2VO.getIdPath2());
            assertNull("testlmn11Path2VO.getIdPath2() is expected to be null",testlmn11CopyPath2VO.getIdPath2());
            log.info("testlmn11CopyPath2VO.getIdPath1() = "+testlmn11CopyPath2VO.getIdPath1());
            assertEquals("testlmn11CopyPath2VO.getIdPath1() is expected to be lmn1Path1","lmn1Path1",testlmn11CopyPath2VO.getIdPath1());
            assertEquals("testlmn11CopyPath2VO.getDescription() is expected to be description of path","description of path2",testlmn11CopyPath2VO.getDescription());


        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoSourceNoTarget() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoSourceNoTarget() **************");
    }

    @Test public void testAddTreeToTreeOneTreeCollectionNoSourceNoTargetNoValueArray(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoSourceNoTargetNoValueArray() ***************");
        try{
            BD bd = getBD();

            Path1VO lmn1Path1VO = new Path1VO();
            lmn1Path1VO.setIdPath1("lmn1Path1");

            Path1VO lmn1CopyPath1VO = new Path1VO();
            lmn1CopyPath1VO.setIdPath1("lmn1CopyPath1");

            Collection<Path2VO> lmn1Path1Path2VOs = new ArrayList<Path2VO>();
            Path2VO lmn11CopyPath2VO = new Path2VO();
            lmn11CopyPath2VO.setIdPath2("lmn11CopyPath2");

            Path2VO lmn12CopyPath2VO = new Path2VO();
            lmn12CopyPath2VO.setIdPath2("lmn12CopyPath2");

            lmn1Path1Path2VOs.add(lmn11CopyPath2VO);
            lmn1Path1Path2VOs.add(lmn12CopyPath2VO);

            lmn1CopyPath1VO.setPath2VOs(lmn1Path1Path2VOs);

            String sourceTreePath = "path2VOs";
            String targetTreePath = "path2VOs";

            boolean  added = bd.addTreeToTree(lmn1CopyPath1VO,  lmn1Path1VO, sourceTreePath, targetTreePath,  (Collection)null,  null,  null,  null );

            assertEquals("added is expected to be true",true,added);

            Collection<Path2VO> testlmn1Path1Path2VOs = lmn1Path1VO.getPath2VOs();
            log.info("testlmn1Path1Path2VOs.size() = " + testlmn1Path1Path2VOs.size());
            assertEquals("testlmn1Path1Path2VOs.size() is expected to be 1", 1, testlmn1Path1Path2VOs.size());

            Iterator<Path2VO> testlmn1Path1Path2VOsIterator = testlmn1Path1Path2VOs.iterator();
            Path2VO testlmn11CopyPath2VO = testlmn1Path1Path2VOsIterator.next();

            log.info("testlmn11CopyPath2VO.getIdPath2() = "+testlmn11CopyPath2VO.getIdPath2());
            assertNull("testlmn11Path2VO.getIdPath2( is expected to be null",testlmn11CopyPath2VO.getIdPath2());
            log.info("testlmn11CopyPath2VO.getIdPath1() = "+testlmn11CopyPath2VO.getIdPath1());
            assertEquals("testlmn11CopyPath2VO.getIdPath1() is expected to be lmn1Path1","lmn1Path1",testlmn11CopyPath2VO.getIdPath1());

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoSourceNoTargetNoValueArray() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoSourceNoTargetNoValueArray() **************");
    }

    @Test public void testAddTreeToTreeOneTreeCollectionNoSource(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoSource() ***************");
        try{
            BD bd = getBD();

            Path0VO lmnPath0VO = buildlmnPath0VO();
            Path0VO lmnCopyPath0VO = buildlmnCopyPath0VO();

            String sourceTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";
            String targetTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";


            Collection<String[]> nodeTargetPAttributeName = new ArrayList<String[]>();

            nodeTargetPAttributeName.add(new String[]{"idPath1"});
            nodeTargetPAttributeName.add(new String[]{"idPath2"});
            nodeTargetPAttributeName.add(new String[]{"idPath3"});
            nodeTargetPAttributeName.add( new String[]{"idPath4"});
            nodeTargetPAttributeName.add(new String[]{"idPath5"});
            nodeTargetPAttributeName.add(null);



            Collection<String[]> nodePAttributeName = buildnodePAttributeNameCollection();
            //treeNodeValuesArray
            Collection<Object[]> nodeValuesArray = buildnodeValuesArrayCollection();

            boolean  added = bd.addTreeToTree(lmnCopyPath0VO,  lmnPath0VO, sourceTreePath, targetTreePath,  null,  nodeTargetPAttributeName,  nodePAttributeName,  nodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            checkPath0VO(lmnPath0VO,true);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoSource() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoSource() **************");
    }

    @Test public void testAddTreeToTreeOneTreeCollectionNoTarget(){
        log.info("************Entering the "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoTarget() ***************");
        try{
            BD bd = getBD();

            Path0VO lmnPath0VO = buildlmnPath0VO();
            Path0VO lmnCopyPath0VO = buildlmnCopyPath0VO();

            String sourceTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";
            String targetTreePath = "path1VO.path2VOs.path3VOs.path4VOs.path5VO.path6VO";

            Collection<String[]> nodeSourcePAttributeName = new ArrayList<String[]>();

            nodeSourcePAttributeName.add(new String[]{"idPath1"});
            nodeSourcePAttributeName.add(new String[]{"idPath2"});
            nodeSourcePAttributeName.add(new String[]{"idPath3"});
            nodeSourcePAttributeName.add(new String[]{"idPath4"});
            nodeSourcePAttributeName.add(new String[]{"idPath5"});
            nodeSourcePAttributeName.add(null);


            Collection<String[]> nodePAttributeName = buildnodePAttributeNameCollection();
            //treeNodeValuesArray
            Collection<Object[]> nodeValuesArray = buildnodeValuesArrayCollection();

            boolean  added = bd.addTreeToTree(lmnCopyPath0VO,  lmnPath0VO, sourceTreePath, targetTreePath,  nodeSourcePAttributeName,  null,  nodePAttributeName,  nodeValuesArray );

            assertEquals("added is expected to be true",true,added);

            checkPath0VO(lmnPath0VO,true);

        }catch (Exception e){
            //assert false;
            assertTrue("Exception in "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoTarget() :"+e.toString(),false);
        }
        log.info("************Done with the  "+getThisClassName()+".testAddTreeToTreeOneTreeCollectionNoTarget() **************");
    }
}